
--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\helpers\helperExtended.js ---

let themeHelpers = {
    compare: function (lvalue, operator, rvalue, options) {

        var operators, result;
    
        if (arguments.length < 3) {
            throw new Error("Handlerbars Helper 'compare' needs 2 parameters");
        }
    
        if (options === undefined) {
            options = rvalue;
            rvalue = operator;
            operator = "===";
        }
    
        operators = {
            '==': function (l, r) { return l == r; },
            '===': function (l, r) { return l === r; },
            '!=': function (l, r) { return l != r; },
            '!==': function (l, r) { return l !== r; },
            '<': function (l, r) { return l < r; },
            '>': function (l, r) { return l > r; },
            '<=': function (l, r) { return l <= r; },
            '>=': function (l, r) { return l >= r; },
            'typeof': function (l, r) { return typeof l == r; }
        };
    
        if (!operators[operator]) {
            throw new Error("Handlerbars Helper 'compare' doesn't know the operator " + operator);
        }
    
        result = operators[operator](lvalue, rvalue);
    
        if (result) {
            return options.fn(this);
        } else {
            return options.inverse(this);
        }
    
    },
    test2: function(value) {
        return "TEST2 " + value;
    },
    select: function(selected, options) {
        return options.fn(this)
          .replace( new RegExp(' value=\"' + selected + '\"'), '$& selected="selected"')
          .replace( new RegExp('>' + selected + '</option>'), ' selected="selected"$&');
      },
    checked: function(currentValue) {
        return (currentValue == '1') ? "checked" : "";
    },
    formatCurrency: function (number) {
        var formatted = new Intl.NumberFormat("es-MX", {
            style: 'currency',
            currency: 'MXN',
            minimumFractionDigits: 2
        }).format(number);
        return formatted;
    }
};

module.exports = themeHelpers;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\helpers\helperExtended.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Intermex\Intermex.proxy.js ---


--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Intermex\Intermex.proxy.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Intermex\IntermexHandler.js ---


module.exports = {
    param_proveedor: "IN",
    buscarRemesa: async function (params) {
        let respuesta = {
            code: "00",
            message: "OK",
            order: null,
            error: null,
            proveedor: param_proveedor,
            bitacora_peticiones : null
          };
        main :{

        }
        return respuesta;
    },
    Pagar_remesa : async function(params){

    },
    validar_pago_remesa: function (remesaPago, paramsGral) {

    },
    obtenerDetallesOrden: async function (remesaPago, paramsGral,cod_remesador) {
        
    },
    get_peticiones_servicio: async function(mgiTransactionSessionID, IdUser){

    }

};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Intermex\IntermexHandler.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\MoneyGram\MoneyGram.proxy.js ---

const { default: axios } = require("axios");
const { obtenerAgentIdEquivalente, obtenerEquivalenciaCatalogo } = require("../bd");
module.exports = {
  referenceNumber: async function (params) {
    console.log(" ** referenceNumber **");
    console.log(params);
    console.log(" ** referenceNumber **");
    const {agentId, agentSequence} = await obtenerAgentIdEquivalente(params, "MG");
    try {
      let resp = await axios.post(
        `${process.env.PROVEEDORES_URL_BASE}referenceNumber`,
        {
          agentId: agentId,
          agentSequence: agentSequence,
          cod_empresa: params.cod_empresa,
          clave_cobro: params.referenceNumber,
          environment: process.env.MG_ENVIRONMENT
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      return resp.data;
    } catch (err) {
      console.log(err);
      return err.response.data;
    }
  },
  getFieldsForProduct: async function (params) {
    try {
      console.log(" ** getFieldsForProduct ** ");
      console.log(params);
      console.log(" ** getFieldsForProduct ** ");

      const { agentId, agentSequence } = await obtenerAgentIdEquivalente(
        {
          cod_empresa: params.remesa.cod_empresa,
          cod_sucursal: params.usuario.cod_sucursal,
        },
        "MG"
      );

      let resp = await axios.post(
        `${process.env.PROVEEDORES_URL_BASE}getFieldsForProduct`,
        {
          agentId: agentId,
          agentSequence: agentSequence,
          receiveCountry: params.remesa.nombre_pais_origen,
          thirdPartyType: params.thirdPartyType,
          receiveCurrency: params.remesa.divisa_destino,
          amount: params.remesa.importe,
          productType: params.productType,
          consumerId: params.consumerId,
          formFreeStaging: params.formFreeStaging,
          mgiTransactionSessionID:
            params.identificacion.mgiTransactionSessionID,
          cod_empresa: params.usuario.IdEmpresaCliente,
          clave_cobro: params.remesa.clave_cobro,
          environment: process.env.MG_ENVIRONMENT
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      return {
        code: "00",
        message: "OK",
        order: resp.fields,
        error: null,
        proveedor: "MG",
      };
    } catch (err) {
      console.log(err);
      return {
        code: "01",
         message: "MG-GFFP: Error al procesar el pago :" + err.response?.data?.errors?.error.map( (x) => x.errorString).join(','),
        order: null,
        error: err.response.data,
        proveedor: "MG",
      };
    }
  },
  receiveValidation: async function (params) {
    try {
      console.log(" ** receiveValidation ** ");
      console.log(params);
      console.log(" ** receiveValidation ** ");
      const {agentId, agentSequence} = await obtenerAgentIdEquivalente(
        {
          cod_empresa: params.remesa.cod_empresa,
          cod_sucursal: params.usuario.cod_sucursal,
        },
        "MG"
      );

      // Obtenemos el catalogo de identificacion
      let MGIdentificacion = await  obtenerEquivalenciaCatalogo('MG','IDENTIFICACION',
        {
          cod_empresa: params.remesa.cod_empresa,
          id_identificacion: params.identificacion.identificacion,
        });// params.identificacion.identificacion;
      let MGReceiverState = await  obtenerEquivalenciaCatalogo("MG", "ESTADO", {
          cod_empresa: params.remesa.cod_empresa,
          id_estado: params.data.cboEstado,
        });
      let MGReceiverOccupation = await  obtenerEquivalenciaCatalogo(
        "MG",
        "OCUPACION",
        {
          cod_empresa: params.remesa.cod_empresa,
          id_ocupacion:  params.data.actividad,
        }
       
      );
      let MGReceivePurposeOfTransaction = await  obtenerEquivalenciaCatalogo(
        "MG",
        "PROPOSITO",
        {
          cod_empresa: params.remesa.cod_empresa,
          id_proposito:  params.data.proposito,
        }
      );
      let MGRelationshipToSender = await obtenerEquivalenciaCatalogo('MG','PARENTESCO',{
          cod_empresa: params.remesa.cod_empresa,
          id_parentesco: params.data.parentesco,
        });
      let MGReceiverIntendedUseOfMGIServices = await  obtenerEquivalenciaCatalogo('MG','USO_SERVICIO',{
          cod_empresa: params.remesa.cod_empresa,
          id_intencion: params.data.intencion,
        });

      let queryParams = {
        agentId: agentId,
        agentSequence: agentSequence,
        referenceNumber: params.remesa.clave_cobro,
        receiveCurrency: params.remesa.divisa_destino,
        agentCheckAmount: params.remesa.importe,
        receiverAddress: params.data.calle,
        receiverCity: params.data.ciudad,
        receiverState: MGReceiverState,
        receiverZipCode: params.data.cp,
        receiverCountry: params.data.pais,
        receiverPhotoIdType: MGIdentificacion, 
        receiverPhotoIdNumber: params.identificacion.NumeroIdentificacion,
        receiverPhotoIdCountry:
          params.identificacion.paisEmision || params.data.paisNacimiento,
        receiverDOB: params.identificacion.FechaNacimientoC,
        MGReceiverOccupation: MGReceiverOccupation,
        receiverBirthCountry: params.data.paisNacimiento,
        consumerId: params.consumerId,
        receiverPhone: params.data.lada + "" + params.data.telefono,
        mgiTransactionSessionID: params.identificacion.mgiTransactionSessionID,
        formFreeStaging: params.formFreeStaging,
        receivePurposeOfTransaction: MGReceivePurposeOfTransaction,
        relationshipToSender: MGRelationshipToSender,
        receiverPhoneCountryCode: params.data.pais,
        receiverIntendedUseOfMGIServices: MGReceiverIntendedUseOfMGIServices,
        cod_empresa: params.usuario.IdEmpresaCliente,
        clave_cobro: params.remesa.clave_cobro,
        environment: process.env.MG_ENVIRONMENT
      };
      console.log(' **** QueryParams ***** ');
      console.log(queryParams);
      console.log(" **** QueryParams ***** ");

      let resp = await axios.post(
        `${process.env.PROVEEDORES_URL_BASE}receiveValidation`,
        queryParams,
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      return {
        code: "00",
        message: "OK",
        order: resp.data,
        error: null,
        proveedor: "MG",
      };
    } catch (err) {
      console.log("MG-RV");
      const rawErrors = err.response?.data?.errors?.error;
      const errorList = Array.isArray(rawErrors) ? rawErrors : [rawErrors];

      const errorMessages = errorList
        .filter(Boolean)
        .map((e) => e.errorString)
        .join(',');

      return {
        code: "01",
        message: "MG-RV: Error al procesar el pago: " + errorMessages,
        order: null,
        error: err,
        proveedor: "MG",
      };
    }
  },
  commitTransaction: async function (params) {
    try {
      console.log(" ** commitTransaction ** ");
      console.log(params);
      console.log(" ** commitTransaction ** ");
      const { agentId, agentSequence } = await obtenerAgentIdEquivalente(
        {
          cod_empresa: params.remesa.cod_empresa,
          cod_sucursal: params.usuario.cod_sucursal,
        },
        "MG"
      );
      let resp = await axios.post(
        `${process.env.PROVEEDORES_URL_BASE}commitTransaction`,
        {
          agentId: agentId,
          agentSequence: agentSequence,
          mgiTransactionSessionID: params.identificacion.mgiTransactionSessionID,
          productType: params.productType,
          timeStamp: params.timeStamp,
          cod_empresa: params.usuario.IdEmpresaCliente,
          clave_cobro: params.remesa.clave_cobro,
          environment: process.env.MG_ENVIRONMENT
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      return {
        code: "00",
        message: "OK",
        order: resp.data,
        error: null,
        proveedor: "MG",
      };
    } catch (err) {
      console.log(err);
      return {
        code: "01",
         message: "MG-CT: Error al procesar el pago :" + err.response?.data?.errors?.error.map( (x) => x.errorString).join(','),
        order: null,
        error: err.response.data,
        proveedor: "MG",
      };
    }
  },
  receiveReversal: async function (params) {
    try {
      console.log(" ** receiveReversal ** ");
      console.log(params);
      console.log(" ** receiveReversal ** ");
      const { agentId, agentSequence } = await obtenerAgentIdEquivalente(
        {
          cod_empresa: params.cod_empresa,
          cod_sucursal: params.cod_sucursal,
        },
        "MG"
      );
      let MGMotivo = 'WANT_CASH'; // params.motivo;
      let resp = await axios.post(
        `${process.env.PROVEEDORES_URL_BASE}receiveReversal`,
        {
          agentId: agentId,
          agentSequence: agentSequence,
          receiveAmount: params.importe_destino,
          referenceNumber: params.cve_cobro,
          receiveReversalReason: MGMotivo,
          cod_empresa: params.cod_empresa,
          clave_cobro: params.cve_cobro,
          environment: process.env.MG_ENVIRONMENT
        },
        {
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      return {
        code: "00",
        message: "OK",
        order: resp.data,
        error: null,
        proveedor: "MG",
      };
    } catch (err) {
      console.log(err);
      return {
        code: "01",
        message: "MG-RR: Error al reversar el pago :" + err.response?.data?.errors?.error.map( (x) => x.errorString).join(','),
        order: null,
        error: err.response.data,
        proveedor: "MG",
      };
    }
  }
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\MoneyGram\MoneyGram.proxy.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\MoneyGram\MoneygramHandler.js ---

const { referenceNumber, getFieldsForProduct, receiveValidation, commitTransaction, receiveReversal} = require("./MoneyGram.proxy");
const fnBitacora = require("../../../../lib/bitacoras");
const fn = require("../../../catalogosFunctions");
const bd = require("../bd");
module.exports = {
    param_proveedor: "MG"
    ,
    Buscar_remesa: async function(params, remesador_data){
        let parametros = {
            referenceNumber: params.cve_cobro,
            cod_sucursal: params.cod_sucursal,
            cod_empresa: params.IdEmpresaCliente
          };
        let respuesta = {
            code: "00",
            message: "OK",
            order: null,
            error: null,
            proveedor: this.param_proveedor,
            bitacora_peticiones : null
          };
        main :{
            let result_remesa_moneygram = null;
            try {
              result_remesa_moneygram = await referenceNumber(parametros);
            } catch (error) {
              
              let errorMessage = error.response?.data?.errors?.error.map( (x) => x.errorString).join(',') || 'No existe conexión con el servicio';

              respuesta = {
                code: "99",
                message: "MG: Error al consultar la orden: " + errorMessage,
                order: null,
                error: errorMessage,
                proveedor: this.param_proveedor,
                bitacora_peticiones : null
              }
              break main;    
            }
            
            console.log("****************  MG **************** ");
            console.log(result_remesa_moneygram);
            console.log("****************  MG **************** ");
            if(result_remesa_moneygram.order == null || result_remesa_moneygram.order == undefined){
              let soaprequest = await this.get_peticiones_servicio(
                "",
                params.cve_cobro
              );
                respuesta = {
                  code: '99',
                  message: `MG: La remesa ya no esta disponible por parte de Moneygram, contacte a MoneyGram. - No disponible [${result_remesa_moneygram.error || ''}]`,
                  order: null,
                  error: result_remesa_moneygram.error,
                  proveedor: this.param_proveedor,
                  bitacora_peticiones : soaprequest
                };
                break main;
            }
            // Validamos si se puede pagar la remesa
            let puedePagarse = this.validar_pago_remesa(
                result_remesa_moneygram,
                parametros
            );
            if (puedePagarse.code != "00") {
                let soaprequest = await this.get_peticiones_servicio(
                  result_remesa_moneygram.order[0].mgiTransactionSessionID,
                  params.cve_cobro
                );
                respuesta = {
                  code: puedePagarse.code, //"01",
                  message: puedePagarse.message, // "La remesa ya no esta disponible por parte de Moneygram, contacte a MoneyGram.",
                  order: result_remesa_moneygram.order,
                  error: null,
                  proveedor: this.param_proveedor,
                  bitacora_peticiones : soaprequest
                };
                break main;
            }
            if (result_remesa_moneygram.errors) {
                respuesta = {
                  code: "01",
                  message:
                    "MG: No existe la remesa" +
                    JSON.stringify(result_remesa_moneygram.errors.error),
                  order: null,
                  error: result_remesa_moneygram.errors.error,
                  proveedor: this.param_proveedor,
                  bitacora_peticiones : null
                };
                break main;
            } else {
                //Homologamnos la respuesta
                let orden = await this.obtenerDetallesOrden(result_remesa_moneygram.order, params, remesador_data);  
                let soaprequest = await this.get_peticiones_servicio(
                  result_remesa_moneygram.order[0].mgiTransactionSessionID,
                  params.cve_cobro
                );
                respuesta = {
                  code: "00",
                  message: "OK",
                  order: orden, 
                  error: null,
                  proveedor: this.param_proveedor,
                  bitacora_peticiones : soaprequest
                };
            }
        }
        return respuesta;
    },
    Pagar_remesa : async function(params){
      try{
        // llamar el GetFieldsForProduct
        // llamar el receiveValidation
        // llamar el commitTransaction
        console.log(" **** Pagar_remesa PARAMS **** " );
        console.log(params);
        console.log(" **** Pagar_remesa PARAMS **** ");
        console.log(" **** Pagar_remesa **** mgiTransactionSessionID");
        console.log(params.identificacion.mgiTransactionSessionID);
        console.log(" **** Pagar_remesa **** mgiTransactionSessionID");
        let GFFPResponse = await getFieldsForProduct({
          ...params,
          productType: "RCV",
          consumerId: 0,
          formFreeStaging: "false",
          thirdPartyType: "NONE",
        });
        console.log(" *** GFFPResponse *** ");
        console.log(GFFPResponse);
        console.log(" *** GFFPResponse *** ");
        if (GFFPResponse.code != "00") {
          return {
            code: GFFPResponse.code,
            message: "MG: " + GFFPResponse.message,
            order: null,
            error: null,
            proveedor: "MG",
          };
        }
    
        let receiveValidationResponse = await receiveValidation({
          ...params,
          productType: "RCV",
          consumerId: 0,
          formFreeStaging: "false",
          thirdPartyType: "NONE",

        });
        console.log(" *** receiveValidationResponse *** ");
        console.log(receiveValidationResponse);
        console.log(" *** receiveValidationResponse *** ");
        if (receiveValidationResponse.code != "00") {
          return {
            code: receiveValidationResponse.code,
            message: "MG: " + receiveValidationResponse.message,
            order: null,
            error: null,
            proveedor: "MG",
          };
        }
    
        let commitTransactionResponse = await commitTransaction({
          ...params,
          mgiTransactionSessionID: params.data.mgiTransactionSessionID,
          productType: "RCV",
          consumerId: 0,
          formFreeStaging: "false",
          thirdPartyType: "NONE",
          timeStamp: receiveValidationResponse.order.fields[0].timeStamp,
        });
        console.log(" *** commitTransactionResponse *** ");
        console.log(commitTransactionResponse);
        console.log(" *** commitTransactionResponse *** ");
        if (commitTransactionResponse.code != "00"){
          return {
            code: commitTransactionResponse.code,
            message: "MG: " + commitTransactionResponse.message,
            order: null,
            error: null,
            proveedor: "MG",
          };
        }
    
        return {
          code: "00",
          message: "OK",
          order: null,
          error: null,
          proveedor: "MG",
        };
      }catch(error){
        console.log(" ** [ERROR-MG] ");
        console.log(error);
        console.log(" ** [ERROR-MG] ");
        return {
          code: "01",
          message: "MG: Error al procesar el pago, intente de nuevo.",
          order: null,
          error: null,
          proveedor: "MG",
        };
      }
    },
    validar_pago_remesa: function (remesaPago, paramsGral) {
     if(remesaPago.order === undefined){
        return {
          code: "99",
          message:
            "MG: La remesa ya no esta disponible por parte de Moneygram, Contacte a MoneyGram.",
        };
      }
        if (
          !remesaPago.order[0].okForAgent ||
          !remesaPago.order[0].okForPickup ||
          remesaPago.order[0].transactionStatus != "AVAIL"
        ) {
          console.log(
            ` *** [ERROR-MG]: Remesa no Disponible: referenceNumber: ${remesaPago.order[0].referenceNumber}, okForAgent: ${remesaPago.order[0].okForAgent}, okForPickup: ${remesaPago.order[0].okForPickup}, transactionStatus: ${remesaPago.order[0].transactionStatus}`
          );
          return {
            code: "01",
            message:
              "MG: La remesa ya no esta disponible por parte de Moneygram, Contacte a MoneyGram.",
          };
        }
    
        // Validamos que el delivery options sea WILL CALL
        if (remesaPago.order[0].deliveryOption != "WILL_CALL") {
          console.log(
            ` *** [ERROR-MG]: Remesa no Disponible: referenceNumber: ${remesaPago.order[0].referenceNumber}, okForAgent: ${remesaPago.order[0].okForAgent}, okForPickup: ${remesaPago.order[0].okForPickup}, transactionStatus: ${remesaPago.order[0].transactionStatus}, deliveryOptions: ${remesaPago.order[0].deliveryOption}`
          );
          return {
            code: "01",
            message:
              "Tipo de operación no válida para esta sucursal, favor de contactar a su remitente - (NO WILL CALL)",
          };
        }
    
        return {
          code: "00",
          message: "OK",
        };
    },
    obtenerDetallesOrden: async function (remesaPago, paramsGral, remesador_data) {
        let order = remesaPago[0];
        // /* Registramos en bitacora */
        fnBitacora.cod_empresa = paramsGral.IdEmpresaCliente;
        fnBitacora.cod_transmisor = remesador_data.cod_remesador;
        fnBitacora.cod_corresponsal = paramsGral.IdAgenteRelacionado || "";
        fnBitacora.cve_cobro = order.referenceNumber;
        fnBitacora.observaciones =
          "CONSULTA DE GIRO EN SUCURSAL " + paramsGral.cod_sucursal;
        fnBitacora.id_usuario = paramsGral.IdUser;
        fnBitacora.cod_empresa_usuario = paramsGral.IdEmpresa;
        await fnBitacora.Registra_MovimientoRemesa();
      
        return {
          clave_cobro: order.referenceNumber,
          transmisor: remesador_data.nombre, //"MONEYGRAM",
          cod_transmisor: remesador_data.cod_remesador, //"RM023",
          cod_corresponsal: paramsGral.IdAgenteRelacionado,
          importe: order.agentCheckAmount,
          importe_formato:
            fn.FormatCurrency("es-MX", "MXN", 2, order.agentCheckAmount) +
            " MXN",
          nombre_remitente: order.senderFirstName,
          nombre_completo_remitente:
            order.senderFirstName + " " + order.senderLastName,
          NombreCte: order.receiverFirstName,
          ApaternoCte: order.receiverLastName,
          AmaternoCte: "",
          telefono_remitente: order.senderHomePhone,
          estado_origen: "",
          pais_origen: order.originatingCountry,
          nombre_pais_origen: order.originatingCountry,
          importe_formato_origen: fn.FormatCurrency(
            "es-MX",
            "MXN",
            2,
            order.originalSendAmount
          ),
          nombre_divisa_origen: order.originalSendCurrency,
          fecha_envio: order.dateTimeSent,
          tipo_cambio: order.originalExchangeRate,
          pais_destino: order.originatingCountry,
          divisa_destino: order.receiveCurrency,
          cod_empresa: paramsGral.IdEmpresaCliente,
          proveedor : this.param_proveedor,
          importe_origen: order.originalSendAmount,
          divisa_origen: order.originalSendCurrency,
          tc: order.originalExchangeRate
        };
       
    },
    get_peticiones_servicio: async function(mgiTransactionSessionID, clave_cobro){
        let MG_object_Params = {};
        let MG_mensajes_Bitacora = undefined;
        MG_mensajes_Bitacora = await bd.obtener_bitacoras_MG(clave_cobro);
        MG_object_Params = {
            mgiTransactionSessionID: mgiTransactionSessionID,
            MG_mensajes_Bitacora: MG_mensajes_Bitacora,  
        };
        console.log("************* MG_mensajes_Bitacora **************");
        console.log(MG_object_Params);
        console.log("************* MG_mensajes_Bitacora **************");
        return MG_object_Params;
    },
    reversaPago: async function(params){
      let receiveReversalResponse = await receiveReversal(params);
      console.log(" *** receiveReversalResponse *** ");
      console.log(receiveReversalResponse);
      console.log(" *** receiveReversalResponse *** ");
      if (receiveReversalResponse.code != "00"){
        return {
          code: receiveReversalResponse.code,
          message: "MG: " + receiveReversalResponse.message,
          order: null,
          error: null,
          proveedor: "MG",
        };
      }
      return {
        code: "00",
        message: "OK",
        order: null,
        error: null,
        proveedor: "MG",
      };
    },
    obtenerErrores(objError){

    }

};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\MoneyGram\MoneygramHandler.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\RiaEnvia\RiaEnvia.proxy.js ---


--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\RiaEnvia\RiaEnvia.proxy.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\RiaEnvia\RiaEnviaHandler.js ---


module.exports = {
    param_proveedor: "RE",
    buscarRemesa: async function (params) {
        let respuesta = {
            code: "00",
            message: "OK",
            order: null,
            error: null,
            proveedor: param_proveedor,
            bitacora_peticiones : null
          };
        main :{

        }
        return respuesta;
    },
    Pagar_remesa : async function(params){

    },
    validar_pago_remesa: function (remesaPago, paramsGral) {

    },
    obtenerDetallesOrden: async function (remesaPago, paramsGral,cod_remesador) {
        
    },
    get_peticiones_servicio: async function(mgiTransactionSessionID, IdUser){

    }

};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\RiaEnvia\RiaEnviaHandler.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\WesternUnion\WesternUnion.proxy.js ---


--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\WesternUnion\WesternUnion.proxy.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\WesternUnion\WesternUnionHandler.js ---


module.exports = {
    param_proveedor: "WU",
    buscarRemesa: async function (params) {
        
        let respuesta = {
            code: "00",
            message: "OK",
            order: null,
            error: null,
            proveedor: param_proveedor,
            bitacora_peticiones : null
          };
        main :{

        }
        return respuesta;
    },
    Pagar_remesa : async function(params){

    },
    validar_pago_remesa: function (remesaPago, paramsGral) {

    },
    obtenerDetallesOrden: async function (remesaPago, paramsGral,cod_remesador) {
        
    },
    get_peticiones_servicio: async function(mgiTransactionSessionID, IdUser){

    }

};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\WesternUnion\WesternUnionHandler.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\bd.js ---

const pool = require("../../../database");
module.exports = {
  consulta_remesa_despago: async function (cod_empresa, cve_cobro) {
    let params = [cod_empresa, cve_cobro];
    console.log(params);
    var resp = await pool.query("call usp_consulta_remesa_despago (?)", [
      params,
    ]);
    return resp[0];
  },
  ejecuta_remesa_despago: async function (request) {
    let params = [
      request.cod_empresa,
      request.cod_transmisor,
      request.cod_corresponsal,
      request.cve_cobro,
      request.no_ticket,
      request.motivo,
      request.observaciones,
      request.cod_usuario,
      request.cod_sucursal,
      request.nombre_usuario,
    ];
    console.log(params);
    var resp = await pool.query("call usp_ejecuta_remesa_despago (?)", [
      params,
    ]);
    return resp[0];
  },
  obtener_bitacoras_MG: async function (clave_cobro) {
    let params = [clave_cobro];
    await new Promise((resolve) => setTimeout(resolve, 500));
    var resp = await pool.query(
      " select cod_empresa, clave_cobro, endpoint, tipo, soapxml, cast(fecha_registro as char) fecha_registro from bitacora_consulta_mg where clave_cobro = ? order by id desc limit 5 ",
      params
    );
    // var resp = await pool.query(
    //   " select cod_empresa, clave_cobro, endpoint, tipo, soapxml, cast(fecha_registro as char) fecha_registro from bitacora_consulta_mg where clave_cobro = ? order by id",
    //   params
    // );
    return resp;
  },
  obtenerAgentIdEquivalente: async function (params, proveedor) {
    //return "43711291";

    const query =
      "select cod_sucursal_equivalente, cod_agent_sequence from remesadores_equivalencia_sucursales where cod_empresa= ? and cod_sucursal = ? and cod_producto = ?";
    let rowsAgentId = await pool.query(query, [
      params.cod_empresa,
      params.cod_sucursal,
      proveedor,
    ]);
    console.log(" ** obtenerAgentIdEquivalente ** ");
    console.log(rowsAgentId[0]);
    console.log(" ** obtenerAgentIdEquivalente ** ");
    return {
      agentId: rowsAgentId[0].cod_sucursal_equivalente || "",
      agentSequence: rowsAgentId[0].cod_agent_sequence || "",
    };
  },
  obtenerCodRemesador: async function (params) {
    const query =
      "select cod_remesador, nombre from empresa_remesadores where cod_empresa = ? and prefijo_servicio = ?";
    let rowsCodRemesador = await pool.query(query, [
      params.cod_empresa,
      params.proveedor,
    ]);
    return rowsCodRemesador[0];
  },
  obtenerCodProveedor: async function (params) {
    const query =
      "select ifnull(prefijo_servicio,'') as cod_proveedor, nombre from empresa_remesadores where cod_empresa = ? and cod_remesador = ?";
    let rowsCodRemesador = await pool.query(query, [
      params.cod_empresa,
      params.cod_transmisor,
    ]);
    return rowsCodRemesador[0];
  },
  obtenerCodAgente: async function (params) {
    const query =
      "select cod_agente, nombre from agentes_relacionados where cod_empresa = ? and prefijo_servicio = ?";
    let rowsCodRemesador = await pool.query(query, [
      params.cod_empresa,
      params.proveedor,
    ]);
    return rowsCodRemesador[0];
  },
  obtenerEquivalenciaCatalogo: async function (
    proveedor,
    catalogo,
    objValorItech
  ) {
    let query;
    let newValue;
    let params;
    let rows;
    switch (catalogo) {
      case "IDENTIFICACION":
        query =
          "select cod_equivalente from cat_externo_identificacion where producto= ? and cod_empresa = ? and id_identificacion = ?";
        params = [proveedor, objValorItech.cod_empresa, objValorItech.id_identificacion];
        rows = await pool.query(query, params);
        newValue = rows[0].cod_equivalente;
        break;
      case "ESTADO":
        query = "select cod_equivalente from cat_externo_estado where producto = ? and cod_empresa= ? and id_estado = ?";
        params = [proveedor, objValorItech.cod_empresa, objValorItech.id_estado];
        rows = await pool.query(query, params);
        newValue = rows[0].cod_equivalente;
        break;
      case "OCUPACION":
        query =
          "select cod_equivalente from cat_externo_ocupacion where producto= ? and cod_empresa= ? and cod_Actividad = ?";
        params = [proveedor, objValorItech.cod_empresa, objValorItech.id_ocupacion];
        rows = await pool.query(query, params);
        newValue = rows[0].cod_equivalente;
        break;
      case "PROPOSITO":
        query =
          "select cod_equivalente from cat_externo_proposito where producto= ? and cod_empresa= ? and id_proposito = ?";
        params = [proveedor, objValorItech.cod_empresa, objValorItech.id_proposito];
        rows = await pool.query(query, params);
        newValue = rows[0].cod_equivalente;
        break;
      case "PARENTESCO":
        query =
          "select cod_equivalente from cat_externo_parentesco where producto= ? and cod_empresa= ? and id_parentesco = ?";
        params = [proveedor,objValorItech.cod_empresa, objValorItech.id_parentesco];
        rows = await pool.query(query, params);
        newValue = rows[0].cod_equivalente;
        break;
      case "USO_SERVICIO":
        newValue = objValorItech.id_intencion;
        break;
      default:
        throw Error(
          `¡Valor no existente!, revisar: Proveedor: ${proveedor}  Catálogo: ${catalogo}  Valor: ${JSON.stringify(objValorItech)}`
        );
    }
    return newValue;
  }
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\bd.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Cancel.service.js ---

const { cod_transmisor, cod_corresponsal } = require("../../bitacoras");
const objbd = require("./bd");

class CancelService {
    request_reversa_pago_remesa = { cod_empresa: "", cve_cobro: "", cod_transmisor : "", cod_corresponsal : "", prefijo_servicio: "", no_ticket : "", motivo : "", observaciones : "", cod_usuario : "", cod_sucursal : "", nombre_usuario : ""};
    constructor() {
    }
    
    createResponse(code, msg, data = null) {return { code, msg, data };}
    async consulta_remesa_envio(cod_empresa, cve_cobro) {
        try {
            //Consultamos el giro en BD
            const resultado = await objbd.consulta_remesa_despago(cod_empresa, cve_cobro);

            if (resultado[0].code == "99") {
                return this.createResponse(404, resultado[0].msg, null);
            }
            console.log(resultado[0]);
            return this.createResponse("00", "", resultado[0]);
            
        } catch (error) {
            console.error("Error en reversa_pago_remesa:", error);
            return this.createResponse(500, "Error interno del servidor", error.message);
        } 
    }
    async ejecuta_cancelacion_envio_remesa(params) {
        this.request_reversa_pago_remesa = { ...this.request_reversa_pago_remesa, ...params };
        let  resultado = null;
        try {
            switch (this.request_reversa_pago_remesa.indicador_transmisor) {
                case "MG":
                    // Aqui conecta con los servicios de MG para realizar la reversa
                    // Si la respuesta es satisfactoria, la remesa debe de eliminarse de la tabla remesas_in, bitacoras, remesas_in_calificacion
                    resultado = await objbd.ejecuta_remesa_despago(this.request_reversa_pago_remesa);
                    if (resultado[0].code == "99") {
                        return this.createResponse(404, resultado[0].msg, null);
                    }
                    console.log(resultado[0]);
                    return this.createResponse("00", "", resultado[0]);
                    // Las ordenes son locales
                    break;
                default:
                    resultado = await objbd.ejecuta_remesa_despago(this.request_reversa_pago_remesa);
                    if (resultado[0].code == "99") {
                        return this.createResponse(404, resultado[0].msg, null);
                    }
                    console.log(resultado[0]);
                    return this.createResponse("00", resultado[0].msg, null);
                    // Las ordenes son locales
                    break;
            } 
        } catch (error) {
            console.error("Error en reversa_pago_remesa:", error);
            return this.createResponse(500, "Error interno del servidor", error.message);
        } 
    }
    async cancelacion_envio_remesa(params){
        
    }
}
module.exports = {CancelService}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Cancel.service.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Pay.Service.js ---

const pool = require("../../../database");
const fnBitacora = require("../../../lib/bitacoras");
const fn = require("../../catalogosFunctions");
const { obtenerCodRemesador } = require("./bd");
const objMG = require("./MoneyGram/MoneygramHandler");
const objcaja = require("../CajaService");
const objRequest = require("../CajaRequest");
const { request } = require("express");

module.exports = {
  buscarRemesa: async function (params) {
    let paramsGral = params;
    let proveedor = "";
    let existeRemesaBD = false;
    let cod_remesador = "";
    let remesador_data = {};
    let respuesta = {
      code: "",
      message: "OK",
      order: null,
      error: null,
      proveedor: null,
      bitacora_peticiones : null
    };
    /* 1 .- Validar si la remesa esta en sistema
            Si la remesa existe se verifica el status de la orden, si esta disponible o retenida por cumplimiento, verificar si es MG, 
            Si es MG se debe consultar con el proveedor para ver el status de la orden y  continuar con el proceso de pago
            Si no existe la remesa verificar si no corresponde a MG
    */
    let paramsSP = [
      params.IdEmpresaCliente,
      params.IdAgenteRelacionado,
      params.cve_cobro,
      params.cod_sucursal,
      params.IdUser,
      params.IdEmpresa,
      params.IdTipoConsulta,
    ];
        
    main : {
      let result_remesa_local = await pool.query("call usp_consulta_remesa_pago (?)", [paramsSP]);
     
      if (result_remesa_local.length != 2) {
          respuesta = {
          code: result_remesa_local[0].code,
          message: "Error al consultar la información, intente de nuevo",
          order: null,
          error: null,
          proveedor: null,
          bitacora_peticiones : null
        };
        break main;
      }

      let rs = result_remesa_local[0]; // Recupera los datos de la remesa
      
      if(rs[0].code == "00"){  // La remesa existe para ser cobrada
        if(rs[0].prefijo_servicio != ""){ // se verifica con el proveedor que realmente pueda cobrarse
          existeRemesaBD = true;
          proveedor = rs[0].prefijo_servicio; 
          cod_remesador = rs[0].cod_transmisor;
        }else{ //Se devuelve la informacion de la remesa local
          // Homologamos datos de la orden
          let orden = await this.obtenerDetallesOrden(rs[0], paramsGral);
          respuesta = { 
            code: rs[0].code,
            message: rs[0].msg,
            order: orden,
            error: null,
            proveedor: "",
            bitacora_peticiones : null
          };  
          break main;
        }
      }
      else if(rs[0].code == "01"){  // La remesa no existe en BD
        proveedor = this.obtenProveedorRemesaPago(params); // Obtenemos proveedor para verficar si con este existe la remesa
      }else{ // Devuelve error obtenido de SP de Busqueda de giro si el codigo es diferente a 00 y 01
        respuesta = {
          code: rs[0].code,
          message: rs[0].msg,
          order: null,
          error: null,
          proveedor: "",
          bitacora_peticiones : null
        };
        break main;
      }
      if(proveedor!=""){ // si no existe la remesa y el proveedor es online obtenemos el codigo de transmisor
        remesador_data =  await obtenerCodRemesador({cod_empresa: paramsGral.IdEmpresaCliente,proveedor: proveedor});
      }

      respuesta = await this.ejecuta_accion_proveedor(proveedor,"CONSULTA", respuesta,params, remesador_data);
      
      if((respuesta.code=="00") && (proveedor!= "") && (existeRemesaBD == false)){
           let result_save = await this.guardarRemesaRecibida(respuesta.order, paramsGral);
           console.log("******* result save **********");
           console.log(result_save);
           console.log("******* result save **********")

           if(result_save[0].code != "00"){
              respuesta = {
                code: "99",
                message:
                  "Error al registrar la remesa en sistema, contacte al administrador de sistema",
                order: null,
                error: null,
                proveedor: null,
              }; 
              break main;
           }
      }
    }
    return respuesta;
  },
  pagarRemesa: async function (parametros){
    let bitacora_peticiones = {};
    cod_proveedor = parametros.remesa.proveedor;
    let respuesta = {
      code: "00",
      message: "OK",
      order: null,
      error: null,
      proveedor: null,
      bitacora_peticiones : null
    };

    let request_caja = {};
    let rsc = {};
    let request_confirmacion = {};

    // ****** PASO 1 registro en caja ******
    const cajaInstance = new objcaja.CajaService(); 
    let aplicaCaja = await cajaInstance.validaSiaplicaCaja();
    if(aplicaCaja == 1){
      request_caja = objRequest.get_request_by_registro_caja(parametros, "PAG");
      rsc = await cajaInstance.registrar_operacion_caja(request_caja);
      if(rsc.code !="00"){
        return respuesta = {
          code: "99",
          message: rsc.message,
          order: null,
          error: null,
          proveedor: null,
          bitacora_peticiones : null
        }
      }
      request_confirmacion = objRequest.get_request_by_confirmacion_caja(parametros, rsc.data);
    }
    // ****** FIN PASO 1 registro en caja ******

    respuesta = await this.ejecuta_accion_proveedor(cod_proveedor,"PAGO",respuesta,parametros,null);
    if(respuesta.code != "00"){
      if(aplicaCaja == 1){
          rsc = await cajaInstance.anular_operacion_caja(request_confirmacion);
      }
      return respuesta;
    }

    /*******PASO 2 Confirmacion de operacion en caja  *********/
        if(aplicaCaja == 1){
          rsc = await cajaInstance.confirmar_operacion_caja(request_confirmacion);
          if(rsc.code !="00"){
              let rs = await this.ejecuta_accion_proveedor(cod_proveedor,"ANULACION",respuesta,parametros,null);
              if(rs.code == "00"){
                  return respuesta = {
                  code: "99",
                  message: rsc.message,
                  order: null,
                  error: null,
                  proveedor: null,
                  bitacora_peticiones : null
                  };  
              }   
              
              return respuesta = {
                code: "99",
                message: rsc.message + "-" + "ES NECESARIO REVERSAR PAGO MANUALMENTE CON PROVEEDOR:"+ rs.message,
                order: null,
                error: null,
                proveedor: null,
                bitacora_peticiones : null
              }
          }
        }
        /*******FIN PASO 2 Confirmacion de operacion en caja  *********/

    try {
          let Params = [
            parametros.usuario.IdEmpresaCliente,
            parametros.data.cod_cliente,
            parametros.remesa.cod_transmisor,
            parametros.usuario.IdAgenteRelacionado,
            parametros.remesa.clave_cobro,
            parametros.data.pais,
            parametros.data.cboEstado,
            parametros.data.cboMuncipio,
            parametros.data.cod_colonia,
            parametros.data.ciudad,
            parametros.data.cp,
            parametros.data.txtEstado,
            parametros.data.txtMunicipio,
            parametros.data.txtColonia,
            parametros.data.calle,
            parametros.data.noext,
            parametros.data.noint,
            parametros.data.nacionalidad,
            parametros.data.paisNacimiento,
            parametros.identificacion.identificacion,
            parametros.identificacion.NumeroIdentificacion,
            parametros.identificacion.fechaExpedicionC,
            parametros.identificacion.fechaExpiracionC,
            parametros.identificacion.AnioExpedicionC,
            parametros.identificacion.AnioExpiracionC,
            parametros.identificacion.paisEmision,
            parametros.data.proposito,
            parametros.data.actividad,
            parametros.data.parentesco,
            parametros.usuario.IdUser,
            parametros.data.NumOperacionesEsperadas,
            parametros.data.lada,
            parametros.data.telefono,
            parametros.usuario.cod_sucursal,
            parametros.usuario.Nombre,
            parametros.usuario.AgenteRelacionado,
            parametros.usuario.sucursal,
            parametros.identificacion.qtNombre,
            parametros.identificacion.qtOrigen,
            parametros.identificacion.qtImporte,
            parametros.remesa.pais_origen,
            parametros.data.genero,
            parametros.data.rfc,
            parametros.data.curp,
            parametros.data.email,
            parametros.data.intencion
          ];
          console.log(Params);
          let resultadoObtenido = await pool.query("call usp_paga_remesa (?)", [Params]);
          if(resultadoObtenido.length == 2){
            let r = resultadoObtenido[0];
            if(r[0].Code){
              if(r[0].Code=="OK"){
                /* Registramos en bitacora */
                fnBitacora.cod_empresa = parametros.usuario.IdEmpresaCliente;
                fnBitacora.cod_transmisor = parametros.remesa.cod_transmisor;
                fnBitacora.cod_corresponsal = parametros.remesa.cod_corresponsal;
                fnBitacora.cve_cobro = parametros.remesa.clave_cobro;
                fnBitacora.observaciones = 'PAGO DEL GIRO EN SUCURSAL '+ parametros.usuario.sucursal;
                fnBitacora.id_usuario = parametros.usuario.IdUser;
                fnBitacora.cod_empresa_usuario = parametros.usuario.IdEmpresa;
                await fnBitacora.Registra_MovimientoRemesa();
                  console.log("********* Respuesta de pago **************")
                  console.log(respuesta);
                  console.log("********* Respuesta de pago **************")
                return respuesta = {
                    code: "00",
                    message: r[0].Message,
                    order: r[0],
                    error: null,
                    proveedor: cod_proveedor,
                    bitacora_peticiones : bitacora_peticiones
                  }
              }else{
                
                /* Reversar operacion si es remesa online */
                let rs = await this.ejecuta_accion_proveedor(cod_proveedor,"ANULACION",respuesta,parametros,null);
                respuesta = {
                  code: "01",
                  message: r[0].Message + ":" + rs.message,
                  order: null,
                  error: null,
                  proveedor: cod_proveedor,
                  bitacora_peticiones : null
                }
                /* Reversar operacion en caja */
                if(aplicaCaja == 1){
                  rsc = await cajaInstance.anular_operacion_caja(request_confirmacion);
                }
                return respuesta;
              }
            }
          }
        } catch (error) {
            let rs = await this.ejecuta_accion_proveedor(cod_proveedor,"ANULACION",respuesta,parametros,null);
            if(aplicaCaja == 1){
                  rsc = await cajaInstance.anular_operacion_caja(request_confirmacion);
            }
            return respuesta = {
              code: "99",
              message: error,
              order: null,
              error: null,
              proveedor: null,
              bitacora_peticiones : null
            }
        }
  },
  guardarRemesaRecibida: async function (data, paramsGral) {
    let params = [
      (pcod_empresa = data.cod_empresa),
      (pcod_transmisor = data.cod_transmisor),
      (pcod_corresponsal = data.cod_corresponsal),
      (pcve_cobro = data.clave_cobro),
      (pfec_envio = data.fecha_envio.substring(0, 10)),
      (ppais_origen = data.pais_origen),
      (pdivisa_origen = data.nombre_divisa_origen),
      (pimporte_origen = data.importe_origen),
      (ptc = data.tipo_cambio),
      (ppais_destino = data.pais_destino),
      (pdivisa_destino = data.divisa_destino),
      (pimporte_destino = data.importe),
      (pcod_sucursal = paramsGral.cod_sucursal),
      (pstatus = "R"),
      (pstatus_confirmacion = ""),
      (pnombre_remitente = data.nombre_completo_remitente),
      (papaterno_remitente = ""),
      (pamaterno_remitente = ""),
      (ppais_domicilio_remitente = ""),
      (pestado_domicilio_remitente = ""),
      (pmunicipio_domicilio_remitente = ""),
      (pnombre_beneficiario = data.NombreCte),
      (papaterno_beneficiario = data.ApaternoCte),
      (pamaterno_beneficiario = ""),
      (pcod_sucursal_pago = paramsGral.cod_sucursal),
      (ptelefono = ""),
      (pnacionalidad = ""),
      (ppais_nacimiento = ""),
      (pestado_domicilio_beneficiario = ""),
      (pmunicipio_domicilio_beneficiario = ""),
      (pparentesco = null),
      (pdomicilio_calle = ""),
      (pcp = ""),
      (pColonia = ""),
      (pNo_ext = ""),
      (pNo_int = ""),
      (pfec_nac_beneficiario = null),
      (ppais_domicilio_beneficiario = ""),
      (pcp_beneficiario = ""),
      (ptipoid_beneficiario = null),
      (pnum_id_beneficiario = null),
      (pfec_expedicion_beneficiario = null),
      (pfec_vigencia_beneficiario = null),
      (panio_expedicion_beneficiario = null),
      (panio_vigencia_beneficiario = null),
      (pactividadeconomica = null),
      (ppropositoFondos = null),
      (pCodBeneficiarioAsociado = null),
      (pcuentaBeneficiario = null),
      (pCodtipoServicio = null),
      (pOrigenRecursos = null),
    ];
    var resp = await pool.query("call usp_inserta_remesa_in_externo (?)", [
      params,
    ]);
    return resp[0];
  },
  obtenerDetallesOrden: async function (remesaPago, paramsGral) {

    let r = remesaPago;
    let dondeOrder = {
      clave_cobro: paramsGral.cve_cobro,
      transmisor: r.transmisor,
      cod_transmisor: r.cod_transmisor,
      cod_corresponsal: r.cod_corresponsal,
      importe: r.importe_destino,
      importe_formato:
        fn.FormatCurrency("es-MX", "MXN", 2, r.importe_destino) + " MXN",
      nombre_remitente: r.nombre_remitente,
      nombre_completo_remitente:
        r.nombre_remitente +
        " " +
        r.apaterno_remitente +
        " " +
        r.amaterno_remitente,
      NombreCte: r.nombre_beneficiario,
      ApaternoCte: r.apaterno_beneficiario,
      AmaternoCte: r.amaterno_beneficiario,
      telefono_remitente: r.telefono_remitente,
      estado_origen: r.estado_origen,
      pais_origen: r.pais_origen,
      nombre_pais_origen: r.nombre_pais_origen,
      importe_formato_origen: fn.FormatCurrency(
        "es-MX",
        "MXN",
        2,
        r.importe_origen
      ),
      nombre_divisa_origen: r.nombre_divisa_origen,
      proveedor : "",
      importe_origen: r.importe_origen,
      divisa_origen: r.divisa_origen,
      tc: r.tc
    };
    /* Registramos en bitacora */
    fnBitacora.cod_empresa = paramsGral.IdEmpresaCliente;
    fnBitacora.cod_transmisor = r.cod_transmisor;
    fnBitacora.cod_corresponsal = r.cod_corresponsal;
    fnBitacora.cve_cobro = paramsGral.cve_cobro;
    fnBitacora.observaciones =
      "CONSULTA DE GIRO EN SUCURSAL " + paramsGral.cod_sucursal;
    fnBitacora.id_usuario = paramsGral.IdUser;
    fnBitacora.cod_empresa_usuario = paramsGral.IdEmpresa;
    await fnBitacora.Registra_MovimientoRemesa();

    return dondeOrder;
  },
  obtenProveedorRemesaPago: function (params) {
    // MG => siempre son 8 dígitos
    if (!isNaN(params.cve_cobro) && params.cve_cobro.toString().length == 8) {
      return "MG";
    }else if (!isNaN(params.cve_cobro) && params.cve_cobro.toString().length == 12 && (params.cve_cobro.startsWith("1") || params.cve_cobro.startsWith("2"))) {
      return "RE";
    }else{
      return "";
    }
  },
  ejecuta_accion_proveedor: async function (cod_proveedor, accion, respuesta, parametros, parametros_dos) {
    switch (cod_proveedor) {
      case "MG":
        if(accion=="CONSULTA"){respuesta = await objMG.Buscar_remesa(parametros, parametros_dos); }
        if(accion=="PAGO"){respuesta = await objMG.Pagar_remesa(parametros);}
        if(accion=="ANULACION"){
          let request_reversa_pago_remesa = { 
            cod_empresa: parametros.remesa.cod_empresa, 
            cve_cobro: params.remesa.clave_cobro, 
            prefijo_servicio: cod_proveedor, 
            cod_sucursal : parametros.usuario.cod_sucursal,
            importe_destino: parametros.remesa.importe_destino
          };
          respuesta = await objMG.reversaPago(request_reversa_pago_remesa);}
        break;
        case "RE":
        if(accion=="CONSULTA"){respuesta = await objRE.Buscar_remesa(parametros, parametros_dos); }
        if(accion=="PAGO"){respuesta = await objMG.Pagar_remesa(parametros);}
        if(accion=="ANULACION"){
          let request_reversa_pago_remesa = { 
            cod_empresa: parametros.remesa.cod_empresa, 
            cve_cobro: params.remesa.clave_cobro, 
            prefijo_servicio: cod_proveedor, 
            cod_sucursal : parametros.usuario.cod_sucursal,
            importe_destino: parametros.remesa.importe_destino
          };
          respuesta = await objMG.reversaPago(request_reversa_pago_remesa);}
        break;
      default:
        if(accion=="CONSULTA"){
          respuesta = {
            code: "01",
            message:
              "Orden no encontrada, favor de revisar si está escrita correctamente.",
            order: null,
            error: null,
            proveedor: null,
          };
        }
        break;
    }
    return respuesta;
  }
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Pay.Service.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Reverse.Service.js ---

const { cod_transmisor, cod_corresponsal } = require("../../bitacoras");
const objMG = require("./MoneyGram/MoneygramHandler");
const objbd = require("./bd");
const objcaja = require("../CajaService");
const handlerDAO = require('../../dao-caja');
const objRequest = require("../CajaRequest");

class ReverseService {
    request_reversa_pago_remesa = { cod_empresa: "", cve_cobro: "", cod_transmisor : "", cod_corresponsal : "", prefijo_servicio: "", no_ticket : "", motivo : "", observaciones : "", cod_usuario : "", cod_sucursal : "", nombre_usuario : "", importe_origen : "", transmisor : ""};
    usuario = {};
    constructor() {
    }
    
    createResponse(code, msg, data = null) {return { code, msg, data };}
    async consulta_reversa_pago_remesa(cod_empresa, cve_cobro) {
        try {
            //Consultamos el giro en BD
            const resultado = await objbd.consulta_remesa_despago(cod_empresa, cve_cobro);

            if (resultado[0].code == "99") {
                return this.createResponse(404, resultado[0].msg, null);
            }
            console.log(resultado[0]);
            return this.createResponse("00", "", resultado[0]);
            
        } catch (error) {
            console.error("Error en reversa_pago_remesa:", error);
            return this.createResponse(500, "Error interno del servidor", error.message);
        } 
    }
    async ejecuta_reversa_pago_remesa(params) {
        this.request_reversa_pago_remesa = { ...this.request_reversa_pago_remesa, ...params };
        let  resultado = null;
        let registro = [];
        let request_confirmacion= {};
        try {
            
            // ****** PASO 1 reversa de pago en caja ******
            const cajaInstance = new objcaja.CajaService(); 
            let aplicaCaja = await cajaInstance.validaSiaplicaCaja();
            if(aplicaCaja == 1){
                let request = {cod_empresa: this.request_reversa_pago_remesa.cod_empresa, cve_cobro: this.request_reversa_pago_remesa.cve_cobro}
                registro = await handlerDAO.consulta_movimiento_caja(request);
                
                request_confirmacion= {
                    cod_empresa : request.cod_empresa,
                    cod_sucursal:  parseInt(registro[0].cod_sucursal_externo) || 1,
                    operacion : parseInt(registro[0].operacion),
                    cve_cobro: request.cve_cobro,
                    folio : registro[0].folio
                }


                console.log(this.request_reversa_pago_remesa);
                console.log(registro);
                if(registro[0].paso !=2){
                    return this.createResponse(
                        "99",
                        "La operación no se encuentra pagada verificar registro en caja lakin",
                        null
                      );
                }
                let request_caja = objRequest.get_request_by_despago_caja(this.request_reversa_pago_remesa, registro[0], this.usuario);
                console.log(request_caja);
                let rsc = await cajaInstance.registrar_despago_caja(request_caja);
                console.log("registrar_despago_caja");
                console.log(rsc);
                if(rsc.code !="00"){
                    return this.createResponse(
                        rsc.code,
                        rsc.message,
                        null
                      );
                  }
            }
           

            // ****** FIN PASO 1 reversa de pago en caja ******

            switch (this.request_reversa_pago_remesa.prefijo_servicio) {
                case "MG":
                    console.log("reversa de pago MG");
                    // Aqui conecta con los servicios de MG para realizar la reversa
                    let despagoResponse = await objMG.reversaPago(
                      this.request_reversa_pago_remesa
                    );

                    if(despagoResponse.code != "00"){
                        // AQUI SE DEBE aplICar REVERSo
                        return this.createResponse(
                          404,
                          despagoResponse.message,
                          null
                        );
                    }
                    console.log("reversa de pago MG en BD");
                        // Si la respuesta es satisfactoria, la remesa debe de eliminarse de la tabla remesas_in, bitacoras, remesas_in_calificacion
                        resultado = await objbd.ejecuta_remesa_despago(this.request_reversa_pago_remesa);
                    console.log(resultado);
                    if (resultado[0].code == "99") {
                        // AQUI SE DEBE aplICar REVERSo
                        await cajaInstance.confirmar_operacion_caja(request_confirmacion);
                        return this.createResponse(404, resultado[0].msg, null);
                    }
                    console.log(resultado[0]);
                    return this.createResponse("00", "", resultado[0]);
                    
                    break;
                default:
                        resultado = await objbd.ejecuta_remesa_despago(this.request_reversa_pago_remesa);
                        console.log("ejecuta_remesa_despago");
                        console.log(resultado[0]);
                        if (resultado[0].code == "99") {
                            // AQUI SE DEBE aplICar REVERSo 
                            await cajaInstance.confirmar_operacion_caja(request_confirmacion);
                            return this.createResponse(404, resultado[0].msg, null);
                        }
                        console.log(resultado[0]);
                    return this.createResponse("00", resultado[0].msg, resultado[0]);
                    // Las ordenes son locales
                    break;
            } 
        } catch (error) {
            console.error("Error en reversa_pago_remesa:", error);
            return this.createResponse(500, "Error interno del servidor", error.message);
        } 
    }
}
module.exports = {ReverseService}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Reverse.Service.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Send.service.js ---

const { cod_transmisor } = require("../../bitacoras");
const objbd = require("./bd");
class SendService {
    constructor() {
    }
    
    createResponse(code, msg, data = null) {return { code, msg, data };}
    async cotizacion(param_cotizacion){
        let respuesta = {};
        main: {
            let rs_proveedor = objbd.obtenerCodProveedor({cod_empresa : param_cotizacion.cod_empresa, cod_transmisor: param_cotizacion.cod_transmisor}); 
            switch (rs_proveedor.cod_proveedor) {
                case "":
                    
                    break;
                case "MG":
                    break;
                default:
                    break;
            }
            
        }
        return respuesta;
    }

    async generar_remesa(params){
        let respuesta = {};
        main: {

        }
        return respuesta;
    }
}
module.exports = {SendService}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\proveedores\Send.service.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\aclist.js ---

const soap = require('soap');

class SoapProxy {
    constructor() {
        this.wsdlUrl = 'http://207.246.89.12/ACLLists/wsACLList.asmx?WSDL';
        this.client = null;
    }

    // Crear cliente SOAP
    async createClient() {
        return new Promise((resolve, reject) => {
            soap.createClient(this.wsdlUrl, (err, client) => {
                if (err) {
                    return reject(err);
                }
                this.client = client;
                resolve(client);
            });
        });
    }

    // Método para validar listas
    async validateACLLists(parametros) {
        if (!this.client) {
            await this.createClient();
        }
    
        const params = {
            IdCliente: 'acl',
            Usuario: parametros.usuario,
            Clave: parametros.password,
            HDDSN: '144F0F3D',
            Nombre: parametros.nombre,
            APPaterno: parametros.apellidoPaterno,
            APMaterno: parametros.apellidoMaterno
        };
    
        return new Promise((resolve, reject) => {
            this.client.ACLListsValidationList({ ACLListsValidationRequest: params }, (err, result) => {
                if (err) {
                    return reject(err);  // Si hay un error, rechazamos la promesa
                }
    
                let coincidencias = [];
    
                // Revisamos si la respuesta contiene coincidencias
                if (result.ACLListsValidationListResult.ACLListsValidationResponseList && Array.isArray(result.ACLListsValidationListResult.ACLListsValidationResponseList)) {
                    coincidencias = result.ACLListsValidationListResult.ACLListsValidationResponseList.map(item => {
                        return {
                            nRes: item.nRes,
                            sMensaje: item.sMensaje,
                            usuarioBusqueda: item.UsuarioBusqueda,
                            usuarioLista: item.UsuarioLista,
                            descripcion: item.Descripcion,
                            lista: item.Lista
                        };
                    });
                }else{
                    coincidencias = [{
                        nRes: "ER",  
                        sMensaje: "Error al consultar el servicio",
                        usuarioBusqueda: "",
                        usuarioLista: "",
                        descripcion: "",
                        lista: ""
                    }];
                }
    
                // Aquí resolvemos la promesa con el resultado
                resolve({
                    coincidencias
                });
            });
        });
    }
    
    /*
    async validateACLLists(parametros) {
        if (!this.client) {
            await this.createClient();
        }

        const params = {
            IdCliente: 'acl',
            Usuario: parametros.usuario,
            Clave: parametros.password,
            HDDSN: '144F0F3D',
            Nombre: parametros.nombre,
            APPaterno: parametros.apellidoPaterno,
            APMaterno: parametros.apellidoMaterno
        };

        return new Promise((resolve, reject) => {
            this.client.ACLListsValidation({ ACLListsValidationRequest: params }, (err, result) => {
                if (err) {
                    return reject(err);
                }
                const nRes = result.ACLListsValidationResult.nRes;
                const sMensaje = result.ACLListsValidationResult.sMensaje;
                let nombreCompleto = "";
                let resultadosLimpios = "";
                if(nRes=="1"){
                    const nombreRegex = /^USUARIO (.*?) REGISTRA COINCIDENCIAS EN LISTAS/;
                    const nombreMatch = sMensaje.match(nombreRegex);
                    nombreCompleto = nombreMatch ? nombreMatch[1].trim() : null;
                    const coincidencias = sMensaje.match(/\[.*?\]/g) || [];
                    // Limpiar los valores de los corchetes
                    resultadosLimpios = coincidencias.map(coincidencia => coincidencia.replace(/[\[\]]/g, ''));
                }
                resolve({ nRes, sMensaje, coincidencias: resultadosLimpios, nombreCompleto });
            });
        });
    }
    */    
}


module.exports = SoapProxy;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\aclist.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\api_notificaciones.js ---

const axios = require('axios');
const path = require("path");
const fnBitacora = require("../bitacoras");
const fnOE = require("../funciones-oe");
const catalogosBD = require("../catalogosBD");

let URLNotificiaciones = "http://157.245.4.138:8099"
//let URLNotificiaciones = "http://198.37.117.63:9003" //Pruebas
let response = {}
module.exports = {
    ReportPayment: async function(req, cod_transmisor, cod_corresponsal, cve_cobro, documento, tipo ){
        let respuesta = {
            code : "",
            mensaje : ""
        }
        let aplicaNotificacion = await this.AplicaNotificacion(req,cod_transmisor);
        if( parseInt(aplicaNotificacion) == 1){
            let MetodoInvocar = "/api/OrderExpress/ReportPayment"; 
            let result = {};
            let params = fnOE.ObtenEquivalenciasINE(cve_cobro, documento, tipo);
            
            await axios.post(URLNotificiaciones + MetodoInvocar, params).then(response => {
                respuesta.code= response.data.no;
                respuesta.mensaje = response.data.description;

                  /* Registramos en bitacora */
                  if(response.data.no =="0"){   
                   
                    fnBitacora.observaciones = 'PAGO NOTIFICADO AL TRANSMISOR';
                   
                  }else{
                    fnBitacora.observaciones = 'ERROR AL NOTIFICAR PAGO AL TRANSMISOR - ' + respuesta.mensaje;
                  }
                  fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
                  fnBitacora.cod_transmisor = cod_transmisor;
                  fnBitacora.cod_corresponsal = cod_corresponsal;
                  fnBitacora.cve_cobro = cve_cobro;
                  fnBitacora.id_usuario = req.user.IdUser;
                  fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
                  fnBitacora.Registra_MovimientoRemesa();
             /* Registramos en bitacora */

            }).catch(function (error) {
                if (error.response) {
                    respuesta.code = error.response.data.no;
                    if(error.response.data.no == 100081){
                        respuesta.mensaje = "ERROR - NOTIFICACION REALIZADA ANTERIORMENTE";    
                    }else{
                        respuesta.mensaje = "("+ error.response.status +") " + error.response.data.description;
                    }
                    console.log(error.response.status);
                    console.log(error.response.data.no);
                    /* Registramos en bitacora */
                    fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
                    fnBitacora.cod_transmisor = cod_transmisor;
                    fnBitacora.cod_corresponsal = cod_corresponsal;
                    fnBitacora.cve_cobro = cve_cobro;
                    fnBitacora.observaciones = "ERROR EN NOTIFICACION DE PAGO - " + respuesta.mensaje;
                    fnBitacora.id_usuario = req.user.IdUser;
                    fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
                    fnBitacora.Registra_MovimientoRemesa();
                    /* Registramos en bitacora */

                } else if (error.request) {
                
                  console.log(error.request);
                } else {
                 
                 console.log('Error', error.message);
                }
        
            });
          
                    fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
                    fnBitacora.cod_transmisor = cod_transmisor;
                    fnBitacora.cod_corresponsal = cod_corresponsal;
                    fnBitacora.cve_cobro = cve_cobro;
           //fnBitacora.registraParametrosNotificacion("Pago", params, respuesta);
            
         
        }else{
                respuesta.code= "99";
                respuesta.mensaje = "No aplica la notificación para esta orden";
            }   
        return respuesta;
    },
    
    CancelPaymemt: async function(req, cod_transmisor, cod_corresponsal, cve_cobro ){
        let respuesta = {
            code : "",
            mensaje : ""
        }
        let aplicaNotificacion = await this.AplicaNotificacion(req,cod_transmisor);
        
        if( parseInt(aplicaNotificacion) == 1){
            let MetodoInvocar = "/api/OrderExpress/CancelPayment"; 
            var wholePath = URLNotificiaciones + MetodoInvocar + "/" + String(cve_cobro);
                console.log(wholePath);
               
                await axios({
                    method: "PUT",
                    url: wholePath,
                    headers: {
                    "Content-Type": "application/json",
                    }
                }).then(response => {
                    respuesta.code= response.data.no;
                    respuesta.mensaje = response.data.description;
                       /* Registramos en bitacora */
                    if(response.data.no =="0"){   
                    
                        fnBitacora.observaciones = 'CANCELACION NOTIFICADA AL TRANSMISOR';
                    
                    }else{
                        fnBitacora.observaciones = 'ERROR AL NOTIFICAR CANCELACION AL TRANSMISOR - ' + respuesta.mensaje;
                    }
                    fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
                    fnBitacora.cod_transmisor = cod_transmisor;
                    fnBitacora.cod_corresponsal = cod_corresponsal;
                    fnBitacora.cve_cobro = cve_cobro;
                    fnBitacora.id_usuario = req.user.IdUser;
                    fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
                    fnBitacora.Registra_MovimientoRemesa();
                /* Registramos en bitacora */
                }).catch(function (error) {
                    if (error.response) {
                        respuesta.code = error.response.data.no;
                        respuesta.mensaje = "("+ error.response.status +") " + error.response.data.description;

                          /* Registramos en bitacora */
                        fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
                        fnBitacora.cod_transmisor = cod_transmisor;
                        fnBitacora.cod_corresponsal = cod_corresponsal;
                        fnBitacora.cve_cobro = cve_cobro;
                        fnBitacora.observaciones = "ERROR EN NOTIFICACION DE CANCELACION - " + respuesta.mensaje;
                        fnBitacora.id_usuario = req.user.IdUser;
                        fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
                        fnBitacora.Registra_MovimientoRemesa();
                        /* Registramos en bitacora */


                    // The request was made and the server responded with a status code
                    // that falls out of the range of 2xx
                    //console.log(error.response.data);
                //   console.log(error.response.status);
                    //  console.log(error.response.headers);
                    } else if (error.request) {
                    // The request was made but no response was received
                    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
                    // http.ClientRequest in node.js
                    console.log(error.request);
                    } else {
                    // Something happened in setting up the request that triggered an Error
                    console.log('Error', error.message);
                    }
                //  console.log(error.config);
                    
                });
            // console.log(respuesta);

              
           
                /* Registramos en bitacora */
        }else{
            respuesta.code= "99";
            respuesta.mensaje = "No aplica la notificación para esta orden";
        }    
            console.log(respuesta);
            return respuesta;
        
    },
    SolicitarDevolucion: async function(req, cve_cobro ){
        let MetodoInvocar = "/api/OrderExpress/SolicitarDevolucion"; 
        let result = {}
        try 
        {
            let response = await axios.put(URLNotificiaciones + MetodoInvocar + "/" + cve_cobro);
            result = response.data;
        } 
        catch (err) 
        {
            
        }
        return result;
    },
    AplicaNotificacion: async function(req, cod_transmisor){
       let resultado = await catalogosBD.Cat_parametros_transmisor(req, cod_transmisor);
       return resultado[0].notifica_status;
    }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\api_notificaciones.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\CajaRequest.js ---

const { DateTime } = require("luxon");
const { ObtenEquivalenciasINE } = require("../funciones-oe");
const { id_usuario } = require("../bitacoras");

module.exports = {
    get_request_by_registro_caja: function(rq, tipo_mov){
        const fechaMexico = DateTime.now()
        .setZone("America/Mexico_City")
        .toFormat("yyyy-MM-dd HH:mm:ss");
        const currentYear = DateTime.now().year;
        let vencimiento = rq.identificacion.identificacion == 1
        ? rq.identificacion.AnioExpiracion
        : rq.identificacion.fechaExpiracionC;

        let identificacionFechaVencimiento = vencimiento
        ? String(vencimiento).slice(0, 4)
        : String(currentYear + 5);

        let expedicion = rq.identificacion.fechaExpedicionC;

        // Si está vacío o undefined, usamos fecha actual - 5 años
        let identificacionFechaExpedicion = expedicion && expedicion.trim() !== ""
        ? expedicion
        : DateTime.now().minus({ years: 5 }).toFormat("yyyy-MM-dd");

        let request = {
            cod_empresa: rq.usuario.IdEmpresaCliente,
            cod_sucursal:  parseInt(rq.usuario.cod_sucursal_externo) || 1,
            usuario: rq.usuario.usuario.replace(/@.*/, ''),
            codigo_rastreo: rq.remesa.clave_cobro,
            tipo_movimiento: tipo_mov,
            transmisor: rq.remesa.transmisor.replace(/[^\wÀ-ÿñÑ ']/g, ''),
            id_usuario: 0, // Se asigna posteriormente
            fecha_registro: fechaMexico, //"2025-04-29 01:13:02",
            cve_cobro: rq.remesa.clave_cobro,
            divisa_origen: rq.remesa.divisa_origen,
            divisa_destino: "MXN",
            tipoCambio: parseFloat(rq.remesa.tc), 
            importeEnviado: parseFloat(rq.remesa.importe_origen), 
            comision: 0, 
            montoPago: parseFloat(rq.remesa.importe), 
            paisOrigen: rq.remesa.pais_origen, 
            paisDestino: "MEX",
            nombres: rq.remesa.NombreCte, //str 100
            apPaterno: rq.remesa.ApaternoCte, //str 100
            apMaterno: rq.remesa.AmaternoCte, //str 100
            paisNacimiento: rq.data.paisNacimiento, //str 100
            estadoNacimiento: "", //str 100
            nacionalidad: rq.data.nacionalidad, //str 100
            fechaNacimiento: rq.data.fecha_Nacimiento, //str 10 yyyy-mm-dd
            genero: rq.data.genero, //str 50 "M" "F"
            tipoIdentificacion: rq.identificacion.identificacion, //str 100
            numIdentificacion: rq.identificacion.NumeroIdentificacion, //str 13
            identificacionFechaVencimiento: identificacionFechaVencimiento,
            identificacionFechaExpedicion: identificacionFechaExpedicion, //str 10 --> yyyy-mm-dd
            identificacionPaisEmision: rq.identificacion.paisEmision, //str 100
          };
          console.log("request para registro en caja");
          console.log(request);
          return request;
    },
    get_request_by_confirmacion_caja: function(rq, rs){
        let request = {
            cod_empresa : rq.usuario.IdEmpresaCliente,
            cod_sucursal:  parseInt(rq.usuario.cod_sucursal_externo) || 1,
            operacion : parseInt(rs.operacion),
            cve_cobro: rq.remesa.clave_cobro,
            folio : rs.folio,
            usuario: rq.usuario.usuario || "",
            id_usuario: 0
          }

          console.log("request para confirmacion en caja");
          console.log(request);
        return request;  
    },
    get_request_by_despago_caja(rq, rc, rsu){
        const fechaMexico = DateTime.now()
        .setZone("America/Mexico_City")
        .toFormat("yyyy-MM-dd HH:mm:ss");
        let request = {
            cod_empresa: rq.cod_empresa,
            folio : rc.folio,
            codigo_rastreo: rq.cve_cobro,
            transmisor: rq.transmisor.replace(/[^\wÀ-ÿñÑ ']/g, ''),
            id_usuario: 0,
            usuario: rsu.usuario.replace(/@.*/, ''),
            cod_sucursal: parseInt(rc.cod_sucursal_externo) || 1,
            fecha_registro: fechaMexico,
            operacion : parseInt(rc.operacion),
            cve_cobro: rq.cve_cobro,
            montoPago: parseFloat(rq.importe_destino), 
          }
          return request;
    },
    get_request_by_cancelacion_caja(rq, rc, rsu){
        const fechaMexico = DateTime.now()
        .setZone("America/Mexico_City")
        .toFormat("yyyy-MM-dd HH:mm:ss");
        let request = {
            cod_empresa: rq.cod_empresa,
            folio : rc.folio,
            codigo_rastreo: rq.cve_cobro,
            transmisor: rq.transmisor.replace(/[^\wÀ-ÿñÑ ']/g, ''),
            id_usuario: 0,
            usuario: rsu.usuario.replace(/@.*/, ''),
            cod_sucursal: parseInt(rc.cod_sucursal_externo) || 1,
            fecha_registro: fechaMexico,
            operacion : parseInt(rc.operacion),
            cve_cobro: rq.cve_cobro,
            montoPago: parseFloat(rq.importe_destino), 
          }
          return request;
    }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\CajaRequest.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\CajaService.js ---


const axios = require('axios');
const handlerDAO = require('../dao-caja');
const handlerCAT = require('../catalogosBD');
const { id_usuario } = require('../bitacoras');
class CajaService {
     id_usuario_caja;
     constructor() {
        this.apiUrl = process.env.PROVEEDORES_CAJA_BASE;
        this.path_token = "v1/remesas/login/remesas/oauth2/token";
        this.path_Folio = "remesas/v1/folio/generar";
        this.path_generacion = "remesas/v1/orq/operaciones/generacion";
        this.path_despago = "remesas/v1/orq/operaciones/despago";
        this.path_confirmacion = "remesas/v1/confirma/operacion";
        this.path_cancelacion= "remesas/v1/orq/operaciones/cancelacion";

        /* Parametros para headers de peticiones */
        this.nombre_aplicativo = "Remesas";
        this.identificador_usuario = "Front Remesas";
        
        this.origen = "IT";

        /* Parametros para conexion para obtener token */
        this.token = "";
        this.client_id = process.env.CLIENT_ID_CAJA;
        this.client_secret = process.env.CLIENT_SECRET_CAJA;
        this.provision_key = process.env.PROVISION_KEY_CAJA;
        this.grant_type = process.env.GRANT_TYPE_CAJA;
        this.authenticated_userid = process.env.AUTHENTICATED_USERID_CAJA;
        this.scope = process.env.SCOPE_CAJA;

      

    }
    getHeaders() {
        return {
            Authorization: `Bearer ${this.token}`,
            nombre_aplicativo: this.nombre_aplicativo,
            identificador_usuario: this.identificador_usuario
        };
    }
    handleApiResponse(response) {
        const data = response.data;
        if (data.codigo === "000") {
            return this.createResponse("00", "", data);
        } else {
            console.log(data);
            return this.createResponse("99", "", data);
        }
    }
    handleApiError(method, path, error) {
        console.error(`Error en ${method} ${path}:`, error);
        return this.createResponse(500, `CAJA - Error interno en ${method} ${path}:`, error.message);
    }
    createResponse(code, message, data) {
        return {
            code,
            message,
            data
        };
    }
    async axiosGet(path, params = {}) {
        try {
            const response = await axios.get(this.apiUrl + path, {
                params,
                headers: this.getHeaders(),
                timeout: 20000  // tiempo máximo en milisegundos (10 segundos)
            });
            return this.handleApiResponse(response);
        } catch (error) {
            console.log(error);
            if (error.code === 'ECONNABORTED') {
                // Timeout alcanzado
                return {
                    code: 'TIMEOUT',
                    message: 'CAJA - La solicitud tardó demasiado y fue cancelada.',
                    data: null
                };
            }else{
                if (error.response && (error.response.status === 400 || error.response.status === 500 )) {
                    // Retorna directamente el mensaje de error del body
                    return this.createResponse(error.response.data.codigo, "CAJA - " + error.response.data?.mensaje || "Error desconocido", error.response.data);
                /* return {
                        success: false,
                        message: error.response.data?.mensaje || "Error desconocido",
                        error: error.response.data
                    };*/
                }
                return this.handleApiError("GET", path, error);
            }
        }
    }
    async axiosPost(path, body = {}) {
        try {
            const response = await axios.post(this.apiUrl + path, body, {
                headers: this.getHeaders(),
                timeout: 20000  // tiempo máximo en milisegundos (10 segundos)
            });
            return this.handleApiResponse(response);
        } catch (error) {
            if (error.code === 'ECONNABORTED') {
                // Timeout alcanzado
                return {
                    code: 'TIMEOUT',
                    message: 'CAJA - La solicitud tardó demasiado y fue cancelada.',
                    data: null
                };
            }else{
                if (error.response && error.response.status === 400) {
                    // Retorna directamente el mensaje de error del body
                    return {
                        code: error.response.data.codigo,
                        message: "CAJA - " +  error.response.data?.mensaje || "Error desconocido",
                        data: error.response.data.errores
                    };
                }
                return this.handleApiError("POST", path, error);
            }
            
        }
    }
    async getToken() {
        let params = {
            client_id: this.client_id,
            client_secret: this.client_secret,
            provision_key: this.provision_key,
            grant_type: this.grant_type,
            authenticated_userid: this.authenticated_userid,
            scope: this.scope
        }
        console.log(params);
        try {
            const response = await axios.post(this.apiUrl + this.path_token, params,{
                timeout: 10000 // Aborta la solicitud si tarda más de 10 segundos
            }); 
            let data = response.data // Devuelve la respuesta de la API
            if(data.access_token==undefined){
                return this.createResponse(500, "CAJA - Error interno del servidor al obtener token", data.error_description);
            }
            this.token = data.access_token;
            return this.createResponse("00", "",null);
        } catch (error) {
            let mensaje = "CAJA - Error interno del servidor al obtener token: ";

            if (error.code === 'ECONNABORTED') {
                mensaje += "la solicitud se canceló por timeout.";
            } else {
                mensaje += error.message;
            }

            console.error("Error al obtener el token", error);

            return this.createResponse(500, mensaje, null);
        } 
    }
    async registrar_operacion_caja(request) {
        main :{
            try {
               
                //Verificamos si el registro de caja ya existe en BD
                let registro = await handlerDAO.consulta_movimiento_caja(request);
                let rg = registro[0];
                switch (rg.paso) {
                    case 1:
                        let data = {
                              folio: rg.folio,
                              operacion: rg.operacion,
                              mtcn: request.cve_cobro,
                              mensaje: 'La operacion fue correctamente cargada en caja'
                        };
                        this.id_usuario_caja = rg.id_usuario;
                        return this.createResponse("00", "", data);
                        break;
                    case 2:
                        return this.createResponse("99", "La remesa ya se encuentra procesada en Lakin", null);
                        break;
                }

                // Obtenemnos el Token para consultar los endpoints
                var rt = await this.getToken();
                if (rt.code != "00"){ return rt;}
                // Generamos Folio
                var rs = await this.generar_folio(request);
                if (rs.code != "00"){
                    return this.createResponse(rs.code, rs.message,  rs.data.length > 0 ? rs.data.join("\n") : "No hay errores.");  
                }
                var Folio = rs.data.resultado[0].Folio;
                let rq  = {
                    Folio : Folio,
                    idUsuario : rs.data.resultado[0].IdUsuario,
                    request : request
                }
                console.log(rq);
                // Registramos operacion
                var rs_oper = await this.registrar_operacion(rq);
                console.log("---- REGISTRO DE OPERACION ---");
                console.log("response");
                console.log(rs_oper);
                console.log("---- REGISTRO DE OPERACION ---");
                if (rs_oper.code != "00"){
                    return this.createResponse(rs_oper.code, rs_oper.message,  "");      
                }
                this.id_usuario_caja = rs.data.resultado[0].IdUsuario;
                await handlerDAO.registra_movimiento_caja(request, rs_oper.data.resultado, rq.idUsuario );
                return this.createResponse("00", rs_oper.data.resultado.mensaje, rs_oper.data.resultado);
            } catch (error) {
                console.error("Error al registrar en caja:", error);
                return this.createResponse(500, "Error interno del servidor", error.message);
            }
        } 
         
    }
    async confirmar_operacion_caja(request) {
       
        await this.getToken();
        let params = {
            idSucursal: request.cod_sucursal,
            username: request.usuario,
            operacion: request.operacion,
            tipoMov: 0, //0 para confirmar y 1 para abortar
            mtcn: request.cve_cobro,
            folio: request.folio
        }
        let rs = await this.axiosPost(this.path_confirmacion,params);
        console.log("---- confirmar_operacion_caja ---");
        console.log("request");
        console.log(params);
        console.log("response");
        console.log(rs);
        console.log("----fin confirmar_operacion_caja ---");
        if(rs.code=="00"){
            request.id_usuario = rs.data?.resultado?.idUsuario || 0;
            await handlerDAO.confirma_movimiento_caja(request);
        }
        return rs;
    }
    async anular_operacion_caja(request) {
        
        await this.getToken();
        let params = {
            idSucursal: request.cod_sucursal,
            username: request.usuario,
            operacion: request.operacion,
            tipoMov: 1, //0 para confirmar y 1 para abortar
            mtcn: request.cve_cobro,
            folio: request.folio
            
        }
        let rs = await this.axiosPost(this.path_confirmacion,params);
        console.log("---- anular_operacion_caja ---");
        console.log("request");
        console.log(params);
        console.log("response");
        console.log(rs);
        console.log("----fin anular_operacion_caja ---");
        if(rs.code=="00"){
            request.id_usuario = rs.data?.resultado?.idUsuario || 0;
            await handlerDAO.desconfirma_movimiento_caja(request);
        }
        
        return rs;
    }
    async registrar_despago_caja(request) {
        
        let rt = await this.getToken();
        if (rt.code != "00"){ return rt;}
        let params = {
            cod_sucursal : request.cod_sucursal,
            usuario : request.usuario
        }
        var rs = await this.generar_folio(params);
        if (rs.code != "00"){
            return this.createResponse(rs.code, rs.message,  "");  
        }
        request.id_usuario = rs.data.resultado[0].IdUsuario;
        let rq = this.getResquestJsonDespago(request);
        console.log("request despago");
        console.log (rq);
        let result = await this.axiosPost(this.path_despago,rq);

        if(result.code=="00"){
           
            await handlerDAO.registra_despago_caja(request);
        }
        return result;
    }
    async registrar_cancelacion_caja(request) {
        let rt = await this.getToken();
        if (rt.code != "00"){ return rt;}
        let params = {
            cod_sucursal : request.cod_sucursal,
            usuario : request.usuario
        }
        var rs = await this.generar_folio(params);
        if (rs.code != "00"){
            return this.createResponse(rs.code, rs.message,  "");  
        }
        request.id_usuario = rs.data.resultado[0].IdUsuario;
        let rq = this.getResquestJsonCancelacion(request);
        let result = await this.axiosPost(this.path_cancelacion,rq);

        if(result.code=="00"){
            await handlerDAO.registra_cancelacion_caja(request);
        }
        return result;
    }
    async generar_folio(request) {
        let params = {
            origen : this.origen,
            sucursal : request.cod_sucursal,
            usuario :  request.usuario
        }
        return await this.axiosGet(this.path_Folio, params);
    }  
    async registrar_operacion(request) {
        let rq = this.getResquestJson(request);
        console.log(rq);
        return await this.axiosPost(this.path_generacion,rq);
    }
    getResquestJson(request){
        return  {
                    folio: request.Folio,
                    claveRemesa: request.request.codigo_rastreo, // Codigo rastreo
                    tipoMovimiento: request.request.tipo_movimiento, // "PAG"  -- Pendiente tipo movimiento despago y cancelacion     
                    transmisorRemesador: request.request.transmisor,
                    idUsuario: request.idUsuario,
                    nombreUsuario: request.request.usuario,
                    idSucursal: request.request.cod_sucursal,
                    fechaAlta: request.request.fecha_registro, //str 19 yyyy-mm-dd hh:mm:ss
                    datosRemesa: {
                        mtcn: request.request.cve_cobro, //string 100 REmesador
                        divisaEnviada:  request.request.divisa_origen, //str 50 --> "USD"/"JPY"...
                        divisaRecibida:  request.request.divisa_destino, //str 50 --> "USD"/"JPY"...
                        tipoCambio: request.request.tipoCambio,
                        importeEnviado: request.request.importeEnviado,
                        comision: request.request.comision,
                        montoPago: request.request.montoPago,
                        paisOrigen: request.request.paisOrigen,
                        paisDestino: request.request.paisDestino,
                    },
                    datosCliente: {
                        nombres: request.request.nombres,
                        apPaterno: request.request.apPaterno,
                        apMaterno: request.request.apMaterno,
                        paisNacimiento: request.request.paisNacimiento,
                        estadoNacimiento: request.request.estadoNacimiento,
                        nacionalidad: request.request.nacionalidad,
                        fechaNacimiento: request.request.fechaNacimiento,
                        genero: request.request.genero,
                        identificacion: {
                            tipoIdentificacion: request.request.tipoIdentificacion,
                            numIdentificacion: request.request.numIdentificacion,
                            identificacionFechaVencimiento: request.request.identificacionFechaVencimiento,
                            identificacionFechaExpedicion: request.request.identificacionFechaExpedicion,
                            identificacionPaisEmision: request.request.identificacionPaisEmision,
                        }
                    }
                }
    }
    getResquestJsonDespago(request){
        return {
            folio: request.folio,
            claveRemesa: request.codigo_rastreo, // Codigo rastreo
            transmisorRemesador:  request.transmisor,
            idUsuario: request.id_usuario,
            nombreUsuario: request.usuario,
            idSucursal: request.cod_sucursal,
            fechaAnulacion: request.fecha_registro, 
            mtcn: request.cve_cobro,
            operacion:request.operacion,
            monto: request.montoPago
        }
    }
    getResquestJsonCancelacion(request){
        return {
            folio: request.folio,
            claveRemesa: request.codigo_rastreo, // Codigo rastreo
            transmisorRemesador:  request.transmisor,
            idUsuario: request.id_usuario,
            nombreUsuario: request.usuario,
            idSucursal: request.cod_sucursal,
            fechaAnulacion: request.fecha_registro, 
            mtcn: request.cve_cobro,
            operacion:request.operacion,
            monto: request.montoPago
        }
    }
    async validaSiaplicaCaja(){
        if(process.env.CAJA_ACTIVA){return process.env.CAJA_ACTIVA}
        let rsp = await handlerCAT.Get_parametro_by_empresa(process.env.EMPRESA_CODE, "activaCaja");
        return parseInt(rsp[0].valor);
    }
}
module.exports = {CajaService}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\CajaService.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\fimpe.js ---

const axios = require('axios');
const { urlencoded } = require('express');
const { param } = require('../../routes/perfiles');
const { containeranalysis_v1alpha1 } = require('googleapis');
class HandlerFimpe {
    constructor (cod_empresa) {
        this.__cod_empresa = cod_empresa
        var p_apiKey = "224d4652-f7db-4eff-82a5-5b6930a064f2";

        this.__axios_token = "https://compliance-itech.com/itechServices/api/v1/services/auth";
        this.__credentials = {
            "api_key" : p_apiKey,
            "cod_empresa" : this.__cod_empresa
        };
        this.__errorMessages = ['La contraseña no es válida.', 'El Usuario no existe']
    }
    async consultaCURP (params) {
        let tk = "";
        let bsURL = "https://compliance-itech.com/itechServices/api/IdentityPerson/curp?version=1.0";
        let paramEnvios = {};
        
        let resultToken = await axios.post(this.__axios_token,this.__credentials);
        console.log("resultToken.data");
        console.log(resultToken.data);
        if(resultToken.data.codigo=="00"){
            tk = resultToken.data.token;
            if(tk!=undefined){   
                if(params.tipo == 1){
                    paramEnvios = {
                        cod_empresa : this.__cod_empresa,
                        curp : params.curp.toUpperCase(),
                        tipoValidacion : 1
                    }
                }
                if(params.tipo == 2){
                    paramEnvios = {
                        cod_empresa : this.__cod_empresa,
                        tipoValidacion:2,
                        nombre: params.nombre.toUpperCase(),
                        apellidoPaterno: params.apaterno.toUpperCase(),
                        apellidoMaterno: params.amaterno.toUpperCase(),
                        sexo : params.genero,
                        fechaNacimiento: params.fecnacimiento.toUpperCase(),
                        entidadNacimiento : params.entidad
                    }
                    console.log(paramEnvios);
                }
                // Configuramos headers con el token
                let config={
                    headers: {
                        Authorization: tk 
                    },
                    validateStatus: false        
                };             
                
                const resultados = await axios.post(bsURL,paramEnvios, config);
                console.log("resultados");
                console.log(resultados.data);
                return {
                    code: resultados.data.code,
                    msg : resultados.data.message,
                    result: resultados.data.data
                }
            }else{
                return {
                    code: "99",
                    msg : "Error al obtener el token",
                    result:[]
                }
            }
        }else{
            return {
                code: resultToken.codigo,
                msg : resultToken.message,
                result:[]
            }
        }
    }

    async ValidaINE (params) {
        let tk = "";
        let bsURL = "https://compliance-itech.com/itechServices/api/IdentityPerson/ine?version=1.0";
        let paramEnvios = {};
        
        let resultToken = await axios.post(this.__axios_token,this.__credentials);
        if(resultToken.data.codigo=="00"){
            tk = resultToken.data.token;
            if(tk!=undefined){   
                paramEnvios = {
                    cod_empresa : this.__cod_empresa,
                    cic : params.cic.toUpperCase(),
                    identificadorCiudadano : params.identificador.toUpperCase(),
                    ocr: params.ocr.toUpperCase(),
                    claveElector: params.claveElector.toUpperCase(),
                    numeroEmision: params.emision.toUpperCase()
                }

                
                if(params.ocr==""){ delete paramEnvios.ocr }
                if(params.claveElector==""){ delete paramEnvios.claveElector }
                if(params.emision==""){ delete paramEnvios.numeroEmision }

                console.log(paramEnvios);
                let config={
                    headers: {
                        Authorization: tk 
                    },
                    validateStatus: false        
                };             
                
                const resultados = await axios.post(bsURL,paramEnvios, config);
                console.log("resultados");
                console.log(resultados.data);
                return {
                    code: resultados.data.code,
                    msg : resultados.data.message,
                    result: resultados.data.data
                }
            }else{
                return {
                    code: "99",
                    msg : "Error al obtener el token",
                    result:[]
                }
            }
        }else{
            return {
                code: resultToken.codigo,
                msg : resultToken.message,
                result:[]
            }
        }
    }
}
module.exports = {HandlerFimpe}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\fimpe.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\Listas.js ---

const fetch = require("node-fetch");
const pool = require("../../database");
const axios = require("axios");
const fn = require('../../lib/catalogosFunctions');
const spreadLt = require('../../lib/Apis/sipread');
const aclistLt = require('../../lib/Apis/aclist');
const { HandlerQesQDirect } = require('../../lib/Apis/qesq');

const parseString = require('xml2js').parseString;

module.exports = {
    param_cod_empresa : "",
    imagen_proveedor : "",
    descripcion_proveedor : "",
    resultadoSinCoincidencias: function(){
        let resultadoObtenido = {
            code: "00",
            msg: "No se encontraron coincidencias en listas negras",
            data: {
                num_registros: 0,
                datos: []
            }
        };
        return resultadoObtenido;
    },
    validaListasNegras: async function (oPersona, cod_empresa, cod_beneficiario) {
        param_cod_empresa = cod_empresa; 
        let userLN;
        let pwdLN;
        let param_adicional;
        
        let resultadoObtenido = {
            code: "00",
            msg: "",
            data: {
                num_registros: 0,
                datos: []
            }
        };

        let proveedor = await pool.query("call usp_obtener_credenciales_listasNegras(?)", [cod_empresa]);
        
        if(proveedor.length==0){
            return resultadoObtenido = {
                code: "99",
                msg: "No hay credenciales configuradas para listas negras.",
                data: {
                    num_registros: 0,
                    datos: []
                }
            };
        }
        if ((proveedor[0][0]?.code??'99') == "99") {
            return resultadoObtenido = {
                code: "99",
                msg: "No hay credenciales configuradas para listas negras.",
                data: {
                    num_registros: 0,
                    datos: []
                }
            };

        }
        userLN = proveedor[0][0].var1;
        pwdLN = proveedor[0][0].var2;
        param_adicional = proveedor[0][0].param_adicional_1;
        this.imagen_proveedor = proveedor[0][0].imagen;
        this.descripcion_proveedor = proveedor[0][0].descripcion;

        switch (proveedor[0][0].proveedor) {
            case 1:
                if(oPersona.busqueda == "MANUAL"){
                    if (oPersona.rfc == '') {
                        if(oPersona.fechanacimientoyyyyMMdd!=''){
                        oPersona.rfc = fn.obtenRFC(oPersona.nombre, oPersona.apaterno, oPersona.amaterno, oPersona.fechanacimientoyyyyMMdd);
                        }
                    }
                    
                    if(oPersona.curp!=""){
                        if(oPersona.rfc!=""){
                            oPersona.rfc = oPersona.rfc + "|" + oPersona.curp;
                        } else{
                            oPersona.rfc = oPersona.curp;
                        }
                    }

                    if(oPersona.tipo_persona=="PM"){
                        oPersona.amaterno = "";
                        oPersona.nombre="";
                    }
                }

                resultadoObtenido = this.buscaPrevencionLavado(oPersona.tipo_persona, oPersona.nombre, oPersona.apaterno, oPersona.amaterno, oPersona.rfc, oPersona.nombrePM, userLN, pwdLN, oPersona.busqueda);
                console.log(resultadoObtenido);
                break;
            
            case 3:
                resultadoObtenido = this.buscarTDMQeQ(oPersona, userLN, pwdLN);    
                break;
            case 6:
                resultadoObtenido = this.spread(oPersona, userLN, pwdLN);    
                break;
            case 7:
                    resultadoObtenido = this.aclist(oPersona, userLN, pwdLN);    
                    break; 
            case 8:
                    resultadoObtenido = this.qeqDirecto(oPersona, pwdLN,param_adicional,userLN  )
                    break;           
            default:
                break;
        }
        
        return resultadoObtenido;
    },
    buscaPrevencionLavado: async function (tipoPersona, nombres, apaterno, amaterno, rfc, nombrePM, user, pass, tipoBusqueda) {
        let coincidencias = [];
        let URLtoken = 'https://mbalistas.prevenciondelavado.com/Login';
        let URLSearch = 'https://mbalistas.prevenciondelavado.com/listas';

        let resultadoObtenido = {
            code: "00",
            msg: "",
            data: {
                num_registros: 0,
                datos: []
            }
        };
        let result=[];
        let apellidos = "";
        if(tipoPersona == "PM"){
            apellidos = nombrePM;
        }else{
            apellidos = apaterno + " " + amaterno;
        }
    
        let params = {
            "apellido" : apellidos,
            "nombre" : nombres,
            "identificacion" : rfc,
            "pepsOtrosPaises" : "S",    
            "satXDenominacion" : "S",
            "documentosSimilares" : "S"
        };

        console.log("parametros de busqueda:");
        console.log(params);

        const bodyRequest = {
        usuario: user,
        clave: pass
        };

        const configToken = {
            validateStatus: false
        };

        console.log(bodyRequest);

        try {

        console.log("token obtenido:");
        const resultToken = await axios.post(URLtoken,bodyRequest, configToken);
        let token = resultToken.data.token;
        console.log(resultToken.data.token);
        if(!token){
            console.log("error al obtener token")
            console.log(resultToken);
            resultadoObtenido.code = "99";
            resultadoObtenido.msg = resultToken.data.Message;
            return resultadoObtenido;
        }

        
        // Configuramos headers con el token
        let config={
            headers: {
                Authorization: `Bearer ${token}` 
            },
            validateStatus: false        
        };             


            console.log('params:',params);
            //const response = await axios.post("https://www.prevenciondelavado.com/listas/api/busqueda", params);
            const response = await axios.post(URLSearch, params, config);
            result = response.data;
            console.log('result',result);
        } catch (err) {
            console.log("Error LN-PL E: [%s]", err);
            resultadoObtenido.code = "99";
            resultadoObtenido.msg = err;
        }

        if(result === undefined){
            result = [];
        }

        if (result.Status == 'OK') {
            // Sin coincidencias
            resultadoObtenido = {
                code: "00",
                msg: result.Message,
                data: {
                    num_registros: 0,
                    datos: []
                }
            }
        } else {
            if(tipoBusqueda!="MANUAL"){
                result =  fn.filtraArrayPorElemento(result.resultados, "exactitudDenominacion","ALTO (5 sobre 5)");
            }else{
                result = result.resultados;
            }

            if(result.length==0){
                resultadoObtenido = {
                    code: "00",
                    msg: "No se encontraron coincidencias en listas negras",
                    data: {
                        num_registros: 0,
                        datos: []
                    }
                }
            }else{
                result.forEach(element => {
                    let fecha = "";
                    let finalizacion = "";
                    if (element.fechaNacimiento != undefined) {
                        fecha = element.fechaNacimiento;
                    }
                    if (element.finalizacionCargo != undefined) {
                        finalizacion = element.finalizacionCargo;
                    }

                    paramsCumplimiento = {
                        imagen : this.imagen_proveedor,
                        descripcion_proveedor: this.descripcion_proveedor,
                        id_movimiento : 0,
                        cod_empresa: this.param_cod_empresa,
                        Denominacion: element.denominacion,
                        Identificacion: element.ddentificacion,
                        Id_Tributaria: element.idTributaria,
                        Otra_Identificacion: element.otraIdentificacion,
                        Fecha_nacimiento: fecha,
                        Cargo: element.cargo,
                        Lugar_Trabajo: element.lugarTrabajo,
                        Direccion: element.direccion,
                        Enlace: element.enlace,
                        Tipo: element.tipo,
                        Sub_Tipo: element.subTipo,
                        Estado: element.estado,
                        Finalizacion_cargo: finalizacion,
                        Lista: element.lista,
                        Pais_Lista: element.paisLista,
                        Cod_Individuo: element.codigoIndividuo,
                        Exactitud_Denominacion: element.exactitudDenominacion,
                        Exactitud_Identificacion: element.exactitudIdentificacion,
                        id_usuario: 0,
                        cod_empresa_usuario: this.param_cod_empresa,
                        tipo_movimiento: 'P',
                        idRel : '',
                        genero : '',
                        parentesco : ''
                    };
                    coincidencias.push(paramsCumplimiento);
                });

                // Hay coincidencias
                resultadoObtenido = {
                    code: "01",
                    msg: "Coincidencias en Listas Negras",
                    data: {
                        num_registros: result.length,
                        datos: coincidencias
                    }
                };

            }
        }
        
        return resultadoObtenido;
    },
    buscaQeQ: async function (nombreCliente, paternoCliente, maternoCliente, rfc, user, pass, cve_cobro, cod_empresa, idMovimiento, paramsBloquear) {

        let nombre_validar = nombreCliente;
        let apellidop_validar = paternoCliente;
        let apellidom_validar = maternoCliente;

        let resultadoObtenido = {
            code: "00",
            msg: "OK"
        };
      

        console.log("INICIO OK LN-QeQ Cve_cobro: %s, E: [Inicio Consulta en lista negra]", cve_cobro);

        //Prod
        //let urlLogin = "https://qeq.com.mx/datos/qws/access?var1=vaguilera@transferdirecto.com&var2=TD2017S1stem@s";
        //let urlLogin = `https://qeq.com.mx/datos/qws/access?var1=${creds[0][0].var1}&var2=${creds[0][0].var2}`;
        let urlLogin = `https://qeq.com.mx/datos/qws/access?var1=${user}&var2=${pass}`;

        //Pruebas
        // let urlLogin  = "https://peps.mx/datos/qws/access?var1=vaguilera@transferdirecto.com&var2=TD2017S1stem@s";

        let resultado = await fetch(urlLogin);

        const headers = {
            'Cookie': resultado.headers.get('set-cookie')
        };

        let params = {
            "nombre": nombre_validar,
            "paterno": apellidop_validar,
            "materno": apellidom_validar
        };

        let query = Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&');
        //PROD:  https://qeq.com.mx/datos/qws/pepsp?nombre=andres%20manuel&paterno=lopez&materno=obrador
        let urlConsulta = "https://qeq.com.mx/datos/qws/pepsp?" + query;

        //Pruebas:
        //let urlConsulta = "https://peps.mx/datos/qws/pepsp?" + query;

        console.log(urlConsulta);

        var miVartmp = await fetch(urlConsulta, {
                headers,
                method: 'GET',
                credentials: 'include'
            })
            .then(response => response.text())
            .then(function (data) {

                data = data.replace('\\ufeff', '');

                parseString(data, function (err, result) {
                    let respuestaservicio = result;
                    let cml = respuestaservicio.xml.resumen[0].num_registros[0];
                    let msg = respuestaservicio.xml.resumen[0].msg_result[0];
                    let dat = respuestaservicio.xml.persona;

                    resultadoObtenido = {
                        code: "5",
                        msg: msg,
                        data: {
                            num_registros: cml,
                            datos: dat
                        }
                    }
                })
            })
            .catch((error) => {
                console.log("ERROR LN-QeQ Cve_cobro: %s, E: [%s]", cve_cobro, error);
                resultadoObtenido = {
                    code: "99",
                    msg: error
                }
            });

        if (idMovimiento == 0) {
            await pool.query("call usp_bloquea_remesa_in(?)", [paramsBloquear]);
            let sql = "call usp_obtener_id_movimiento_remesas_in_bloqueada(?,?,?);";
            poolres = await pool.query(sql, [cod_empresa, cve_cobro, 5]);
            idMovimiento = poolres[0][0].id_movimiento;
        }

        resultadoObtenido.data.datos.forEach(element => {
            let params = [
                idMovimiento,
                cod_empresa,
                element.nombrecomp,
                element.curp,
                element.rfc,
                '',
                element.fecha_nacimiento.toString().replaceAll('/', ''),
                element.puesto,
                element.area,
                element.domicilio_a + ' ' + element.colonia + ' ' + element.cp + ' ' + element.ciudad,
                '',
                '',
                '',
                'ACTIVO',
                element.fecha_cargo_fin,
                element.lista,
                '',
                element.id_persona,
                '',
                '',
                0,
                cod_empresa,
                'P',
                '',
                '',
                ''
            ];
            
        });

        console.log("FIN OK LN-QeQ Cve_cobro: %s, E: [Fin Consulta en lista negra]", cve_cobro);
        return resultadoObtenido;
    },
    buscarTDMQeQ: async function(persona, user, pass){


        let coincidencias = [];
        let resultadoObtenido = {
            code: "00",
            msg: "",
            data: {
                num_registros: 0,
                datos: []
            }
        };
        let token = "";
        let URLSearch = "";
        let params = {};
        // obtener el token
        // let URLtoken = 'http://54.71.253.87:3600/api/v1.0/pub/sesiones';
        let URLtoken = 'http://blacklist.transferdirecto.com:3600/api/v1.0/pub/sesiones';
        
        if(persona.tipo_persona=="PF"){
            //URLSearch = 'http://54.71.253.87:3600/api/v1.0/priv/physical?page=1&pageSize=10&sort=-1&firstName='+ persona.nombre +'&lastName='+ persona.apaterno +'&lastName2='+ persona.amaterno +'&dateRange=%20{%22startDate%22:%22'+ persona.fechanacimientoyyyyMMdd +'%22}';
            URLSearch = 'http://blacklist.transferdirecto.com:3600/api/v1.0/priv/physical?page=1&pageSize=10&sort=-1&firstName='+ persona.nombre +'&lastName='+ persona.apaterno +'&lastName2='+ persona.amaterno +'&dateRange=%20{%22startDate%22:%22'+ persona.fechanacimientoyyyyMMdd +'%22}';
            console.log(URLSearch);
        }else
        {
            //URLSearch = 'http://54.71.253.87:3600/api/v1.0/priv/legal?page=1&pageSize=10&sort=-1&firstName='+ persona.nombrePM;
            URLSearch = 'http://blacklist.transferdirecto.com:3600/api/v1.0/priv/legal?page=1&pageSize=10&sort=-1&firstName='+ persona.nombrePM;
        }
        let username = user;
        let password = pass;
        
        try {
            
            const result = await axios.get(URLtoken, {
                headers: {
                  'ses-id': password,
                  'campaign': username,
                  'User-Agent': 'JMeter/5.5'
                }});

            console.log("AUTH LN-QeQ-TDM REUKLTADO: %s ", result);
            if(result.status==200){
                token = result.data.sessionId;    
                
                try {
                    let results = await axios.get(URLSearch, {
                        headers: {
                            'sessionId': token,
                            'renew': '1',
                            'User-Agent': 'JMeter/5.5'
                        }});  
                        console.log("AUTH LN-QeQ-TDM REUKLTADO busqueda: %s ", results.data);
                        if(results.data.total == 0){
                            resultadoObtenido = {
                                code: "00",
                                msg: "No se encontraron coincidencias en listas negras",
                                data: {
                                    num_registros: 0,
                                    datos: []
                                }
                            }
                        }else{
                            
                            results.data.users.forEach(element => {
                                let paramsCumplimiento = {};
                                if(persona.tipo_persona=="PF"){
                                    paramsCumplimiento = {
                                        imagen : this.imagen_proveedor,
                                        descripcion_proveedor: this.descripcion_proveedor,
                                        id_movimiento : 0,
                                        cod_empresa: this.param_cod_empresa,
                                        Denominacion: element.NOMBRECOMP,
                                        Identificacion: "",
                                        Id_Tributaria: element.RFC,
                                        Otra_Identificacion: "",
                                        Fecha_nacimiento: element.FECHA_NACIMIENTO,
                                        Cargo: element.PUESTO,
                                        Lugar_Trabajo: element.DEPENDENCIA,
                                        Direccion: element.ENTIDAD,
                                        Enlace: "",
                                        Tipo: "",
                                        Sub_Tipo: "",
                                        Estado: element.ESTATUS,
                                        Finalizacion_cargo: "",
                                        Lista: element.LISTA,
                                        Pais_Lista: "",
                                        Cod_Individuo: element.ID_PERSONA,
                                        Exactitud_Denominacion: "",
                                        Exactitud_Identificacion: "",
                                        id_usuario: 0,
                                        cod_empresa_usuario: this.param_cod_empresa,
                                        tipo_movimiento: 'P',
                                        idRel : element.IDREL,
                                        genero : element.SEXO,
                                        parentesco : element.PARENTESCO

                                    };
                                }else{
                                    paramsCumplimiento = {
                                        imagen : this.imagen_proveedor,
                                        descripcion_proveedor: this.descripcion_proveedor,
                                        id_movimiento : 0,
                                        cod_empresa: this.param_cod_empresa,
                                        Denominacion: element.RAZONSOC,
                                        Identificacion: "",
                                        Id_Tributaria: element.RFCMORAL,
                                        Otra_Identificacion: "",
                                        Fecha_nacimiento: "",
                                        Cargo: "",
                                        Lugar_Trabajo: "",
                                        Direccion: "",
                                        Enlace: "",
                                        Tipo: "",
                                        Sub_Tipo: "",
                                        Estado: "",
                                        Finalizacion_cargo: "",
                                        Lista: element.LISTA,
                                        Pais_Lista: "",
                                        Cod_Individuo: element.ID_PERSONA,
                                        Exactitud_Denominacion: "",
                                        Exactitud_Identificacion: "",
                                        id_usuario: 0,
                                        cod_empresa_usuario: this.param_cod_empresa,
                                        tipo_movimiento: 'P',
                                        idRel : element.IDREL,
                                        genero : '',
                                        parentesco : element.PARENTESCO
                                    };
                                }
                                coincidencias.push(paramsCumplimiento);
                            });

                            //Hay coincidencias
                            resultadoObtenido = {
                                code: "01",
                                msg: "Coincidencias en Listas Negras",
                                data: {
                                    num_registros: results.data.total,
                                    datos: coincidencias
                                }
                            }
                        }


                } catch (error) {
                    console.log("ERROR LN-QeQ-TDM error llamada a busqueda: %s ", error.message);
                    resultadoObtenido = {
                        code: "99",
                        msg: error.message,
                        data: {
                            num_registros: 0,
                            datos: []
                        }
                    }        
                }
            }
            else
            {
                console.log("ERROR LN-QeQ-TDM Cve_cobro: %s ", result.data);
                resultadoObtenido = {
                    code: "99",
                    msg: result.data.message,
                    data: {
                        num_registros: 0,
                        datos: []
                    }
                }
            };
        } catch (error) {
            console.log("ERROR LN-QeQ-TDM Cve_cobro: %s ", error.message);
            resultadoObtenido = {
                code: "99",
                msg: error.message,
                data: {
                    num_registros: 0,
                    datos: []
                }
            }
            
        }

        console.log("FIN OK LN-QeQ-TDM, E: [Fin Consulta en lista negra]");
        return resultadoObtenido;
    },
    spread: async function (oPersona, user, pwd){
        let nombreCliente = oPersona.nombre;
        let paternoCliente = oPersona.apaterno;
        let maternoCliente = oPersona.amaterno;
        let rfc = oPersona.rfc;
        let curp = oPersona.curp;
        let fechaNacimiento  = oPersona.fechanacimientoCon;

        let coincidencias = [];
        let resultadoObtenido = {
            code: "00",
            msg: "No se encontraron coincidencias en listas negras",
            data: {
                num_registros: 0,
                datos: []
            }
        };
          
        const sp = new spreadLt.HandlerSiprelad(user, pwd);
        let request = { 
            firstName: nombreCliente, 
            firstSurname: paternoCliente, 
            secondSurname: maternoCliente,
            rfc : rfc,
            curp: curp,
            birthDate: fechaNacimiento
          };
        let result_resp = await sp.ConsultaListasExacta(request);
        

        if(result_resp.error){
            return {
                code: "99",
                msg: result_resp.error,
                data: {
                    num_registros: 0,
                    datos: {}
                }
            }
        }

        result_resp.result.forEach(async (element) =>  {
            let paramsCumplimiento = {};
            paramsCumplimiento = {
                imagen : this.imagen_proveedor,
                descripcion_proveedor: this.descripcion_proveedor,
                id_movimiento : 0,
                cod_empresa: this.param_cod_empresa,
                Denominacion: element['a:NOMBRE'] + " " + element['a:APELLIDO'] + " " + element['a:APELLIDO_M'],
                Identificacion: element['a:CURP'],
                Id_Tributaria: element['a:RFC'],
                Otra_Identificacion: element['a:CEDULA'],
                Fecha_nacimiento: element['a:FECHA_NAC'].replaceAll('-',''),
                Cargo: element['a:PUESTO'],
                Lugar_Trabajo: element['a:INSTITUCION'],
                Direccion: element['a:DIRECCION'],
                Enlace: element['a:FUENTE'],
                Tipo: element['a:TIPO_ENTIDAD'],
                Sub_Tipo: "",
                Estado: "",
                Finalizacion_cargo: element['a:CARGO_TERMINA'],
                Lista: element['a:CATEGORIA'],
                Pais_Lista: "",
                Cod_Individuo: element['a:IDPEP'],
                Exactitud_Denominacion: "",
                Exactitud_Identificacion: "",
                id_usuario: 0,
                cod_empresa_usuario: this.param_cod_empresa,
                tipo_movimiento: 'P',
                idRel : element['a:ID_RELACION'],
                genero : element['a:SEXO'],
                parentesco : element['a:TIPO_RELACION']  
            };
            coincidencias.push(paramsCumplimiento);
            
        });      
        if(coincidencias.length>0){
            resultadoObtenido = {
                code: "01",
                msg: "Coincidencias en Listas Negras",
                data: {
                    num_registros: coincidencias.length,
                    datos: coincidencias
                 }
        }

          }
    return resultadoObtenido;
    },
    aclist: async function (oPersona, user, pwd){
        let casosencontrados = [];
        let resultadoObtenido = this.resultadoSinCoincidencias(); 
        const soapProxy = new aclistLt();

        if(oPersona.tipo_persona=="PM"){
            oPersona.apaterno = "";
            oPersona.amaterno ="";
            oPersona.nombre = oPersona.nombrePM;
        }

        let parametros ={
            usuario : user,
            password : pwd,
            nombre : oPersona.nombre,
            apellidoPaterno : oPersona.apaterno,
            apellidoMaterno : oPersona.amaterno
        }
        try {
            const { coincidencias } = await soapProxy.validateACLLists(parametros);
            let flagArmalista = false;
            proceso :{
                if(coincidencias.length == 1){
                    if(coincidencias[0].nRes == "0"){ break proceso;}
                    else if(coincidencias[0].nRes == "1"){
                        flagArmalista = true;
                    }
                    else
                    {
                        resultadoObtenido = {
                            code: "99",
                            msg: coincidencias[0].nRes + " - " + coincidencias[0].sMensaje,
                            data: {
                                num_registros: 0,
                                datos: {}
                             }     
                        }            
                        break proceso;
                    }
                }
                else
                {
                    flagArmalista = true;
                }

                if (flagArmalista == true){
                    for (const element of coincidencias) {
                        let paramsCumplimiento = {};
                        paramsCumplimiento = {
                            imagen : this.imagen_proveedor,
                            descripcion_proveedor: this.descripcion_proveedor,
                            id_movimiento : 0,
                            cod_empresa: this.param_cod_empresa,
                            Denominacion: element.usuarioLista,
                            Identificacion: "",
                            Id_Tributaria: "",
                            Otra_Identificacion: "",
                            Fecha_nacimiento: "",
                            Cargo: element.descripcion,
                            Lugar_Trabajo: "",
                            Direccion: "",
                            Enlace: "",
                            Tipo: "",
                            Sub_Tipo: "",
                            Estado: "",
                            Finalizacion_cargo: "",
                            Lista: element.lista,
                            Pais_Lista: "",
                            Cod_Individuo: "",
                            Exactitud_Denominacion: "",
                            Exactitud_Identificacion: "",
                            id_usuario: 0,
                            cod_empresa_usuario: this.param_cod_empresa,
                            tipo_movimiento: 'P',
                            idRel : "",
                            genero : "",
                            parentesco : ""  
                        };
                        casosencontrados.push(paramsCumplimiento);
                    };
                    resultadoObtenido = {
                        code: "01",
                        msg: "Coincidencias en Listas Negras",
                        data: {
                            num_registros: coincidencias.length,
                            datos: casosencontrados
                         }     
                    }     
                }
            }
        } catch (error) {
            res.status(500).json({ error: error.message });
        }
        return resultadoObtenido;      
    },
    qeqDirecto: async function (oPersona, clientID, secretID, user){
        let casosencontrados = [];
        let resultadoObtenido;
        const handler = new HandlerQesQDirect(clientID, secretID, user);

        if(oPersona.tipo_persona=="PM"){
          
            oPersona.nombre = oPersona.nombrePM;
        }

        let parametros ={
            nombre : (oPersona.nombre + " " + oPersona.apaterno + " " + oPersona.amaterno).trim(),
            tipo_persona : oPersona.tipo_persona == "PM" ? 1 : 0,
            rfc : oPersona.rfc == undefined ? "": oPersona.rfc,
            curp: oPersona.curp == undefined ? "": oPersona.curp
        }
        console.log("parametros qeq directo");
        console.log(parametros);
        // Llamar al método find para realizar una búsqueda
        try {
            let result = await handler.find(parametros);
            if (result.success) {
                console.log('Datos de la búsqueda:', result.data);
                if(result.data.success){
                    let coincidencias = result.data.data;
                    for (const element of coincidencias) {
                        let paramsCumplimiento = {};
                        paramsCumplimiento = {
                            imagen : this.imagen_proveedor,
                            descripcion_proveedor: this.descripcion_proveedor,
                            id_movimiento : 0,
                            cod_empresa: this.param_cod_empresa,
                            Denominacion: element.NOMBRECOMP == undefined ? "": element.NOMBRECOMP.toUpperCase(),
                            Identificacion: "",
                            Id_Tributaria: element.RFC == undefined ? "": element.RFC.toUpperCase(),
                            Otra_Identificacion: element.CURP == undefined ? "": element.CURP.toUpperCase(),
                            Fecha_nacimiento: element.FECHA_NACIMIENTO == undefined ? "": element.FECHA_NACIMIENTO,
                            Cargo: element.PUESTO == undefined ? "": element.PUESTO.toUpperCase(),
                            Lugar_Trabajo: element.DEPENDENCIA == undefined ? "": element.DEPENDENCIA.toUpperCase(),
                            Direccion: element.ENTIDAD == undefined ? "": element.ENTIDAD.toUpperCase(),
                            Enlace: element.CAT_INGRESOS == undefined ? "": element.CAT_INGRESOS,
                            Tipo: element.CATEGORIA_RIESGO  == undefined ? "": element.CATEGORIA_RIESGO.toUpperCase() ,
                            Sub_Tipo: "",   
                            Estado: element.STATUS == undefined ? "": element.STATUS.toUpperCase(),
                            Finalizacion_cargo: element.FECHA_CARGO_FIN == undefined ? "": element.FECHA_CARGO_FIN.toUpperCase(),
                            Lista: element.LISTA == undefined ? "": element.LISTA.toUpperCase(),
                            Pais_Lista: "",
                            Cod_Individuo: element.ID_PERSONA == undefined ? "": element.ID_PERSONA.toUpperCase(),
                            Exactitud_Denominacion: element.COINICIDENCIA,
                            Exactitud_Identificacion: "",
                            id_usuario: 0,
                            cod_empresa_usuario: this.param_cod_empresa,
                            tipo_movimiento: 'P',
                            idRel : element.ID_PERSONA == undefined ? "": element.ID_PERSONA.toUpperCase(),
                            genero : element.SEXO == undefined ? "": element.SEXO.toUpperCase(),
                            parentesco : ""  
                        };
                        casosencontrados.push(paramsCumplimiento);
                    };
                    resultadoObtenido = {
                        code: "01",
                        msg: "Coincidencias en Listas Negras",
                        data: {
                            num_registros: coincidencias.length,
                            datos: casosencontrados
                         }     
                    }     
                } else {
                    if(result.data.status =="No se han encontrado coincidencias"){
                        resultadoObtenido = this.resultadoSinCoincidencias(); 
                    } else {
                        resultadoObtenido =  {
                            code: "99",
                            msg: result.data.status,
                            data: {
                                num_registros: 0,
                                datos: {}
                             }     
                        } 
                    }
                }           

            } else {
                console.log('Error:', result.status);
                resultadoObtenido = {
                    code: "99",
                    msg: result.status,
                    data: {
                        num_registros: 0,
                        datos: {}
                     }     
                }      
            }
        } catch (error) {
            console.error('Error al realizar la búsqueda:', error);
            resultadoObtenido =  {
                code: "99",
                msg: error,
                data: {
                    num_registros: 0,
                    datos: {}
                 }     
            } 
        }
        return resultadoObtenido;
        
    }
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\Listas.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\qesq.js ---

const axios = require('axios');
const { json } = require('express');
const { parseString } = require('xml2js');

class HandlerQesQDirect {
    constructor(client_id, secret_id, user) {
        this.__user = user;
        this.__client_id = client_id;
        this.__secret_id = secret_id;
        this.__axios_token = "https://app.q-detect.com/api/token";
        this.__axios_find = "https://app.q-detect.com/api/find";
        this.__errorMessages = ['La contraseña no es válida.', 'El Usuario no existe'];
        this.__token = "";
    }

    // Función para obtener el token
    async obtenerToken() {
        try {

            // Mostrar parámetros y encabezados para ver qué se está enviando
            console.log("Parametros de la solicitud:", {
                client_id: this.__client_id,
                secret_id : this.__secret_id
            });

            let response = await axios.get(this.__axios_token, {
                params: {
                    client_id: this.__client_id
                },
                headers: {
                    Authorization: `Bearer ${this.__secret_id}`
                }
                
            });
            console.log('paso 0');
            let token = response.data;
            return {
                success: true,
                token : token
            };
        } catch (error) {
            console.log('error 0' + error);
            if (error.response && error.response.data && error.response.data.success === false) {
                return {
                    success: false,
                    status: error.response.data.status
                };
            }
            return {
                success: false,
                status: 'Ocurrió un error al intentar obtener el token.'
            };
        }
    }

    // Función para realizar la búsqueda
    async find(parametros) {
        // Obtener el token primero
        const tokenResult = await this.obtenerToken();
        console.log(tokenResult);
        if (!tokenResult.success) {
            return { success: false, status: tokenResult.status };
        }

        const token = tokenResult.token;
        try {
            // Realizar la solicitud GET con los parámetros adecuados
            
            let params = {
                client_id: this.__client_id,
                username: this.__user,
                name: parametros.nombre,
                type: parametros.tipo_persona,
                rfc: parametros.rfc,
                curp: parametros.curp,
                percent: 90
            }
            parametros.rfc =="" ? delete params.rfc : "";
            parametros.curp =="" ? delete params.curp : "";

            
            const response = await axios.get(this.__axios_find, { params,
                headers: {
                    Authorization: `Bearer ${token}` // Incluir el token en el encabezado
                }
            });
            console.log('paso 2');
            return {
                success: true,
                data: response.data // Devuelve la respuesta de la API
            };
        } catch (error) {
            console.log('error 1');
            // Manejo de errores
            if (error.response && error.response.data) {
                return {
                    success: false,
                    status: error.response.data.status || 'Error al realizar la búsqueda.'
                };
            }
            return {
                success: false,
                status: 'Ocurrió un error al intentar realizar la búsqueda.'
            };
        }
    }

}

module.exports = { HandlerQesQDirect };

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\qesq.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\sipread.js ---

const axios = require('axios')
const xml2js = require('xml2js')

const consultaListasSIPXmlBody = `<soapenv:Envelope
  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/">
  <soapenv:Header/>
  <soapenv:Body>
    <tem:{{queryMethod}}>
      <tem:Usuario>{{username}}</tem:Usuario>
      <tem:Contrasena>{{password}}</tem:Contrasena>
      <tem:Nombre>{{name}}</tem:Nombre>
      <tem:ApellidoPaterno>{{firstSurname}}</tem:ApellidoPaterno>
      <tem:ApellidoMaterno>{{secondSurname}}</tem:ApellidoMaterno>
      <tem:RazonSocial>{{businessName}}</tem:RazonSocial>
      <tem:RFC>{{rfc}}</tem:RFC>
      <tem:CURP>{{curp}}</tem:CURP>
      <tem:FechaNacimientoConstitucion>{{birthDate}}</tem:FechaNacimientoConstitucion>
    </tem:{{queryMethod}}>
  </soapenv:Body>
</soapenv:Envelope>`

const consultaListasFechaXmlBody = `<soapenv:Envelope
  xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:tem="http://tempuri.org/">
  <soapenv:Header/>
  <soapenv:Body>
    <tem:ConsultaListasFecha>
      <tem:Usuario>{{username}}</tem:Usuario>
      <tem:Contrasena>{{password}}</tem:Contrasena>
      <tem:fechaini>{{initialDate}}</tem:fechaini>
      <tem:fechafin>{{finalDate}}</tem:fechafin>
    </tem:ConsultaListasFecha>
  </soapenv:Body>
</soapenv:Envelope>`

const evaluateRowResult = (row, messages) => {
  return messages.find(msg => row['a:LogError'].toLowerCase().includes(msg.toLowerCase()))
}

class HandlerSiprelad {
  constructor (username, password) {
    this.__username = username
    this.__password = password
    this.__parser = new xml2js.Parser({ explicitArray: false, explicitRoot: false, ignoreAttrs: true })
    this.__axios = axios.create({
      baseURL: process.env.SIPRELAD_BASE_URL || 'https://listas-siprelad.dyndns.org',
      headers: { 'Content-Type': 'text/xml' }
    })
    this.__errorMessages = ['La contraseña no es válida.', 'El Usuario no existe']
  }

  async consultaListasSIP (params) {
    const xmlString = consultaListasSIPXmlBody
      .replace(/{{queryMethod}}/gi, 'ConsultaListasSIP')
      .replace('{{username}}', this.__username)
      .replace('{{password}}', this.__password)
      .replace('{{name}}', [params.firstName, params.secondName].filter(r => r).join(' '))
      .replace('{{firstSurname}}', params.firstSurname || '')
      .replace('{{secondSurname}}', params.secondSurname || '')
      .replace('{{businessName}}', '')
      .replace('{{rfc}}', params.rfc || '')
      .replace('{{curp}}', '')
      .replace('{{birthDate}}', '')

    const { data } = await this.__axios.post('/WebService/ServicioListasSIP.svc', xmlString, { headers: { Operation: 'ConsultaListasSIP', SOAPAction: 'http://tempuri.org/IServicioListasSIP/ConsultaListasSIP' } })
    const json = await this.__parser.parseStringPromise(data)
    const listasSIP = json['s:Body'].ConsultaListasSIPResponse.ConsultaListasSIPResult['a:ServicioListasSIP.ListasSIP']

    const result = Array.isArray(listasSIP) ? listasSIP : [listasSIP]
    const error = result.find(row => evaluateRowResult(row, this.__errorMessages))

    return {
      result: result.filter(row => !evaluateRowResult(row, this.__errorMessages.concat(['No se encontraron coincidencias.']))),
      error: (error ? error['a:LogError'] : null)
    }
  }

  async consultaListasSIP2 (params) {
    const xmlString = consultaListasSIPXmlBody
      .replace(/{{queryMethod}}/gi, 'ConsultaListasSIP2')
      .replace('{{username}}', this.__username)
      .replace('{{password}}', this.__password)
      .replace('{{name}}', [params.firstName, params.secondName].filter(r => r).join(' '))
      .replace('{{firstSurname}}', params.firstSurname || '')
      .replace('{{secondSurname}}', params.secondSurname || '')
      .replace('{{businessName}}', '')
      .replace('{{rfc}}', params.rfc || '')
      .replace('{{curp}}', '')
      .replace('{{birthDate}}', '')

    const { data } = await this.__axios.post('/WebService/ServicioListasSIP.svc', xmlString, { headers: { Operation: 'ConsultaListasSIP2', SOAPAction: 'http://tempuri.org/IServicioListasSIP/ConsultaListasSIP2' } })
    const json = await this.__parser.parseStringPromise(data)
    const listasSIP = json['s:Body'].ConsultaListasSIP2Response.ConsultaListasSIP2Result['a:ServicioListasSIP.ListasSIP']

    const result = Array.isArray(listasSIP) ? listasSIP : [listasSIP]
    const error = result.find(row => evaluateRowResult(row, this.__errorMessages))

    return {
      result: result.filter(row => !evaluateRowResult(row, this.__errorMessages.concat(['No se encontraron coincidencias.']))),
      error: (error ? error['a:LogError'] : null)
    }
  }

  async consultaListasSIP3 (params) {
    const xmlString = consultaListasSIPXmlBody
      .replace(/{{queryMethod}}/gi, 'ConsultaListasSIP3')
      .replace('{{username}}', this.__username)
      .replace('{{password}}', this.__password)
      .replace('{{name}}', [params.firstName, params.secondName].filter(r => r).join(' '))
      .replace('{{firstSurname}}', params.firstSurname || '')
      .replace('{{secondSurname}}', params.secondSurname || '')
      .replace('{{businessName}}', '')
      .replace('{{rfc}}', params.rfc || '')
      .replace('{{curp}}', params.curp || '')
      .replace('{{birthDate}}', '')

    const { data } = await this.__axios.post('/WebService/ServicioListasSIP.svc', xmlString, { headers: { Operation: 'ConsultaListasSIP3', SOAPAction: 'http://tempuri.org/IServicioListasSIP/ConsultaListasSIP3' } })
    const json = await this.__parser.parseStringPromise(data)
    const listasSIP = json['s:Body'].ConsultaListasSIP3Response.ConsultaListasSIP3Result['a:ServicioListasSIP.ListasSIP']

    const result = Array.isArray(listasSIP) ? listasSIP : [listasSIP]
    const error = result.find(row => evaluateRowResult(row, this.__errorMessages))

    return {
      result: result.filter(row => !evaluateRowResult(row, this.__errorMessages.concat(['No se encontraron coincidencias.']))),
      error: (error ? result['a:LogError'] : null)
    }
  }
  async ConsultaListasExacta (params) {
    const xmlString = consultaListasSIPXmlBody
      .replace(/{{queryMethod}}/gi, 'ConsultaListasExacta')
      .replace('{{username}}', this.__username)
      .replace('{{password}}', this.__password)
      .replace('{{name}}', [params.firstName, params.secondName].filter(r => r).join(' '))
      .replace('{{firstSurname}}', params.firstSurname || '')
      .replace('{{secondSurname}}', params.secondSurname || '')
      .replace('{{businessName}}', '')
      .replace('{{rfc}}', params.rfc || '')
      .replace('{{curp}}', params.curp || '')
      .replace('{{birthDate}}', params.birthDate || '')
    console.log(xmlString);
    const { data } = await this.__axios.post('/WebService/ServicioListasSIP.svc', xmlString, { headers: { Operation: 'ConsultaListasExacta', SOAPAction: 'http://tempuri.org/IServicioListasSIP/ConsultaListasExacta' } })
    const json = await this.__parser.parseStringPromise(data)
    console.log("json:");
    console.log(json);
    const listasSIP = json['s:Body'].ConsultaListasExactaResponse.ConsultaListasExactaResult['a:ServicioListasSIP.ListasSIP']

    const result = Array.isArray(listasSIP) ? listasSIP : [listasSIP]
    const error = result.find(row => evaluateRowResult(row, this.__errorMessages))

    return {
      result: result.filter(row => !evaluateRowResult(row, this.__errorMessages.concat(['No se encontraron coincidencias.']))),
      error: (error ? result['a:LogError'] : null)
    }
  }
  async consultaListasFecha (params) {
    const xmlString = consultaListasFechaXmlBody
      .replace('{{username}}', this.__username)
      .replace('{{password}}', this.__password)
      .replace('{{initialDate}}', params.initialDate || '')
      .replace('{{finalDate}}', params.finalDate || '')

    const { data } = await this.__axios.post('/WebService/ServicioListasSIP.svc', xmlString, { headers: { SOAPAction: 'http://tempuri.org/IServicioListasSIP/ConsultaListasFecha' } })
    const json = await this.__parser.parseStringPromise(data)
    const listasFecha = json['s:Body'].ConsultaListasFechaResponse.ConsultaListasFechaResult['a:ServicioListasSIP.ListasSIP']

    const result = Array.isArray(listasFecha) ? listasFecha : [listasFecha]
    const error = result.find(row => evaluateRowResult(row, this.__errorMessages))

    return {
      result: result.filter(row => !evaluateRowResult(row, this.__errorMessages.concat(['No se encontraron coincidencias.']))),
      error: (error ? error['a:LogError'] : null)
    }
  }
}

module.exports = {HandlerSiprelad}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\Apis\sipread.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\apis-rest.js ---

const axios = require('axios');
const credentialsBD = require('../lib/credentialsBD');
module.exports = {
    ListasNegras: async function(req, apellidos, nombre, rfc ){

        let URLtoken = 'https://mbalistas.prevenciondelavado.com/Login';
        let URLSearch = 'https://mbalistas.prevenciondelavado.com/listas';

        let r = await credentialsBD.Get_Credenciales_Listas(req);
        let result = {
            Status : "SINACCESO"
        };            
        console.log("consulta en listas con proveedor");
        if(r[0] != undefined){

        
            let user = r[0].user_listas;
            let pass  = r[0].password_listas;
            /* let params = {
                "Apellido" : apellidos,
                "Nombre" : nombre,
                "Identificacion" : rfc,
                "PEPS_otros_paises" : "S",    
                "Incluye_SAT" : "S",
                "SATxDenominacion" : "S",
                "Documentos_similares" : "S",
                "Usuario" : user,
                "Password" : pass
            };*/

            let params = {
                "apellido" : apellidos,
                "nombre" : nombre,
                "identificacion" : rfc,
                "pepsOtrosPaises" : "S",    
                "satXDenominacion" : "S",
                "documentosSimilares" : "S"
            };

            try 
            {                
                const bodyRequest = {
                usuario: user,
                clave: pass
                };
                console.log(bodyRequest);
                const configToken = {
                    validateStatus: false
                };
                console.log("token obtenido:");
                const resultToken = await axios.post(URLtoken,bodyRequest, configToken);
                
                let token = resultToken.data.token;
                if(!token){
                    resultadoObtenido.code = "99";
                    resultadoObtenido.msg = resultToken.data.Message;
                    req.flash("error_msg", resultadoObtenido.msg);
                }
                else{
                    // Configuramos headers con el token
                    let config={
                        headers: {
                            Authorization: `Bearer ${token}` 
                        },
                        validateStatus: false        
                    };             

                    console.log(params);
                    //        const response = await axios.post("https://www.prevenciondelavado.com/listas/api/busqueda", params);
                    const response = await axios.post(URLSearch, params, config);
                    result = response.data;
                    console.log(result);
                }
            } 
            catch (err) 
            {
                console.log(err);
            }
        }else{
            req.flash("error_msg", "No existen credenciales para esta empresa");
        }
        return result;
    }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\apis-rest.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\auth.js ---

const jwt = require('jsonwebtoken');
const session = require("express-session");

module.exports = {
    isLoggedIn(req, res, next){
        
        if(req.isAuthenticated()){
            return next();      
        }else{
            
            if (req.session && req.session.authToken) {
                try {
                    // Verificar el JWT
                    
                    const decoded = jwt.verify(req.session.authToken, process.env.JWT_SECRET_KEY);
                    req.user = decoded;
                    req.session.user = decoded; // Asegura que se guarde en sesión también
                    res.locals.user = req.user; // Para Handlebars
                    
                    return next();  
                    } catch (err) {
                        console.log("error:" + err);
                    return res.redirect("/logout");
                    }
            }else {
                return res.redirect("/login");
            }
        }
    },
    isNotLoggedIn(req, res, next){
        if(!req.isAuthenticated()){
            return next();      
        }
        return res.redirect("/menu");
    },
    isLoggedInAdm(req, res, next){
        if(req.isAuthenticated()){
            if(req.user.IdPerfilCliente!="--"){
                 return next();      
            }
        }
        return res.redirect("/logout");
    }
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\auth.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\authAD.js ---

const { ConfidentialClientApplication } = require('@azure/msal-node');
require('dotenv').config();

const config = {
  auth: {
    clientId: process.env.CLIENT_ID,
    clientSecret: process.env.CLIENT_SECRET,
    authority: process.env.AUTHORITY,
  },
  system: {
    loggerOptions: {
      logLevel: "Info",
    },
  },
};

const cca = new ConfidentialClientApplication(config);

const getAuthUrl = () => {
  const authCodeUrlParameters = {
    scopes: ["user.read"],
    redirectUri: process.env.REDIRECT_URI,
  };

  return cca.getAuthCodeUrl(authCodeUrlParameters);
};

const getTokenFromCode = async (code) => {
  const tokenRequest = {
    code,
    scopes: ["user.read"],
    redirectUri: process.env.REDIRECT_URI,
  };

  try {
    const response = await cca.acquireTokenByCode(tokenRequest);
    return response;
  } catch (error) {
    console.error("Error acquiring token", error);
    throw error;
  }
};

module.exports = { getAuthUrl, getTokenFromCode };

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\authAD.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\bitacoras.js ---

const pool = require("../database");
const { param } = require("../routes");


module.exports = {
    cod_empresa : "",
    cod_transmisor: "",
    cod_corresponsal: "",
    cve_cobro: "",
    observaciones: "",
    id_usuario: "",
    cod_empresa_usuario: "",
    cod_cliente: "",
    Registra_MovimientoRemesa: async function(){
        let params = [
           this.cod_empresa,
           this.cod_transmisor,
           this.cod_corresponsal,
           this.cve_cobro,
           this.observaciones,
           this.id_usuario,
           this.cod_empresa_usuario
        ];
     
        await pool.query("Call usp_guarda_movimiento_remesa (?)", [params]).then(function(result){
            console.log("Registro guardado en Bitacora");
          }).catch(function(err){
             console.log(err);
        });
    },
    Registra_MovimientoCliente: async function(){
        let params = [
           this.cod_empresa,
           this.cod_cliente,
           this.observaciones,
           this.id_usuario,
           this.cod_empresa_usuario
        ];
     
        await pool.query("Call usp_guarda_movimiento_cliente (?)", [params]).then(function(result){
            console.log("Registro guardado en Bitacora");
          }).catch(function(err){
             console.log(err);
        });
    },
    registraParametrosNotificacion: async function (tipo, request, response){
      var solicitud="";
      var respuesta = "";
        if(tipo=="Pago"){ 
            solicitud = "idRemesa:" + request.idRemesa + "|idDocumento:" + request.idDocumento + "|pasaporte:" + request.pasaporte;
            solicitud = solicitud  + "greenCard:" + request.greenCard + "|nss:" + request.nss + "|matriculaConsultar:" + request.matriculaConsultar; 
            solicitud = solicitud  + "ife:" + request.ife + "|licencia:" + request.licencia; 

            respuesta = response.code + "|" + response.mensaje;
            let params = [
                this.cod_empresa,
                this.cod_transmisor,
                this.cod_corresponsal,
                this.cve_cobro,
                solicitud,
                respuesta
             ];
             console.log(params);
            await pool.query("Call usp_inserta_notificaciones (?,?,?,?,?,?)",[params]).then(function(result){
                console.log("success");
              }).catch(function(err){
                 console.log(err);
            });

        }

    },
    Registra_CoincidenciaCompliance : async function(id_movimiento, registros, tipoMov){
        registros.forEach(element => {
            let fecha = "";
            let finalizacion = "";
            if(element.Fecha_nacimiento!= undefined){
                fecha = element.Fecha_nacimiento;
            }
            if(element.Finalizacion_cargo!= undefined){
                finalizacion = element.Finalizacion_cargo;
            }


            params = [
                id_movimiento,
                this.cod_empresa,
                element.Denominacion,
                element.Identificacion,
                element.Id_Tributaria,
                element.Otra_Identificacion,
                fecha,
                element.Cargo,
                element.Lugar_Trabajo,
                element.Direccion,
                element.Enlace,
                element.Tipo,
                element.Sub_Tipo,
                element.Estado,
                finalizacion,
                element.Lista,
                element.Pais_Lista,
                element.Cod_Individuo,
                element.Exactitud_Denominacion,
                element.Exactitud_Identificacion,
                this.id_usuario,
                this.cod_empresa_usuario,
                tipoMov,
                '',
                '',
                ''
            ];
            console.log("Inserta registro de cumpl");
            console.log(params);
            pool.query("Call usp_inserta_registro_compliance (?)", [params]).then(function(result){
                console.log("success");
              }).catch(function(err){
                 console.log(err);
            });
        });
    },

    Registra_CoincidenciaCompliance_two : async function(registros, tipoMov){
        
        registros.lt.forEach(element => {
            let fecha = "";
            let finalizacion = "";
            if (element.Fecha_nacimiento != undefined) {
                fecha = element.Fecha_nacimiento;
            }
            if (element.Finalizacion_cargo != undefined) {
                finalizacion = element.Finalizacion_cargo;
            }


            params = [
                registros.id_movimiento,
                this.cod_empresa,
                element.Denominacion,
                element.Identificacion,
                element.Id_Tributaria,
                element.Otra_Identificacion,
                fecha,
                element.Cargo,
                element.Lugar_Trabajo,
                element.Direccion,
                element.Enlace,
                element.Tipo,
                element.Sub_Tipo,
                element.Estado,
                finalizacion,
                element.Lista,
                element.Pais_Lista,
                element.Cod_Individuo,
                element.Exactitud_Denominacion == undefined? '' : element.Exactitud_Denominacion,
                element.Exactitud_Identificacion,
                this.id_usuario,
                this.cod_empresa_usuario,
                tipoMov,
                '',
                '',
                ''
            ];
            console.log("Inserta registro de cumpl");
            console.log(params);
            pool.query("Call usp_inserta_registro_compliance (?)", [params]).then(function(result){
                console.log("success");
              }).catch(function(err){
                 console.log(err);
            });
        });
    }
    
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\bitacoras.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\catalogosBD.js ---

const pool = require("../database");
module.exports = {
    
    Cat_genero: async function(){
        return await pool.query("select cod_genero as id, descripcion as descripcion from cat_genero");
    },
    Cat_perfil_modulos: async function(IdEmpresa, IdPerfil){
        let params = [IdEmpresa, IdPerfil];
        return await pool.query("Select * from vw_perfil_modulos  where idEmpresa = ? and id_perfil = ? order by orden asc", params);
    },
    Cat_actividad_sucursal: async function(){
        return await pool.query("select cod_actividad as id, descripcion as descripcion from cat_actividad_sucursal");
    },
    Cat_recibos_plantilla: async function(IdEmpresa){
        let params = [IdEmpresa];
        return await pool.query("select cod_plantilla as id, nombre_plantilla as descripcion from plantilla_recibos where cod_empresa = ? order by nombre_plantilla", params);
    },
    Cat_nacionalidad : async function(){
        return await pool.query("Select cod_pais as id, case when gentilicio = '' then pais else gentilicio end as descripcion FROM cat_paises");
    },
    Cat_numero_empleados : async function(){
        return await pool.query("Select id_no_empleados as id, descripcion  FROM cat_numero_empleados");
    },
    Cat_identificaciones : async function(req){
        return await pool.query("select a.id_identificacion as id, b.identificacion as descripcion from identificaciones_empresa a inner join cat_identificaciones b on (b.id_identificacion = a.id_identificacion) where a.cod_empresa = ? and a.status =  1 and b.status = 1", req.user.IdEmpresaCliente);
    },
    Cat_parentesco : async function(req){
        return await pool.query("select  a.id, a.descripcion from  vw_parentesco_empresa a where a.id_empresa = ? and a.status =  1 ", req.user.IdEmpresaCliente);
    },
    Cat_actividad_economica: async function(){
        return await pool.query("select cod_actividad as id, descripcion as descripcion from cat_actividad_economica where status = 1");
    },
    Cat_remesadores: async function(req){
        return await pool.query("select cod_remesador, nombre from empresa_remesadores where cod_empresa = ?", [req.user.IdEmpresaCliente]);
    },
    Cat_agentes_relacionados: async function(req){
        return await pool.query("select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ?", [req.user.IdEmpresaCliente]);
    },
    Cat_Status: async function(req){
        return await pool.query("select a.cod_status, a.descripcion as nombre from  cat_status_remesas a");
    },
    Cat_parametros_transmisor: async function(req, cod_transmisor){
        return await pool.query("select ifnull(notifica_status, 0) as notifica_status from empresa_remesadores where cod_empresa = ? and cod_remesador = ?", [req.user.IdEmpresaCliente, cod_transmisor]);
    },
    Cat_sucursales_empresa: async function(req, cod_corresponsal = null){
        return await pool.query("select * from vw_agentes_sucursales where cod_empresa = ?", [req.user.IdEmpresaCliente]);
    },
    Cat_sucursales_empresa_catalogo: async function(req, cod_corresponsal = null){
        return await pool.query("select cod_sucursal as id, nombre as descripcion from vw_agentes_sucursales where cod_empresa = ?", [req.user.IdEmpresaCliente]);
    },
    Cat_intencion_fondos : async function(req){
        return await pool.query("select  id, descripcion from  cat_intencion_fondos");
    },
    recibo_existe_by_sucursal: async function(req, tipo){
        let params = [req.user.IdEmpresaCliente, req.user.cod_sucursal, tipo];
        let rs = await pool.query("call usp_recibo_existe(?)", [params]);
        return rs[0];
    },
    recibo_by_sucursal: async function(req, cod_transmisor, tipo){
        let params = [req.user.IdEmpresaCliente, req.user.cod_sucursal, tipo, cod_transmisor];
        let rs = await pool.query("call usp_recibo_by_sucursal(?)", [params]);
        return rs[0];
    },
    Cat_recibo_sucursal: async function(req, tipo){
        // YA NO SE OCUPARA
        let params = [req.user.IdEmpresaCliente, req.user.IdAgenteRelacionado, req.user.cod_sucursal, tipo];
        return await pool.query("Select count(recibo) as existe, recibo from agente_recibos where cod_empresa = ? and cod_agente = ? and cod_sucursal = ? and tipo = ?", params);
    },
    Cat_tipo_recibo : async function(){
        return await pool.query("select cod_recibo as cod_tipo, descripcion as nombre  from cat_tipo_recibo");
    },
    Get_recibo_plantilla : async function(req, cod_plantilla){
        let params = [req.user.IdEmpresaCliente, cod_plantilla];
        return await pool.query("select * from plantilla_recibos where cod_empresa = ? and cod_plantilla = ? ", params);
    },
    Get_total_sucursales_plantilla : async function(req, cod_plantilla){
        let params = [req.user.IdEmpresaCliente, cod_plantilla];
        return await pool.query("select count(*) as total from sucursal_recibos where cod_empresa = ? and cod_plantilla = ? ", params);
    },
    Cat_operaciones_esperadas_pm: async function(){
        return await pool.query("select cod_operaciones_esperadas as id, descripcion from pm_cat_operaciones_esperadas where cod_operaciones_esperadas <> 0 order by id asc");
    },
    Cat_montos_esperados_pm: async function(){
        return await pool.query("select cod_montos_esperados as id, descripcion from pm_cat_montos_esperados where cod_montos_esperados <> 0 order by id asc");
    },
    Cat_origen_patrimonio_pm: async function(){
        return await pool.query("select  id, descripcion from pm_cat_origen_patrimonio order by id asc");
    },
    
    Cat_origen_recursos_pm: async function(){
        return await pool.query("select cod_origen as id, descripcion from cat_origen_recursos where cod_origen <> 0 order by id asc");
    },
    Cat_origen_recursos_pm_risk: async function(req){
        return await pool.query("select id,descripcion from vw_origen_recursos_empresa where id_empresa = ? and id<>0 and tipo_producto = ?",[req.user.IdEmpresaCliente, 'CT']);
    },
    Cat_divisas: async function(){
        return await pool.query("select cod_divisa as id,divisa as descripcion from cat_divisas order by divisa asc");
    },
    Cat_destino_recursos_pm: async function(){
        return await pool.query("select cod_destino as id, descripcion from cat_destino_recursos where cod_destino <> 0 order by id asc");
    },
    Cat_plantillas_recibo: async function(req){
        let params = [req.user.IdEmpresaCliente];
        return await pool.query("select cod_plantilla, nombre_plantilla, b.descripcion tipo_plantilla from plantilla_recibos a inner join cat_tipo_recibo b on(b.cod_recibo = a.tipo) where cod_empresa = ?", params);
    },
    Cat_paises: async function(){
        return await pool.query("Select cod_pais, pais FROM cat_paises order by pais");
    },
    Cat_paises_rfp: async function(req){
        return await pool.query("call usp_get_paises_rfp(?)",[req.user.IdEmpresaCliente]);
    },
    Cat_paises_gafi: async function(req){
        return await pool.query("call usp_get_paises_gafi(?)",[req.user.IdEmpresaCliente]);
    },
    Cat_clientes_pm: async function(req){
        let params = [req.user.IdEmpresaCliente];
        return await pool.query("select cod_pm as id, nombre_comercial as descripcion from pm_datos_generales where cod_empresa = ? order by nombre_comercial desc",  params);
    },
    Cat_propositos: async function(req){
        let params = [req.user.IdEmpresaCliente];
        return await pool.query("select id, descripcion from vw_propositos_empresa where id_empresa = ? and status = 1 order by descripcion asc",  params);
    },
    Cat_entidades_financieras: async function(req){
        return await pool.query("select cod_entidad as id, descripcion from cat_entidades_financieras where status = 1");
    },
    Cat_estados: async function(){
        return await pool.query("Select cod_estado, estado FROM cat_estados_spmx order by estado");
    },
    Cat_nivel_riesgo_empresa: async function(req){
        let params = [req.user.IdEmpresaCliente];
        return await pool.query("select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?", params);
    },
    Cat_entidades_nacimiento_curp : async function(){
        return await pool.query("select id,descripcion from cat_entidades_nacimiento_curp order by orden asc");
    },
    Get_paises_transmisor: async function(req,cod_transmisor){
        let params = [req.user.IdEmpresaCliente, cod_transmisor];
        return await pool.query("select paises,tipo_operacion from remesadores_paises where cod_empresa = ? and cod_remesador = ?", params);
    },   
    Get_estados_envios: async function(req,cod_pais){
        let params = [req.user.IdEmpresaCliente, cod_pais];
        return await pool.query("select distinct a.cod_estado, b.estado from agentes_sucursales a inner join cat_estados_spmx b on (b.cod_estado = a.cod_estado) where a.cod_empresa = ? and a.cod_pais = ? and a.status = 1 order by estado", params);
    } ,
    Get_municipios_envios: async function(req,cod_pais, cod_estado){
        let params = [req.user.IdEmpresaCliente, cod_pais, cod_estado];
        return await pool.query("select distinct a.cod_municipio, b.municipio from agentes_sucursales a inner join cat_municipios_spmx b on (b.cod_estado = a.cod_estado and b.cod_municipio = a.cod_municipio) where a.cod_empresa = ? and a.cod_pais = ? and a.cod_estado = ? order by b.municipio", params);
    },
    Get_recibos_por_sucursal: async function(req,cod_agente, cod_sucursal){
        let params = [req.user.IdEmpresaCliente, cod_agente, cod_sucursal];
        return await pool.query("select cod_empresa, cod_agente, cod_sucursal, cod_plantilla, nombre_plantilla, tipo, descripcion_tipo from vw_sucursal_recibos where cod_empresa = ? and cod_agente = ? and cod_sucursal = ?", params);
    },
    Get_recibos_por_remesador: async function(req,cod_remesador){
        let params = [req.user.IdEmpresaCliente, cod_remesador];
        return await pool.query("select cod_empresa, cod_remesador, cod_plantilla, nombre_plantilla, tipo, descripcion_tipo from vw_remesador_recibos where cod_empresa = ? and cod_remesador = ?", params);
    },
    Get_pm_datos_generales: async function(req,cod_pm){
        let params = [req.user.IdEmpresaCliente, cod_pm ];
        return await pool.query("select a.*, date_format(a.fecha_constitucion,'%d/%m/%Y') as fecha_constitucion_formato, date_format(a.fecha_inscripcion,'%d/%m/%Y') as fecha_inscripcion_formato, ifnull(upper(b.nombre),'NO CALIFICADO') as nivel, ifnull(b.color,'gray') as color from pm_datos_generales a left join vw_plantilla_empresa b on (b.cod_empresa = a.cod_empresa and b.id_plantilla = a.plantilla and b.id_nivel = a.nivel_riesgo) where a.cod_empresa = ? and a.cod_pm  = ?", params);
    },
    Get_pm_beneficiario_pm: async function(req,cod_beneficiario){
        let params = [req.user.IdEmpresaCliente, cod_beneficiario ];
        return await pool.query("select *,date_format(fecha_constitucion,'%d/%m/%Y') as fecha_constitucion_formato,date_format(fecha_inscripcion,'%d/%m/%Y') as fecha_inscripcion_formato from clientes_pm  where cod_empresa = ? and cod_beneficiario = ?", params);
    },
    Get_pm_datos_adicionales: async function(req,cod_pm){
        let params = [req.user.IdEmpresaCliente, cod_pm ];
        return await pool.query("select *,date_format(firma_contrato,'%d/%m/%Y') as firma_contrato_formato from pm_datos_adicionales where cod_empresa = ? and cod_pm  = ?", params);
    },
    Get_pm_datos_bancarios: async function(req,cod_pm){
        let params = [req.user.IdEmpresaCliente, cod_pm ];
        return await pool.query("select * from pm_datos_bancarios where cod_empresa = ? and cod_pm  = ?", params);
    },
    Get_vw_pm_datos_bancarios: async function(req,cod_pm){
        let params = [req.user.IdEmpresaCliente, cod_pm ];
        return await pool.query("select * from vw_pm_datos_bancarios where cod_empresa = ? and cod_pm  = ?", params);
    },
    Get_pm_datos_perfil_transaccional: async function(req,cod_pm){
        let params = [req.user.IdEmpresaCliente, cod_pm ];
        return await pool.query("select * from pm_datos_perfil_transaccional where cod_empresa = ? and cod_pm  = ?", params);
    },
    Get_pm_datos_apoderado_legal: async function(req,cod_pm){
        let params = [req.user.IdEmpresaCliente, cod_pm ];
        return await pool.query("select *, date_format(fecha_nacimiento,'%d/%m/%Y') as fecha_nacimiento_formato,date_format(fecha_documento,'%d/%m/%Y')  as fecha_documento_formato,date_format(fecha_inscripcion,'%d/%m/%Y') as fecha_inscripcion_formato, date_format(Fecha_expedicion,'%d/%m/%Y') as Fecha_expedicion_formato, date_format(Fecha_vigencia,'%d/%m/%Y') as Fecha_vigencia_formato from pm_datos_apoderado_legal where cod_empresa = ? and cod_pm  = ?", params);
    }    ,
    Get_pm_datos_accionistas: async function(req,cod_pm){
        let params = [req.user.IdEmpresaCliente, cod_pm ];
        return await pool.query("select *  from vw_pm_datos_accionistas where cod_empresa = ? and cod_pm  = ?", params);
    },
    Get_pm_datos_accionista_pf: async function(req,cod_pm, cod_accionista){
        let params = [req.user.IdEmpresaCliente, cod_pm, cod_accionista ];
        return await pool.query("select *  from pm_datos_accionistas_pf where cod_empresa = ? and cod_pm  = ? and cod_accionista = ?", params);
    },
    Get_pm_datos_accionista_pm: async function(req,cod_pm, cod_accionista){
        let params = [req.user.IdEmpresaCliente, cod_pm, cod_accionista ];
        return await pool.query("select *, date_format(fecha_constitucion,'%d/%m/%Y') as fecha_constitucion_formato  from pm_datos_accionistas_pm where cod_empresa = ? and cod_pm  = ? and cod_accionista = ?", params);
    },
    Get_pm_datos_propietarios_pm: async function(req,cod_pm, cod_accionista){
        let params = [req.user.IdEmpresaCliente, cod_pm, cod_accionista ];
        return await pool.query("select *  from vw_pm_datos_propietarios where cod_empresa = ? and cod_pm  = ? and cod_accionista = ?", params);
    },
    Get_pm_datos_propietario_pm: async function(req,cod_pm, cod_accionista, cod_propietario){
        let params = [req.user.IdEmpresaCliente, cod_pm, cod_accionista, cod_propietario ];
        return await pool.query("select *  from pm_datos_propietario_real_pm where cod_empresa = ? and cod_pm  = ? and cod_accionista = ? and cod_propietario = ?", params);
    },
    Get_pm_beneficiarios_pf: async function(req,cod_pm){
        let params = [req.user.IdEmpresaCliente, cod_pm ];
        return await pool.query("select cod_cliente as id, concat(ifnull(nombre_cliente,''),' ',ifnull(apaterno_cliente,''),' ',ifnull(amaterno_cliente,''),' ') as descripcion from clientes  where cod_empresa = ? and cod_subempresa = ?", params);
    },
    Get_pm_beneficiarios_pm: async function(req,cod_pm){
        let params = [req.user.IdEmpresaCliente, cod_pm ];
        return await pool.query("select cod_beneficiario as id, nombre_comercial as descripcion  from clientes_pm  where cod_empresa = ? and cod_subempresa = ? order by nombre_comercial asc", params);
    },
    Get_pm_beneficiarios_datos_bancarios: async function(req,cod_beneficiario){
        let params = [req.user.IdEmpresaCliente, cod_beneficiario ];
        return await pool.query("select curp, cuenta, clabe, cod_banco, banco from vw_beneficiarios_by_clientes_pm   where cod_empresa = ? and cod_cliente = ?", params);
    },

    Get_Api_Key_webservices: async function(id){
        let params = [id];
        return await pool.query("select apiKey from accesos_webservices  where cod_empresa = ?", params);
    },

    Get_Documentos_cargados: async function(req, id_modulo, id_cliente, tipo_cliente){
        let params = [req.user.IdEmpresaCliente, id_modulo, id_cliente, tipo_cliente];
        var resp = await pool.query("call usp_consulta_documentos (?)", [params]);
        return resp[0];
    },
    Get_Tipo_Documento: async function(){
        return await pool.query("select id, tipo_documento as descripcion from cat_carga_tipo_documento");
    },
    Get_importe_envio_max: async function(cod_empresa){
        let params = [cod_empresa];
        return await pool.query("select parametroValidacion as importe_max, mensaje_usuario as mensaje from empresas_reglas_pld where cod_empresa = ? and idRegla = 80 and idStatus = 1", params);
    },
    Get_anios: function(){
        let years = [];
        var d = new Date();
        var n = d.getFullYear();
        for(var i = 2022; i <=n;i++){
            years.push({id: i, value : i});
        }
        
        return years;
    },
    Asigna_notificacion_correo_empleado: async function(req, cod_empleado, cod_modulo, status){
        let params = [req.user.IdEmpresaCliente, cod_empleado, cod_modulo, status];
        
        try {
            await pool.query("call usp_gestiona_notificacion_correo_empleado (?)", [params])
        } catch (error) {
            console.log(error);   
        }
    },
    Get_tipo_motivos_reverso_pago: async function(){
        return await pool.query("select id, descripcion as descripcion from cat_tipo_reverso_pago");
    },
    Get_tipo_motivos_cancelacion_envio: async function(){
        return await pool.query("select id, descripcion as descripcion from cat_tipo_reverso_pago");
    },
    obtenerCodProveedor: async function(params){
        const query =
          "select ifnull(prefijo_servicio,'') as cod_proveedor, nombre from empresa_remesadores where cod_empresa = ? and cod_remesador = ?";
          let rowsCodRemesador = await pool.query(query, [params.cod_empresa, params.cod_transmisor]);
          return rowsCodRemesador[0];
    },
    Get_parametro_by_empresa: async function(cod_empresa, parametro){
        return await pool.query("select valor from parametros_by_empresa where cod_empresa = ? and llave = ?", [cod_empresa, parametro]);
    },
    Get_tansmisores_logs: async function(req){
        return await pool.query("Select cod_remesador as id, nombre as descripcion from empresa_remesadores where cod_empresa = ? and prefijo_servicio is not null;",[req.user.IdEmpresaCliente] );
    },
    Get_logs_by_transmisor:async function(req ,cve_cobro){
         let params = [req.user.IdEmpresaCliente, cve_cobro];
         return await pool.query("select id, endpoint, tipo, soapxml from bitacora_consulta_mg where cod_empresa= ? and clave_cobro = ? order by fecha_registro asc;", params );
    }


    
    

}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\catalogosBD.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\catalogosBD_pld.js ---

const pool = require("../database");
module.exports = {

    Cat_StatusPLD: async function(){
        return await pool.query("select * from vw_status_pld order by id");
    },
    Cat_tipo_lista_interna: async function(){
        return await pool.query("Select cod_lista as id, descripcion from cat_tipo_lista_interna order by cod_lista");
    },
    Cat_MotivosCancelacion: async function(){
        return await pool.query("select cod_status as id, descripcion as descripcion from cat_status_confirmacion where status = 'C' order by cod_status");
    },
    Cat_momento_validacion : async function(Tiposervicio){
        let params = [Tiposervicio];
        return await pool.query("Select idMomento as id, descripcion from cat_momentovalidacion where cod_esquema = ? order by orden asc", params );
    },
    Get_Remesa: async function( req, cod_transmisor, cod_corresponsal, cve_cobro ){
        return await pool.query("select * from vw_remesas_in where cod_empresa = ? and cod_transmisor = ? and cod_corresponsal = ? and cve_cobro = ? ", [req.user.IdEmpresaCliente, cod_transmisor, cod_corresponsal, cve_cobro]);
    },
    Get_Remesa_out: async function( req, cod_transmisor, cod_corresponsal, cve_cobro ){
        return await pool.query("select * from vw_remesas_out where cod_empresa = ? and cod_transmisor = ? and cod_corresponsal = ? and cve_cobro = ? ", [req.user.IdEmpresaCliente, cod_transmisor, cod_corresponsal, cve_cobro]);
    },
    Get_ReglaPLD: async function(req,idRegla){
        return await pool.query("select * from vw_reglaspld where cod_empresa = ? and idRegla = ? ", [req.user.IdEmpresaCliente, idRegla]);
    },
    Get_RegistroListasNegras: async function(req, id_movimiento,cod_esquema){
        let params = [req.user.IdEmpresaCliente, id_movimiento, cod_esquema];
        console.log(params);
        return await pool.query("select * from vw_remesas_in_compliance where cod_empresa = ? and id_movimiento = ? and cod_esquema = ?", params);
    },
    Get_RegistroListasNegrasPM: async function(req, id_movimiento,cod_esquema){
        let params = [req.user.IdEmpresaCliente, id_movimiento, cod_esquema];
        console.log(params);
        return await pool.query("select * from vw_remesas_out_compliance where cod_empresa = ? and id_movimiento = ? and cod_esquema = ?", params);
    },
    ReportesReg_Cat_tipo_reporte : async function(){
        return await pool.query("select cod_reporte as id, descripcion from reportreg_cat_tipo_reporte");
    },
    ReportesReg_Cat_periodo : async function(){
        return await pool.query("select cod_periodo as id, descripcion from reportreg_cat_periodo");
    },
    ReportesReg_Cat_empresa : async function(req){
        return await pool.query("select no_registro, cp, alias from empresas where idEmpresa = ?", [req.user.IdEmpresaCliente]);
    },
    ReportesReg_Cat_organo_supervisor : async function(){
        return await pool.query("select id_organo as id, descripcion from reportreg_organo_supervisor");
    },
    ReportesReg_Cat_organo_supervisor_for_agentes : async function(desc){
        return await pool.query("select id_organo_sec as id, descripcion from reportreg_organo_supervisor where descripcion = ?", [desc]);
    },
    ReportesReg_Cat_sucursales : async function(req){
        return await pool.query("select a.cod_sucursal, a.nombre from agentes_sucursales a inner join cat_municipios_spmx b on (b.cod_estado = a.cod_estado and b.cod_municipio = a.cod_municipio) where a.cod_empresa= ? order by a.nombre asc", [req.user.IdEmpresaCliente]);
    },
    ReportesReg_Cat_divisa : async function(){
        return await pool.query("select cod_moneda as id, descripcion as descripcion from reportreg_cat_tipo_moneda where status = 1 order by cod_moneda asc");
    },
    ReportesReg_Cat_localidad : async function(req, cod_susursal){
        let params = [req.user.IdEmpresaCliente, cod_susursal];
        return await pool.query("select b.municipio, c.cod_cnvb, a.cp from agentes_sucursales a inner join cat_municipios_spmx b on (b.cod_estado = a.cod_estado and b.cod_municipio = a.cod_municipio) inner join cat_municipios_cnbv c on ( c.cod_edomunicipo =  concat(b.cod_estado, b.cod_municipio)) where a.cod_empresa= ? and cod_sucursal = ?", params);
    },
    ReportesReg_Cat_localidad_estado : async function(cod_estado){
        let params = [cod_estado];
        return await pool.query("select b.municipio, c.cod_cnvb as cod_municipio from cat_municipios_spmx b inner join cat_municipios_cnbv c on ( c.cod_edomunicipo =  concat(b.cod_estado, b.cod_municipio)) where b.cod_estado=  ? ", params);
    },
    ReportesReg_Cat_tipo_operacion : async function(){
        return await pool.query("select cod_tipo_operacion as id, descripcion from reportreg_cat_tipo_operacion");
    },
    ReportesReg_Cat_tipo_nacionalidad : async function(){
        return await pool.query("select '0' as id, 'SE DESCONOCE' as descripcion union all select cod_iso2 as id , pais as descripcion from cat_paises");
    },
    ReportesReg_Cat_tipo_persona : async function(){
        return await pool.query("select cod_tipo_persona as id, descripcion from reportreg_cat_tipo_persona");
    },
    ReportesReg_Cat_instrumento : async function(){
        return await pool.query("select cod_instrumento as id, descripcion from reportreg_cat_instrumento");
    },
    ReportesReg_Cat_actividad_economica: async function(){
        return await pool.query("select cod_actividad as id, descripcion from vw_cat_actividad_economica");
    },
    Get_Reporte_regulatorio: async function(req, cod_reporte){
        let params = [req.user.IdEmpresaCliente, cod_reporte];
        return await pool.query("Select * from vw_reportes_regulatorios where cod_empresa = ? and cod_reporte = ?",params);
    },
    Get_Registos_reporte_regulatorio: async function(req, cod_reporte){
        let params = [req.user.IdEmpresaCliente, cod_reporte];
        return await pool.query("Select * from vw_reportes_regulatorios_registros where cod_empresa = ? and cod_reporte = ?",params);
    },
    Get_Registros_reporte_regulatorio_file: async function(req, cod_reporte){
        let params = [req.user.IdEmpresaCliente, cod_reporte];
        return await pool.query("Select * from vw_reportes_regulatorios_para_archivo where cod_empresa = ? and cod_reporte = ?",params);
    },
    Get_Registro_reporte_regulatorio: async function(req, cod_reporte, folio){
        let params = [req.user.IdEmpresaCliente, cod_reporte, folio];
        return await pool.query("Select * from vw_reportes_regulatorios_registros where cod_empresa = ? and cod_reporte = ? and folio = ?",params);
    },
    Get_Reporte_regulatorio_filtros: async function(req, parametros){
        
        var condiciones = " where cod_empresa = '"+ req.user.IdEmpresaCliente + "'";
        if(parametros.tipo_reporte != ""){
            condiciones = condiciones  + " and cod_tipo_reporte = " + parametros.tipo_reporte;
        }

        if(parametros.status != ""){
            condiciones = condiciones  + " and cod_status = '" + parametros.status + "'";
        }

        if(parametros.status != ""){
            condiciones = condiciones  + " and num_reporte like '%"+ parametros.nombre + "%'";
        }
        
        return await pool.query("Select * from vw_reportes_regulatorios" + condiciones);
    },
    Get_Reporte_agentes_relacionados: async function(req)
    {
        let params = [req.user.IdEmpresaCliente];
        return await pool.query("select * from vw_agentes_sucursales_pld where cod_empresa = ? ", params);
    },
    Get_Registro_persona_bloqueada: async function(req, cod_persona){
        let params = [req.user.IdEmpresaCliente, cod_persona];
        return await pool.query("Select * from vw_persona_bloqueadas where cod_empresa = ? and Folio = ?",params);
    },
    Get_fecha_actualizacion_plb: async function(cod_empresa){
        let params = [cod_empresa];
        let rs = await pool.query("select DATE_FORMAT(max(fecha_status), '%d/%m/%Y') as fecha_actualizacion from lista_interna_pld where cod_empresa = ?",params);
        let fecha = rs[0] == undefined ? "" :  rs[0].fecha_actualizacion;
        return fecha;
    },
    Valida_cliente_para_operar: async function(cod_empresa, cod_cliente){
        let params = [cod_empresa, cod_cliente];
        let rs = await pool.query("call usp_valida_cliente(?);",[params]);
        return rs[0];
    }
    

}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\catalogosBD_pld.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\catalogosFunctions.js ---

const rfcfacil = require("rfc-facil");
const { v4: uuidv4 } = require('uuid');

module.exports = {
    errores: [],
    filtraArrayPorElemento: function(array, key, value) {
        console.log("Entre al filrado de listas");
        console.log(array);
        console.log(key);
        return array.filter(function(e) {
          return e[key] == value;
        });
    },
    obtenRFC_homoclave: function(nombre, apaterno, amaterno, fechaNacimiento){
        let rfc = "";
        fechaNacimiento = String(fechaNacimiento);
        let anio = parseInt(fechaNacimiento.substr(0, 4));
        let mes = parseInt(fechaNacimiento.substr(4, 2));
        let dia = parseInt(fechaNacimiento.substr(6, 2));
        rfc = rfcfacil.forNaturalPerson({
            name: nombre,
            firstLastName: apaterno,
            secondLastName: amaterno,
            day: dia,
            month: mes,
            year: anio
         });
         return rfc;
    },
    obtenRFC: function(nombre, apaterno, amaterno, fechaNacimiento){
        let rfc = "";
        fechaNacimiento = String(fechaNacimiento);
        let anio = parseInt(fechaNacimiento.substr(0, 4));
        let mes = parseInt(fechaNacimiento.substr(4, 2));
        let dia = parseInt(fechaNacimiento.substr(6, 2));
        rfc = rfcfacil.forNaturalPerson({
            name: nombre,
            firstLastName: apaterno,
            secondLastName: amaterno,
            day: dia,
            month: mes,
            year: anio
         });
         return rfc.substr(0,10);
    },
    ConvierteFechaFormato_yyyyMMdd: function (Fecha){
        var valorFecha = Fecha.split("/");
        return valorFecha[2]  + valorFecha[1]  + valorFecha[0];
     },
     ConvierteFechaFormato_yyyyMMdd_to_spanishDate: function (Fecha){
        if(Fecha!=""){
            let anio = parseInt(Fecha.substr(0, 4));
            let mes = parseInt(Fecha.substr(4, 2));
            let dia = parseInt(Fecha.substr(6, 2));
            Fecha = dia + "/" + mes + "/" + anio;
        }
        return Fecha;
     },
    ConvierteFechaFormatoBase: function (Fecha){
       var valorFecha = Fecha.split("/");
       return valorFecha[2] + "-" + valorFecha[1] + "-" + valorFecha[0];
    },
    FormatCurrency (locales, currency, fractionDigits, number) {
        var formatted = new Intl.NumberFormat(locales, {
            style: 'currency',
            currency: currency,
            minimumFractionDigits: fractionDigits
        }).format(number);
        return formatted;
    },
    CleanCadena(value) {
        return value.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toUpperCase();
    },
    QuitarAcentos(cadena){
        const acentos = {'á':'a','é':'e','í':'i','ó':'o','ú':'u','Á':'A','É':'E','Í':'I','Ó':'O','Ú':'U'};
        cadena =  cadena.split('').map( letra => acentos[letra] || letra).join('').toString();	
        cadena = cadena.replace(/["]+/g, '');
        cadena = cadena.replace(/[.]/g, ' ');
        cadena = cadena.replace(/[;]/g, ' ');
        cadena = cadena.replace(/[“]/g, ' ');
        cadena = cadena.replace(/[”]/g, ' ');
        return cadena;
    },
    CleanValue(value, tipo, obligatorio, texto){
        let valor ="";
        if(value==undefined){
            if(tipo=="INT"){
                valor ="0"
            }else{
                valor = "";
            }
        }else{
            if(value!="" && value!=null){
                valor = this.CleanCadena(String(value)).trim();                
                switch (tipo) {
                    case "GENERAL":
                    case "INT":    
                        valor = valor;
                        break;
                    case "FECHA_BASE":
                        valor = this.ConvierteFechaFormatoBase(valor);
                    default:
                        break;
                }
            }else{
                if(obligatorio == true){
                    this.errores.push(texto);
                }else{
                    if(tipo=="INT"){
                        valor ="0"
                    }
                }

            }
        }
        return valor;
    },
    GetErrores(){
        let cadena ="";
        if (this.errores.length>0){
            cadena ="Faltan campos por capturar:\n";
            this.errores.forEach(element => {
                cadena = cadena + element + "\n";
            });    
        }
        return cadena;
    },
    financial(value) {
        return Number.parseFloat(value).toFixed(2);
    },
    Genera_UIDD(){
        return  uuidv4(); 
    },
    roundToTwo(num) {
        return +(Math.round(num + "e+2")  + "e-2");
    },
    numeroALetras : (function() {
            function Unidades(num){
        
                switch(num)
                {
                    case 1: return 'UN';
                    case 2: return 'DOS';
                    case 3: return 'TRES';
                    case 4: return 'CUATRO';
                    case 5: return 'CINCO';
                    case 6: return 'SEIS';
                    case 7: return 'SIETE';
                    case 8: return 'OCHO';
                    case 9: return 'NUEVE';
                }
        
                return '';
            }//Unidades()
        
            function Decenas(num){
        
                let decena = Math.floor(num/10);
                let unidad = num - (decena * 10);
        
                switch(decena)
                {
                    case 1:
                        switch(unidad)
                        {
                            case 0: return 'DIEZ';
                            case 1: return 'ONCE';
                            case 2: return 'DOCE';
                            case 3: return 'TRECE';
                            case 4: return 'CATORCE';
                            case 5: return 'QUINCE';
                            default: return 'DIECI' + Unidades(unidad);
                        }
                    case 2:
                        switch(unidad)
                        {
                            case 0: return 'VEINTE';
                            default: return 'VEINTI' + Unidades(unidad);
                        }
                    case 3: return DecenasY('TREINTA', unidad);
                    case 4: return DecenasY('CUARENTA', unidad);
                    case 5: return DecenasY('CINCUENTA', unidad);
                    case 6: return DecenasY('SESENTA', unidad);
                    case 7: return DecenasY('SETENTA', unidad);
                    case 8: return DecenasY('OCHENTA', unidad);
                    case 9: return DecenasY('NOVENTA', unidad);
                    case 0: return Unidades(unidad);
                }
            }//Unidades()
        
            function DecenasY(strSin, numUnidades) {
                if (numUnidades > 0)
                    return strSin + ' Y ' + Unidades(numUnidades)
        
                return strSin;
            }//DecenasY()
        
            function Centenas(num) {
                let centenas = Math.floor(num / 100);
                let decenas = num - (centenas * 100);
        
                switch(centenas)
                {
                    case 1:
                        if (decenas > 0)
                            return 'CIENTO ' + Decenas(decenas);
                        return 'CIEN';
                    case 2: return 'DOSCIENTOS ' + Decenas(decenas);
                    case 3: return 'TRESCIENTOS ' + Decenas(decenas);
                    case 4: return 'CUATROCIENTOS ' + Decenas(decenas);
                    case 5: return 'QUINIENTOS ' + Decenas(decenas);
                    case 6: return 'SEISCIENTOS ' + Decenas(decenas);
                    case 7: return 'SETECIENTOS ' + Decenas(decenas);
                    case 8: return 'OCHOCIENTOS ' + Decenas(decenas);
                    case 9: return 'NOVECIENTOS ' + Decenas(decenas);
                }
        
                return Decenas(decenas);
            }//Centenas()
        
            function Seccion(num, divisor, strSingular, strPlural) {
                let cientos = Math.floor(num / divisor)
                let resto = num - (cientos * divisor)
        
                let letras = '';
        
                if (cientos > 0)
                    if (cientos > 1)
                        letras = Centenas(cientos) + ' ' + strPlural;
                    else
                        letras = strSingular;
        
                if (resto > 0)
                    letras += '';
        
                return letras;
            }//Seccion()
        
            function Miles(num) {
                let divisor = 1000;
                let cientos = Math.floor(num / divisor)
                let resto = num - (cientos * divisor)
        
                let strMiles = Seccion(num, divisor, 'UN MIL', 'MIL');
                let strCentenas = Centenas(resto);
        
                if(strMiles == '')
                    return strCentenas;
        
                return strMiles + ' ' + strCentenas;
            }//Miles()
        
            function Millones(num) {
                let divisor = 1000000;
                let cientos = Math.floor(num / divisor)
                let resto = num - (cientos * divisor)
        
                let strMillones = Seccion(num, divisor, 'UN MILLON DE', 'MILLONES DE');
                let strMiles = Miles(resto);
        
                if(strMillones == '')
                    return strMiles;
        
                return strMillones + ' ' + strMiles;
            }//Millones()
        
            return function NumeroALetras(num, currency) {
                currency = currency || {};
                let data = {
                    numero: num,
                    enteros: Math.floor(num),
                    centavos: (((Math.round(num * 100)) - (Math.floor(num) * 100))),
                    letrasCentavos: '',
                    letrasMonedaPlural: currency.plural || 'PESOS CHILENOS',//'PESOS', 'Dólares', 'Bolívares', 'etcs'
                    letrasMonedaSingular: currency.singular || 'PESO CHILENO', //'PESO', 'Dólar', 'Bolivar', 'etc'
                    letrasMonedaCentavoPlural: currency.centPlural || '',
                    letrasMonedaCentavoSingular: currency.centSingular || ''
                };
        
                if (data.centavos > 0) {

                    data.letrasCentavos = data.centavos  + '/100 MN';
                  /*  data.letrasCentavos = 'CON ' + (function () {
                            if (data.centavos == 1)
                                return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoSingular;
                            else
                                return Millones(data.centavos) + ' ' + data.letrasMonedaCentavoPlural;
                        })();
                    */
                }else{
                    data.letrasCentavos = '00/100 MN'; 
                };
        
                if(data.enteros == 0)
                    return 'CERO ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
                if (data.enteros == 1)
                    return Millones(data.enteros) + ' ' + data.letrasMonedaSingular + ' ' + data.letrasCentavos;
                else
                    return Millones(data.enteros) + ' ' + data.letrasMonedaPlural + ' ' + data.letrasCentavos;
            };
        
    })(),
    
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\catalogosFunctions.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\config_gral.js ---

const pool = require("../database");
const fn_catalogos = require("../lib/catalogosBD");
module.exports = {
    Get_menu_sistema: async function(req, IdEmpresa, IdPerfil, IdAgenteRelacionado){        
        let menu = [];
        let submenu = [];
        let submenu_sec = [];
        let accesosDirectos = [];
        let accesosRestringidos = [];
        const ResultMenu = await fn_catalogos.Cat_perfil_modulos(IdEmpresa, IdPerfil);
        const ResultPermisos = await pool.query("select PagoRemesa ,EnvioRemesa from agentes_permisos where cod_empresa= ? and cod_agente = ?",[IdEmpresa, IdAgenteRelacionado]);
        if(ResultPermisos.length>0){
        if(ResultPermisos[0].EnvioRemesa == 0){ accesosRestringidos.push(2)};
        if(ResultPermisos[0].PagoRemesa == 0){ accesosRestringidos.push(3)};
        } 
        ResultMenu.forEach(element => {
            if(element.id_padre == 0 && element.id_menu == 1){
            let hjs = [];
            ResultMenu.forEach(hijos => {
                if(hijos.id_padre == element.id_opcion && hijos.id_menu == 1){
                if(!accesosRestringidos.find(x=>x== hijos.id_opcion)){
                    if(hijos.acceso_directo == 1)
                    {
                    accesosDirectos.push({nombre: hijos.nombre, imagen: hijos.imagen_acceso_directo, pagina:hijos.pagina});
                    }
                    
                    hjs.push({nombre: hijos.nombre, imagen: hijos.imagen, pagina:hijos.pagina}); 
                    }
                }
            });
            menu.push({nombre: element.nombre, imagen:element.imagen, hijos:hjs});
            hjs = [];
            }

            if(element.id_padre == 0 && element.id_menu == 2){
            submenu.push({nombre: element.nombre, imagen:element.imagen, pagina: element.pagina, descripcion : element.descripcion});
            }

            if(element.id_padre == 0 && element.id_menu == 3){
            submenu_sec.push({nombre: element.nombre, imagen:element.imagen, pagina: element.pagina, descripcion : element.descripcion});
            }

        });

        req.session.Menu = menu;
        req.session.submenu = submenu;
        req.session.submenu_sec = submenu_sec;
        req.session.accesosDirectos = accesosDirectos;
    },
    Get_acceso_servicios: async function(req,id_modulo)
    {
        let params = [req.user.IdEmpresaCliente, id_modulo];
        console.log(params);
        var resp = await pool.query("call usp_consulta_acceso_servicios (?)", [params]);
        console.log("peticion:");
        console.log(resp[0]);
        let rs = resp[0];
        return rs[0].acceso;
    }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\config_gral.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\correo.js ---

const nodemailer = require("nodemailer");
const pool = require("../database");

module.exports  = {
    async sendEmail(cod_empresa, asunto, mensaje, destinatarios){
      //** Obtenemos as credenciales de la empresa */
      let emailEmpresa = await pool.query("call usp_obtener_credenciales_email(?)",[cod_empresa]);
      if (emailEmpresa[0][0].code == "99")
      {
        console.log("No hay correo registrado para la empresa");
        return "";
      }  

        let data = {
          usuario : emailEmpresa[0][0].email, // "transferdirecto@compliance-itech.com",
          pwd : emailEmpresa[0][0].password,  // "Tr@nsferD2022",
          host : "smtpout.secureserver.net",
          port : 465
         };

        let transporter = nodemailer.createTransport({
            host: data.host,
            port: data.port,
            secure: true, 
            auth: {
              user: data.usuario, 
              pass: data.pwd, 
            },
            tls: {
              rejectUnauthorized: false
            }
          });

          let info = await transporter.sendMail({
            from: `"Compliance Itech" <${emailEmpresa[0][0].email}>`, // sender address
            to: destinatarios, // list of receivers
            subject: asunto, // Subject line
            text: mensaje, // plain text body
            html: `<b>${mensaje}</b>`, // html body
          });
        
          console.log("Message sent: %s", info.messageId);
    },
    async obtenerEmails(cod_empresa, modulo){
        let params = [
            cod_empresa,
            modulo
        ];
        let resultados = await pool.query("call get_correos_empleado_x_modulo (?,?);",params);
        let r = resultados[0];
        if (r.length == 0){
            console.log("No hay emails registrados");
            return "";
        }

        let emails = r.map(function(obj){ return obj.email}).join(', ');
        console.log(emails);
        
        return emails;
    }
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\correo.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\credentialsBD.js ---

const pool = require("../database");
module.exports = {
    Get_Credenciales_Listas: async function(req){
        let params = [req.user.IdEmpresaCliente];
        console.log("listasnegras cred" + params);
        return await pool.query("Select user_listas, password_listas from empresa_datosadicionales where cod_empresa = ?", params);
    },
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\credentialsBD.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\dao-caja.js ---

const pool = require("../database");
module.exports = {
    consulta_movimiento_caja: async function(rq){
        let params = [
            rq.cod_empresa,
            rq.cve_cobro
        ];
        console.log(params);
        let sp = "usp_caja_consulta_movimiento";
        if(rq.tipo_movimiento =="ENV"){
            sp = "usp_caja_consulta_movimiento_out"
        }
        let rs = await pool.query("call "+ sp + "(?)", [params]);
        return rs[0];
    },
    registra_movimiento_caja: async function(rq, reqlakin, idUsuario){
        let params = [
            rq.cod_empresa,
            reqlakin.folio,
            reqlakin.operacion,
            rq.cve_cobro,
            rq.montoPago,
            idUsuario,
            rq.cod_sucursal,
            rq.tipo_movimiento
        ];
        let sp = "usp_caja_registra_movimiento_in";
        if(rq.tipo_movimiento =="ENV"){
            sp = "usp_caja_registra_movimiento_out"
        }
        console.log(params);
        let rs = await pool.query("call "+ sp + "(?)", [params]);
        return rs[0];
    },
    confirma_movimiento_caja: async function(rq){
        let params = [
            rq.cod_empresa,
            rq.cve_cobro,
            rq.cod_sucursal,
            rq.id_usuario
        ];
        let sp = "usp_caja_confirmar_movimiento_in";
        if(rq.tipo_movimiento =="ENV"){
            sp = "usp_caja_confirmar_movimiento_out"
        }
        console.log(params);
        let rs = await pool.query("call "+ sp + "(?)", [params]);
        return rs[0];
    },
    desconfirma_movimiento_caja: async function(rq){
        let params = [
            rq.cod_empresa,
            rq.cve_cobro,
            rq.cod_sucursal,
            rq.id_usuario
        ];
        let sp = "usp_caja_desconfirmar_movimiento_in";
        if(rq.tipo_movimiento =="ENV"){
            sp = "usp_caja_desconfirmar_movimiento_out"
        }
        console.log(params);
        let rs = await pool.query("call "+ sp + "(?)", [params]);
        return rs[0];
    },
    registra_despago_caja: async function(rq){
        let params = [
            rq.cod_empresa,
            rq.cve_cobro,
            rq.montoPago,
            rq.id_usuario,
            rq.cod_sucursal,
        ];
        console.log("registra_despago_caja  BD");
        console.log(params);
        let sp = "usp_caja_depago_movimiento";
        let rs = await pool.query("call "+ sp + "(?)", [params]);
        return rs[0];
    },
    registra_cancelacion_caja: async function(rq){
        let params = [
            rq.cod_empresa,
            rq.cve_cobro,
            rq.montoPago,
            rq.id_usuario,
            rq.cod_sucursal,
        ];
        console.log("registra_cancelacion_caja  BD");
        console.log(params);
        let sp = "usp_caja_cancelacion_movimiento";
        let rs = await pool.query("call "+ sp + "(?)", [params]);
        return rs[0];
    }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\dao-caja.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\excell-controller.js ---

const readXlsxFile = require("read-excel-file/node");

const upload = async (req, res) => {
  try {
    if (req.file == undefined) {
      return res.status(400).send("Please upload an excel file!");
    }
    let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
    readXlsxFile(path).then((rows) => {
      // skip header
      rows.shift();

      let datosExcel = [];

      rows.forEach((row) => {
        let dato = {
          id: row[0],
          descripcion: row[1],
          nivel: row[2] 
        };
        datosExcel.push(dato);
      });
    });
  } catch (error) {
    console.log(error);
    res.status(500).send({
      message: "Could not upload the file: " + req.file.originalname,
    });
  }
};

module.exports = {
    upload
  };

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\excell-controller.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\exportToExcel.js ---

const ExcelJS = require('exceljs');

// Función para exportar a Excel
async function exportToExcel(res, filename, headers, data) {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('Sheet 1');
  
  // Agregar las cabeceras al archivo Excel
  worksheet.addRow(headers);

  // Agregar los datos al archivo Excel
  data.forEach(item => {
    const row = headers.map(header => item[header.toLowerCase()] || ''); // Mapear los datos según las cabeceras
    worksheet.addRow(row);
  });

  // Configurar los encabezados para la respuesta de descarga
  res.setHeader('Content-Disposition', `attachment; filename="${filename}.xlsx"`);
  res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');

  // Escribir el archivo Excel en la respuesta
  await workbook.xlsx.write(res);
  res.end();
}

module.exports = { exportToExcel };

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\exportToExcel.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\funciones-oe.js ---

module.exports = {
    ObtenEquivalenciasINE: function(cve_cobro, documento, tipoDoc ){
    
        let idDocumento = "";
        let pasaporte = "X";
        let greenCard = "X";
        let nss = "X";
        let matriculaConsultar = "X";
        let ife = "X";
        let licencia = "X";

        switch (tipoDoc) {
            case "1":
                idDocumento = "1";
                ife = documento;
                greenCard = documento;
                break;
            case "2":
                idDocumento = "2";
                pasaporte = documento;
                break;
            case "3":
                    idDocumento = "379";
                    matriculaConsultar = documento;
                    break;
            case "4":
                idDocumento = "380";
                matriculaConsultar = documento;
                break;
            case "7":    
                    idDocumento = "5";
                    matriculaConsultar = documento;
                    break;
            default:
                break;
        }


        let  request =  {
            idRemesa: cve_cobro,
            idDocumento: idDocumento,
            pasaporte: pasaporte,
            greenCard: greenCard,
            nss: nss,
            matriculaConsultar: matriculaConsultar,
            ife: ife,
            licencia: licencia
        }
        console.log(request);
        return request;
    }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\funciones-oe.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\googleDrive.js ---

const stream = require('stream');
const {google} = require('googleapis');

module.exports = {

    deleteFile : async (IdFile, GoogleKeyAccountClient) => {
        const service = google.drive({
            version: GoogleKeyAccountClient.version,
            auth: new google.auth.GoogleAuth({
                keyFile: GoogleKeyAccountClient.keyFilePath,
                scopes: GoogleKeyAccountClient.scopes
            })
        });

        
        try {
            const file = await service.files.delete({
                fileId: IdFile,
            });    
        } catch (err) {
            console.log(err);
            return "Error: " +  err;
        }
    },
    uploadFile : async (fileObject, GoogleKeyAccountClient) => {
        console.log('Cargando archivo...');
        const bufferStream = new stream.PassThrough();
        bufferStream.end(fileObject.buffer);

        const {
            data
        } = await google.drive({
            version: GoogleKeyAccountClient.version,
            auth: new google.auth.GoogleAuth({
                keyFile: GoogleKeyAccountClient.keyFilePath,
                scopes: GoogleKeyAccountClient.scopes
            })
        }).files.create({
            media: {
                mimeType: fileObject.mimeType,
                body: bufferStream,
            },
            requestBody: {
                name: fileObject.originalname,
                parents: GoogleKeyAccountClient.parents,
            },
            fields: 'id,name',
        });
        const {
            datPerm
        } = await google.drive({
            version: GoogleKeyAccountClient.version,
            auth: new google.auth.GoogleAuth({
                keyFile: GoogleKeyAccountClient.keyFilePath,
                scopes: [GoogleKeyAccountClient.scopes]
            })
        }).permissions.create({
            fileId: data.id,
            requestBody: {
                role: 'reader',
                type: 'anyone'
            }
        });
        // console.log('permision created: ');
        // console.log(datPerm);
        const result = await google.drive({
            version: GoogleKeyAccountClient.version,
            auth: new google.auth.GoogleAuth({
                keyFile: GoogleKeyAccountClient.keyFilePath,
                scopes: [GoogleKeyAccountClient.scopes]
            })
        }).files.get({
            fileId: data.id,
            fields: 'webViewLink, webContentLink',
        });
        
        // console.log(`Links: Download: ${result.data.webContentLink} View: ${result.data.webViewLink}`);
        // console.log(`Uploaded file ${data.name} ${data.id}`);
        return {
            filename: data.name,
            fileId: data.id,
            ViewLink: result.data.webViewLink,
            DownloadLink : result.data.webContentLink
        };
    },

    createFolder : async (nameFolder, GoogleKeyAccountClient) => {
        console.log('Create Folder...');
        console.log(GoogleKeyAccountClient);
        const service = google.drive({
            version: GoogleKeyAccountClient.version,
            auth: new google.auth.GoogleAuth({
                keyFile: GoogleKeyAccountClient.keyFilePath,
                scopes: GoogleKeyAccountClient.scopes
            })
        });

        const fileMetadata = {
            'name': nameFolder,
            'mimeType': 'application/vnd.google-apps.folder',
            "parents": GoogleKeyAccountClient.parents, // Google Drive folder id
        };
        try {
            const file = await service.files.create({
            resource: fileMetadata,
            fields: 'id',
            });    
            console.log('Folder Id:', file.data.id);
            return file.data.id;
        } catch (err) {
            console.log(err);
            return "Error: " +  err;
        }
    }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\googleDrive.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\handlebars.js ---


--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\handlebars.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\jwt.js ---

const jwt = require('jsonwebtoken');
const session = require("express-session");
module.exports = {
    generateJwt(user) {
        const SECRET_KEY = process.env.JWT_SECRET_KEY; // Se recomienda almacenar la clave secreta en un archivo .env    
        const { exp, ...payload } = user;
        return jwt.sign(payload, SECRET_KEY, { expiresIn: '1h' });  // Aquí definimos que el JWT expire en 1 hora
    }
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\jwt.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\passport.js ---

const passport = require("passport");
const LocalStrategy = require("passport-local").Strategy;
const pool = require("../database");
const bcrypt = require('bcryptjs');
const jwthdl = require('../lib/jwt');


passport.use('local.signin', new LocalStrategy({
  usernameField : "txtusuario",
  passwordField : "txtpassword",
  passReqToCallback: true
}, async (req, username, password, done)=>{
     //Llamada a la Base de datos
     let mensaje_salida = "";
     let acceso = 1;
     let empresa = process.env.EMPRESA_CODE;
    let ip = req.header('x-forwarded-for') || req.socket.remoteAddress;
    if( empresa==""){
        mensaje_salida = "El campo empresa es obligatorio";
        done(null, false, req.flash("message", mensaje_salida));
    }else{
 
      const result = await pool.query("call usp_valida_usuario_ad (?,?)", [username, empresa ]);
      const r = result[0];
      if(result[0]=="")
      {
        mensaje_salida = "El usuario y/o el password son incorrectos, intenta de nuevo";
        acceso = 0;
      };
    
    if(acceso==1){
      if(r[0].status_empresa == 0){
        mensaje_salida = "El sistema se encuentra inhabilitado por el momento";
        acceso = 0;
      }
    };

    if(acceso==1){
      if(r[0].id_perfil != 0){
        if(empresa != r[0].alias){
          mensaje_salida = "Usuario no válido para la empresa indicada";
          acceso = 0;
        }
      }
    };

    if(acceso==1){
     if(r[0].status_agente ==0){
      mensaje_salida = "El agente " + result[0].agente + " se encuentra inhabilitado.";
      acceso = 0;
     }
    };
    if(acceso==1){
     if(r[0].status_sucursal==0){
      mensaje_salida = "La sucursal " + result[0].sucursal + " se encuentra inhabilitada.";
      acceso = 0;
     }
    };
    if(acceso==1){
     if(r[0].status_usuario==0){
       mensaje_salida = "El usuario se encuentra inactivo, por favor contacta al administrador";
       acceso = 0;
     }
    };
    if(acceso==1){
      if(r[0].status_empleado==0){
        mensaje_salida = "El empleado asociado al usuario se encuentra inactivo, por favor contacta al administrador";
        acceso = 0;
      }
    };
     
  
     if(acceso==1){

      const user  = {
        IdUser:r[0].cod_usuario,
        Nombre:r[0].nombre_usuario,
        IdPerfil: r[0].id_perfil,
        Perfil: r[0].perfil,
        cod_sucursal: r[0].cod_sucursal,
        sucursal: r[0].sucursal,
        IdEmpresa: r[0].cod_empresa,
        Empresa: r[0].empresa,
        IdAgenteRelacionado:r[0].cod_agente,
        AgenteRelacionado:r[0].agente,
        IdEmpresaCliente : "--",
        IdPerfilCliente : "--",
        EmpresaCliente : "--",
        IsMoral : r[0].isMoral,
        IdPerfilEquivalente: r[0].id_perfil_equivalente,
        usuario: r[0].usuario,
        usuarioAD: r[0].usuarioAD,
        cod_sucursal_externo: r[0].cod_sucursal_externo,

     }
     const token = jwthdl.generateJwt(user);  // Aquí se genera el JWT usando la función
     
      done(null, user, req.flash("Bienvenido"));
     }else{
      done(null, false, req.flash("message", mensaje_salida));
     }
}
}));


passport.serializeUser(function(user, done) {
  done(null, user);
});
  
passport.deserializeUser(function(user, done) {
  done(null, user);
});

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\passport.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\plantillas-correo.js ---

const email = require("../lib/correo");
const bitacora = require("../lib/bitacoras");

module.exports  = {
    async correo_cumplimiento_pld(paramsOrder, mensaje){
        try {

            //LOG console.log('+++++++++++++++++++++++ Email  +++++++++++++++++++++++');
        
            let email_destinatarios = await email.obtenerEmails(paramsOrder.cod_empresa, 'PLD');
            if (email_destinatarios.length > 0) {
                let email_asunto = '(' + paramsOrder.cod_empresa + `) Revisión de Orden: ${paramsOrder.cve_cobro} por Reglas PLD`;
                let msg = mensaje.map(function (obj) {
                    return "<br> - Regla: " + obj.code + " " + obj.descripcion + " " + (obj.aplicaBloqueo == 1 ? '[ BLOQUEO ]' : '[ ALERTA ]')
                });
                let email_mensaje = `La clave de cobro: ${paramsOrder.cve_cobro}, fue retenida por PLD: <br/ > Msg: ${JSON.stringify(msg)}`;
        
                //LOG console.log("enviando correos...");
        
                await email.sendEmail(paramsOrder.cod_empresa, email_asunto, email_mensaje, email_destinatarios);
                /* Registramos en bitacora */
                bitacora.cod_cliente = paramsOrder.cod_ciente;
                bitacora.cod_corresponsal = paramsOrder.cod_corresponsal;
                bitacora.cod_empresa = paramsOrder.cod_empresa;
                bitacora.cod_transmisor = paramsOrder.cod_transmisor;
                bitacora.cve_cobro = paramsOrder.cve_cobro;
                bitacora.id_usuario = paramsOrder.id_usuario;
                bitacora.observaciones = `Correo enviado: ${email_destinatarios} ${email_mensaje}`;
                bitacora.Registra_MovimientoRemesa();
                /* Registramos en bitacora */
            }
        } catch (err) {
            console.log(err);
        }
    }
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\plantillas-correo.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\reglas_pld_in.js ---

const pool = require("../database");
const express = require("express");
const fnBit = require("../lib/bitacoras");
const apirest = require("../lib/apis-rest");
const funciones = require("../lib/catalogosFunctions");
const correoPlantilla = require("../lib/plantillas-correo");
const { fn } = require("moment");
const fn_provedores_listas_negras = require("../lib/Apis/Listas");

module.exports = {
    code : "",
    msg : "",
    accion : 0, // 0 - no hace nada, 1 - debe redireccionar a pagina principal, 2 - cierra sesion
    pregunta1 : 0,
    pregunta2 : 0,
    pregunta3 : 0,
    actividad_economica :"",
    importe_envio : "",
    nacionalidad : "",
    aplicacion_reglas_pld: async function(req, IdMomentoValidacion, cod_transmisor, cod_corresponsal, cve_cobro, cve_cliente){
        let resultadoPLD = [];
        let params = [req.user.IdEmpresaCliente, IdMomentoValidacion];
        var reglas = await pool.query("Select idRegla, mensaje_usuario, parametroValidacion, tipo_parametro, descripcion_regla, aplica_bloqueo from vw_empresas_reglas_pld where cod_empresa= ? and idMomento = ? and  idstatus = 1 and tipo = 'E' and  cod_esquema = 'P'", params);
        if(reglas.length > 0){
            console.log("if 1");
                for (var i = 0; i < reglas.length; i++) {
                    this.code = "";
                    console.log(reglas[i].idRegla);
                    switch (reglas[i].idRegla) {
                        case 5 : // reglas de cumplimiento
                        console.log("if 2");
                            let resultB = await pool.query("Select count(*) as existeRegla from remesas_in_bloqueadas where cod_empresa = ? and cod_transmisor = ?  and cod_corresponsal = ? and cve_cobro = ? and status_bloqueo = '09' and id_regla_aplicada = 5 ", [req.user.IdEmpresaCliente, cod_transmisor, cod_corresponsal, cve_cobro]);
                            let existeDato = resultB[0].existeRegla;
                            
                            if (existeDato == 0 ){
                                console.log("if 3");
                                if(cve_cliente!="0"){
                                    console.log("if 4");
                                    let rfc = "";
                                    var cliente = await pool.query("select apaterno_cliente, ifnull(amaterno_cliente,'') as amaterno_cliente, nombre_cliente as nombre, date_format(fecha_nacimiento,'%Y%m%d') as fecha_nacimiento, ifnull(rfc,'') as rfc from clientes where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cve_cliente]);
                                    rfc = cliente[0].rfc;
                                    apaterno = cliente[0].apaterno_cliente;
                                    amaterno = cliente[0].amaterno_cliente;
                                    nombre = cliente[0].nombre;
                                    fechaNacimiento = cliente[0].fecha_nacimiento;
                                    if(rfc ==""){
                                        rfc  = funciones.obtenRFC(nombre, apaterno, amaterno, fechaNacimiento );
                                        console.log("rfc generado: " + rfc);
                                    }

                                    let resplt = await this.listas_negras_two(req, apaterno, amaterno, nombre , rfc, cve_cobro, cve_cliente);
                                    console.log("resplt");
                                    console.log(resplt);
                                    if(this.code == "00")
                                    {
                                        console.log("if 5");
                                        console.log("Consulta cumplimiento valida");
                                        /* Registramos en bitacora */
                                        fnBit.cod_empresa = req.user.IdEmpresaCliente;
                                        fnBit.cod_transmisor = cod_transmisor;
                                        fnBit.cod_corresponsal = cod_corresponsal;
                                        fnBit.cve_cobro = cve_cobro;
                                        fnBit.observaciones = this.msg  + ' - CONSULTA REALIZADA EN '+ req.user.sucursal;
                                        fnBit.id_usuario = req.user.IdUser;
                                        fnBit.cod_empresa_usuario = req.user.IdEmpresa;
                                        console.log("Consulta cumplimiento valida 2");
                                        fnBit.Registra_MovimientoRemesa();
                                        console.log("Consulta cumplimiento valida 3");
                                        /* Registramos en bitacora */       
                                    }else if (this.code=="01"){
                                        console.log("if 6");
                                        fnBit.id_usuario = req.user.IdUser;
                                        fnBit.cod_empresa_usuario = req.user.IdEmpresa;
                                        fnBit.cod_empresa = req.user.IdEmpresaCliente;
                                        var ltfinal = await this.bloqueo_remesa_two(req.user.IdEmpresaCliente, cod_transmisor, cod_corresponsal, cve_cobro, reglas[i].idRegla,  reglas[i].descripcion_regla,"08","","", resplt); 
    
                                        this.accion = 1;
                                        this.msg = reglas[i].mensaje_usuario;

                                        let lisN = {
                                            code: 5,
                                            message: "COINCIDENCIA LISTAS NEGRAS",
                                            cod_beneficiario: cve_cliente,
                                            aplicaBloqueo: reglas[i].aplica_bloqueo,
                                            descripcion: "COINCIDENCIA LISTAS NEGRAS"
                                        }
                                        resultadoPLD.push(lisN);

                                    }
                                }else {
                                    this.code = "01";
                                    this.msg = "No es posible validar al cliente, falta proporcionar clave de cliente";
                                }
                            }else{
                                this.code = "00";
                                this.msg = "";
                            }
                            break;
                        case 30 : // reglas de cumplimiento
                            let cont = 0
                            if(this.pregunta1!=0){ cont ++; }
                            if(this.pregunta2!=0){ cont ++; }
                            if(this.pregunta3!=0){ cont ++; }
                           
                            if(cont < parseInt(reglas[i].parametroValidacion)){
                                this.code = "01";
                                this.msg = reglas[i].mensaje_usuario;
                                break;    
                            }else{
                                this.code = "00";
                                this.msg = "";
                            }
                            break;
                        default:
                            break;
                    }
                  
                    if(this.code == "01"){
                        break;    
                    } 
                };  
        }else{
            this.code = "00"
            this.msg = ""
        }
       if (this.code == "00" || this.code == "99"){
            let parametros = [
                req.user.IdEmpresaCliente, 
                IdMomentoValidacion,
                cod_transmisor,
                cod_corresponsal,
                cve_cobro,
                cve_cliente,
                req.user.IdUser,
                req.user.IdEmpresa,
                this.actividad_economica
            ]; 
            console.log(parametros);
            var reglas = await pool.query("call usp_validacion_reglasPLD_IN(?,?,?,?,?,?,?,?,?)", parametros);

            if(reglas.length==2){
                let r = reglas[0]; 
                this.code = r[0].code;
                this.msg =  r[0].mensaje_usuario;
                this.accion = r[0].accion;
                
                if(r[0].code!=0){
                    let lisN2 = {
                        code: r[0].id_regla_aplicada,
                        message: r[0].mensaje_usuario,
                        cod_beneficiario: cve_cliente,
                        aplicaBloqueo: r[0].aplica_bloqueo,
                        descripcion: r[0].mensaje_usuario
                    }
                    resultadoPLD.push(lisN2);
                }
            }
        }else{
            console.log("Consulta cumplimiento valida en else");
                /* Registramos en bitacora */
                fnBit.cod_empresa = req.user.IdEmpresaCliente;
                fnBit.cod_transmisor = cod_transmisor;
                fnBit.cod_corresponsal = cod_corresponsal;
                fnBit.cve_cobro = cve_cobro;
                fnBit.observaciones = this.msg  + ' - CONSULTA REALIZADA EN '+ req.user.sucursal;
                fnBit.id_usuario = req.user.IdUser;
                fnBit.cod_empresa_usuario = req.user.IdEmpresa;
                fnBit.Registra_MovimientoRemesa();
                /* Registramos en bitacora */
            
            
        
            }
        console.log("lista de errores PLD");
        console.log(resultadoPLD.length);
        if (resultadoPLD.length>0){
            let request ={
                cod_empresa : req.user.IdEmpresaCliente,
                cod_transmisor : cod_transmisor,
                cod_corresponsal : cod_corresponsal,
                cve_cobro : cve_cobro,
                id_usuario : req.user.IdUser,
                cod_empresa_usuario : req.user.IdEmpresaCliente,
                id_usuario : req.user.IdUser,
                cod_ciente: cve_cliente
            } 
            await correoPlantilla.correo_cumplimiento_pld(request, resultadoPLD );
        }
        return;
    },
    aplicacion_reglas_pld_out: async function(req, IdMomentoValidacion, cve_cliente){
        let params = [req.user.IdEmpresaCliente, IdMomentoValidacion];
        var reglas = await pool.query("Select idRegla,num_regla, mensaje_usuario, parametroValidacion, tipo_parametro, descripcion_regla from vw_empresas_reglas_pld where cod_empresa= ? and idMomento = ? and  idstatus = 1 and tipo = 'E' and  cod_esquema = 'E'", params);
        console.log(params);
        console.log("obtengo las reglas");
        console.log(reglas);
        if(reglas.length > 0){
            console.log("if 1");
                for (var i = 0; i < reglas.length; i++) {
                    this.code = "";
                    console.log(reglas[i].idRegla);
                    switch (reglas[i].num_regla) {
                        case 5 : // reglas de cumplimiento
                        console.log("if 2");
                            let resultB = await pool.query("Select count(*) as existeRegla from clientes_bloqueados where cod_empresa = ? and cod_cliente = ?  and status_bloqueo = '09' and id_regla_aplicada = 5 ", [req.user.IdEmpresaCliente, cve_cliente]);
                            let existeDato = resultB[0].existeRegla;
                            
                            if (existeDato == 0 ){
                                console.log("if 3");
                                if(cve_cliente!="0"){
                                    console.log("if 4");
                                    let rfc = "";
                                    var cliente = await pool.query("select apaterno_cliente, ifnull(amaterno_cliente,'') as amaterno_cliente, nombre_cliente as nombre, date_format(fecha_nacimiento,'%Y%m%d') as fecha_nacimiento, ifnull(rfc,'') as rfc from clientes where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cve_cliente]);
                                    
                                    rfc = cliente[0].rfc;
                                    apaterno = cliente[0].apaterno_cliente;
                                    amaterno = cliente[0].amaterno_cliente;
                                    nombre = cliente[0].nombre;
                                    fechaNacimiento = cliente[0].fecha_nacimiento;
                                    if(rfc ==""){    
                                        rfc  = funciones.obtenRFC(nombre, apaterno, amaterno, fechaNacimiento );
                                    }

                                    parametrosBusqueda = {
                                        busqueda: "GIRO",
                                        tipo_persona : "PF",
                                        nombre :  nombre,
                                        apaterno : apaterno,
                                        amaterno : amaterno,
                                        fechanacimientoCon :  fechaNacimiento,
                                        fechanacimientoyyyyMMdd : fechaNacimiento, //req.body.txtFechaNacimiento == "" ? "" : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaNacimiento),
                                        fechanacimiento : req.body.txtFechaNacimiento,
                                        rfc : rfc,
                                        curp : "",
                                        rfcPM : "",
                                        nombrePM : ""
                                      };
                            

                                    //let resplt = await this.listas_negras(req, apaterno + " " + amaterno, nombre , rfc);
                                    let resplt = await fn_provedores_listas_negras.validaListasNegras(parametrosBusqueda, req.user.IdEmpresaCliente,0);
                                    this.code = resplt.code
                                    
                                    if(this.code == "00")
                                    {
                                        console.log("if 5");
                                    
                                        /* Registramos en bitacora */
                                        fnBit.cod_empresa = req.user.IdEmpresaCliente;
                                        
                                        fnBit.cod_cliente = cve_cliente;
                                        fnBit.observaciones = this.msg  + ' - CONSULTA REALIZADA EN '+ req.user.sucursal;
                                        fnBit.id_usuario = req.user.IdUser;
                                        fnBit.cod_empresa_usuario = req.user.IdEmpresa;
                                        console.log("Consulta cumplimiento valida 2");
                                        fnBit.Registra_MovimientoCliente();
                                        console.log("Consulta cumplimiento valida 3");
                                        /* Registramos en bitacora */       
                                    }else if (this.code=="01"){
                                        console.log("if 6");
                                        fnBit.id_usuario = req.user.IdUser;
                                        fnBit.cod_empresa_usuario = req.user.IdEmpresa;
                                        fnBit.cod_empresa = req.user.IdEmpresaCliente;
                                        var idMovimiento = await this.bloqueo_cliente(req.user.IdEmpresaCliente, "E", reglas[i].idRegla,  reglas[i].descripcion_regla,"08","","", cve_cliente); 
                                        await fnBit.Registra_CoincidenciaCompliance(idMovimiento, resplt.data.datos,"E");
                                        this.accion = 1;
                                        this.msg = reglas[i].mensaje_usuario;
                                    }else{
                                        fnBit.id_usuario = req.user.IdUser;
                                        fnBit.cod_empresa_usuario = req.user.IdEmpresa;
                                        fnBit.cod_empresa = req.user.IdEmpresaCliente;
                                        this.msg = resplt.msg;
                                    }
                                }else {
                                    this.code = "01";
                                    this.msg = "No es posible validar al cliente, falta proporcionar clave de cliente";
                                }
                            }else{
                                this.code = "00";
                                this.msg = "";
                            }
                            break;
                        case 30 : // reglas de cumplimiento
                            let cont = 0
                            if(this.pregunta1!=0){ cont ++; }
                            if(this.pregunta2!=0){ cont ++; }
                            if(this.pregunta3!=0){ cont ++; }
                           
                            if(cont < parseInt(reglas[i].parametroValidacion)){
                                this.code = "01";
                                this.msg = reglas[i].mensaje_usuario;
                                break;    
                            }else{
                                this.code = "00";
                                this.msg = "";
                            }
                            break;
                        default:
                            break;
                    }
                  
                    if(this.code == "01"){
                        break;    
                    } 
                };  
        }else{
            this.code = "00"
            this.msg = ""
        }
       if (this.code == "00" || this.code == "99"){
            let parametros = [
                req.user.IdEmpresaCliente, 
                IdMomentoValidacion,
                cve_cliente,
                req.user.IdUser,
                req.user.IdEmpresa,
                this.importe_envio,
                this.nacionalidad
            ]; 
            console.log(parametros);
            var reglas = await pool.query("call usp_validacion_reglasPLD_OUT (?)", [parametros]);

            if(reglas.length==2){
                let r = reglas[0]; 
                this.code = r[0].code;
                this.msg =  r[0].mensaje_usuario;
                this.accion = r[0].accion;
            }
        }else{
            console.log("Consulta cumplimiento valida en else");
                /* Registramos en bitacora */
                fnBit.cod_empresa = req.user.IdEmpresaCliente;
                fnBit.observaciones = this.msg  + ' - CONSULTA REALIZADA EN '+ req.user.sucursal;
                fnBit.id_usuario = req.user.IdUser;
                fnBit.cod_empresa_usuario = req.user.IdEmpresa;
                fnBit.cod_cliente = cve_cliente;
                fnBit.Registra_MovimientoCliente();
                /* Registramos en bitacora */
            
            
        }
        return;
    },
    bloqueo_remesa: async function(pCodEmpresa, pcod_transmisor,pcod_corresponsal, pcve_cobro, pIDregla, pdescripcion_regla, pstatus_confirmacion, p1,p2, pcve_cliente){
        let params = [
            pCodEmpresa, 
            pcod_transmisor,
            pcod_corresponsal, 
            pcve_cobro, 
            pIDregla, 
            pdescripcion_regla, 
            pstatus_confirmacion, 
            p1, 
            p2, 
            pcve_cliente
        ];
        await fnBit.Registra_CoincidenciaCompliance_two(r, "P");
      
        let id_movimiento_registrado = 0;
        await pool.query("call usp_bloquea_remesa_in(?)", [params]);

        let data = await pool.query("Select id_movimiento from remesas_in_bloqueadas where cod_empresa = ? and cod_transmisor = ? and cod_corresponsal = ? and cve_cobro = ? and id_regla_aplicada = ? ", [pCodEmpresa, pcod_transmisor,pcod_corresponsal, pcve_cobro, pIDregla]);
       
        if(data.length==1){
            var d = data[0];
            console.log(d);
            id_movimiento_registrado = d.id_movimiento;
        }
        return id_movimiento_registrado;
    },
    bloqueo_remesa_two: async function(pCodEmpresa, pcod_transmisor,pcod_corresponsal, pcve_cobro, pIDregla, pdescripcion_regla, pstatus_confirmacion, p1,p2, listado){
        let params = [
            pCodEmpresa, 
            pcod_transmisor,
            pcod_corresponsal, 
            listado.remesa, 
            pIDregla, 
            pdescripcion_regla, 
            pstatus_confirmacion, 
            p1, 
            p2, 
            listado.cliente
        ];

        await pool.query("call usp_bloquea_remesa_in(?)", [params]);

        pool.query("Select id_movimiento from remesas_in_bloqueadas where cod_empresa = ? and cve_cobro = ? and id_regla_aplicada = ? ", [pCodEmpresa, pcve_cobro, pIDregla]).then(async function(data) 
            {
                let r = {
                    remesa : listado.remesa,
                    cliente : listado.cliente,
                    id_movimiento : 0,
                    lt : listado.lt
                }
                if(data.length==1){
                    var d = data[0];
                    r = {
                        remesa : listado.remesa,
                        cliente : listado.cliente,
                        id_movimiento : d.id_movimiento,
                        lt : listado.lt
                    }

                }
                console.log("Obtiene r");
                console.log(r);

                await fnBit.Registra_CoincidenciaCompliance_two(r, "P");

            }
        );        
    },
    bloqueo_cliente: async function(pCodEmpresa, pcod_esquema, pIDregla, pdescripcion_regla, pstatus_confirmacion, p1,p2, pcve_cliente){
        let params = [
            pCodEmpresa, 
            pcod_esquema,
            pIDregla, 
            pdescripcion_regla, 
            pstatus_confirmacion, 
            p1, 
            p2, 
            pcve_cliente
        ];
      
        let id_movimiento_registrado = 0;
        await pool.query("call usp_bloquea_cliente_pld(?)", [params]);

        let data = await pool.query("Select id_movimiento from clientes_bloqueados where cod_empresa = ? and cod_esquema = ? and cod_cliente = ? and id_regla_aplicada = ?  and status_bloqueo = '08'", [pCodEmpresa, pcod_esquema,pcve_cliente, pIDregla]);
       
        if(data.length==1){
            var d = data[0];
            console.log(d);
            id_movimiento_registrado = d.id_movimiento;
        }
        
        return id_movimiento_registrado;
    },
    validacion_listas_cliente_pm : async function(req,cod_beneficiario, nombre, apaterno,amaterno, RFC, tipo_beneficiario){
        this.code = "";
        this.msg = "";
        if(tipo_beneficiario=="PF"){
            var cliente = await pool.query("select apaterno_cliente, ifnull(amaterno_cliente,'') as amaterno_cliente, nombre_cliente as nombre, date_format(fecha_nacimiento,'%Y%m%d') as fecha_nacimiento, ifnull(rfc,'') as rfc from clientes where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_beneficiario]);
            if(RFC ==""){
                fechaNacimiento = cliente[0].fecha_nacimiento;
                RFC  = funciones.obtenRFC(nombre, apaterno, amaterno, fechaNacimiento );
            }
        }
        try {
            let resplt = await this.listas_negras(req, apaterno + " " + amaterno, nombre , RFC);    
            if(this.code == "00")
            {
                /* Registramos en bitacora */
                fnBit.cod_empresa = req.user.IdEmpresaCliente;
                fnBit.cod_cliente = cve_cliente;
                fnBit.observaciones = this.msg  + ' - CONSULTA REALIZADA EN '+ req.user.sucursal;
                fnBit.id_usuario = req.user.IdUser;
                fnBit.cod_empresa_usuario = req.user.IdEmpresa;
                console.log("Consulta cumplimiento valida 2");
                fnBit.Registra_MovimientoCliente();
                console.log("Consulta cumplimiento valida 3");
                /* Registramos en bitacora */       
            }else if (this.code=="01"){
                console.log("if 6");
                fnBit.id_usuario = req.user.IdUser;
                fnBit.cod_empresa_usuario = req.user.IdEmpresa;
                fnBit.cod_empresa = req.user.IdEmpresaCliente;
                // var idMovimiento = await this.bloqueo_cliente(req.user.IdEmpresaCliente, "E", reglas[i].idRegla,  reglas[i].descripcion_regla,"08","","", cve_cliente); 
                // await fnBit.Registra_CoincidenciaCompliance(idMovimiento, resplt,"E");
                this.accion = 1;
                this.msg = reglas[i].mensaje_usuario;
                this.code = "01";
                this.msg = "Beneficiario bloqueado por listas";
            }
        } catch (error) {
            this.code = "01";
            this.msg = "No es posible validar al beneficiario";
        }        
        
        
        

    },
    listas_negras : async function(req, apellidos_cliente, nombres, RFC){
 
        /*let nums_id = await pool.query("call usp_obtener_num_id_cliente(?,?)", ['EM010', '1181981']);
        let numeros_identificacion = "";
        if (nums_id[0][0].num_ids !='NO') {
            numeros_identificacion = nums_id[0][0].num_ids
            if(numeros_identificacion!=''){
                RFC = RFC + '|' + numeros_identificacion;
            }
        }*/

        // console.log("RFC:::" + RFC);

        respuesta = await apirest.ListasNegras(req, apellidos_cliente,nombres, RFC);
        let resultadolt = {};
        console.log("Respuesta API LISTAS:" + respuesta.Status);
        if (respuesta.Status == undefined){

            if(respuesta.length>0){
                
                resultadolt =  funciones.filtraArrayPorElemento(respuesta, "Exactitud_Denominacion","ALTO (5 sobre 5)");
                if(resultadolt.length>0){
                    this.code = "01";
                    this.msg = "Coincidencia en listas Negras";
                }else{
                    this.code = "00";
                    this.msg = "No se encontraron coincidencias en listas negras";  
                }
            }else{
                this.code = "00";
                this.msg = "No se encontraron coincidencias en listas negras";  
            }
        }else{
            console.log("RESPUESTA DEVUELTA:::::" + respuesta.Status);
            if(respuesta.Status=="OK"){
                this.code = "00";
                this.msg = "No se encontraron coincidencias en listas Negras";
            }
            else if (respuesta.Status == "SINACCESO")
            {
                this.code = "99";
                this.msg = "No se tiene acceso al servicio de consulta de listas negras, consulte con el proveedor si no ha alcazado el limite de consultas permitidas";
            }
            else if(respuesta.Status == "ERROR"){
                this.code = "99";
                this.msg = respuesta.Message;
            }
        }
        return resultadolt;
    }, 
    
    listas_negras_two : async function(req, apellido_1, apellido_2, nombres, RFC, cve_cobro, cod_cliente){

        let respuestacompleta = {};
//        respuesta = await apirest.ListasNegras(req, apellidos_cliente,nombres, RFC);
        let parametrosBusqueda = {
            busqueda: "GIRO",
            tipo_persona : "PF",
            nombre :  nombres,
            apaterno : apellido_1,
            amaterno : apellido_2,
            fechanacimientoCon :  fechaNacimiento,
            fechanacimientoyyyyMMdd : fechaNacimiento, //req.body.txtFechaNacimiento == "" ? "" : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaNacimiento),
            fechanacimiento : fechaNacimiento,
            rfc : RFC,
            curp : "",
            rfcPM : "",
            nombrePM : ""
        }; 

        respuesta = await fn_provedores_listas_negras.validaListasNegras(parametrosBusqueda, req.user.IdEmpresaCliente,0);

        console.log("respiuesta");
        console.log(respuesta);

        let resultadolt = {};
        
        this.code = respuesta.code;
        this.msg = respuesta.msg;


        if (respuesta.code == "01"){
            resultadolt = respuesta.data.datos;
        }  
        
        respuestacompleta = {
            remesa : cve_cobro,
            cliente: cod_cliente,
            lt : resultadolt
        }
        return respuestacompleta;
    } 

}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\reglas_pld_in.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\reportesExcel_Remesas.js ---

var Enumerable = require('linq');
const ExcelJS = require('exceljs');

module.exports = {
    Reporte_Basico: function (resultado){
        var  lq =  Enumerable.from(resultado)
        .groupBy(x=>x.agente_pago)
        .select(x=>({
                Nombre_Agente:x.key(), 
                sucursales: Enumerable.from(x.getSource())
                .groupBy(y=>y.sucursal_pago)
                .select(y=>({sucursal:y.key(), usuarios:Enumerable.from(y.getSource())
                    .groupBy(z=>z.nombre_empleado)
                    .select(z=>(
                                {
                                usuario:z.key(), 
                                remesas:z.getSource(),
                                importeTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                                totalRemesas : Enumerable.from(z.getSource()).count()
                                }))
                    .toArray(), 
                    importeTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                    totalRemesas : Enumerable.from(y.getSource()).count()
                })).toArray(),
                importeTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                totalRemesas : Enumerable.from(x.getSource()).count()
            })).toArray(); 
        
        var reporte = {
            resulset: lq,
            importeTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.importe_destino);}),
            totalRemesas : Enumerable.from(resultado).count()
        }
        return  reporte
     },
     Reporte_Transmisor: function (resultado){
        var  lq =  Enumerable.from(resultado)
        .groupBy(x=>x.remesador)
        .select(x=>({
                Nombre_Transmisor:x.key(), 
                sucursales: Enumerable.from(x.getSource())
                .groupBy(y=>y.sucursal_pago)
                .select(y=>({sucursal:y.key(), usuarios:Enumerable.from(y.getSource())
                    .groupBy(z=>z.nombre_empleado)
                    .select(z=>(
                                {
                                usuario:z.key(), 
                                remesas:z.getSource(),
                                importeTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                                totalRemesas : Enumerable.from(z.getSource()).count()
                                }))
                    .toArray(), 
                    importeTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                    totalRemesas : Enumerable.from(y.getSource()).count()
                })).toArray(),
                importeTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                totalRemesas : Enumerable.from(x.getSource()).count()
            })).toArray(); 
       
        var reporte = {
            resulset: lq,
            importeTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.importe_destino);}),
            totalRemesas : Enumerable.from(resultado).count()
        }
     
        return  reporte
     },
    GeneraExcel_Reporte_Basico: function(worksheet, datos, showGranTotal, titulo, reporte){ 

    worksheet.addRow(['', ''])
    worksheet.addRow(['', ''])
    worksheet.addRow(['', ''])
    worksheet.addRow(['','FECHA INICIAL', reporte.fecha_inicio])
    worksheet.addRow(['','FECHA FINAL', reporte.fecha_fin])
    worksheet.addRow(['','', ''])
    datos.resulset.forEach(element => {
        worksheet.addRow(['','AGENTE', element.Nombre_Agente])
        element.sucursales.forEach(a =>{
        worksheet.addRow(['','SUCURSAL', a.sucursal])
        a.usuarios.forEach(b=>{
            worksheet.addRow(['','USUARIO', b.usuario])
            worksheet.addRow(['','FECHA DE OPERACION','NO DE OPERACION','REFERENCIA','BENEFICIARIO','IMPORTE PAGADO'])
            
            b.remesas.forEach(c=>{
            worksheet.addRow(['',c.fec_status,c.operacion,c.cve_cobro,c.nombre_beneficiario, c.importe_destino])
            })
            worksheet.addRow(['','','','TOTAL',b.totalRemesas,b.importeTotal])
            worksheet.addRow(['','','','','',''])
        })
        worksheet.addRow(['','','','TOTAL POR SUCURSAL',a.totalRemesas,a.importeTotal])
        worksheet.addRow(['','','','','',''])
        })  
        worksheet.addRow(['','','','TOTAL POR AGENTE',element.totalRemesas,element.importeTotal])
        worksheet.addRow(['','','','','',''])
    });
    if(showGranTotal == true){
        worksheet.addRow(['','','','GRAN TOTAL',datos.totalRemesas,datos.importeTotal])
        worksheet.addRow(['','','','','',''])
    }
    var fill1 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'deeded'}};
    var fill2 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'FFFF00'}};
    var fill3 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'FFDD00'}};


    worksheet.columns.forEach(function (column, i) {
    var maxLength = 0;
    column["eachCell"]({ includeEmpty: true }, function (cell) {
        var columnLength = cell.value ? cell.value.toString().length : 10;
        if (columnLength > maxLength ) {
            maxLength = columnLength;
        }
    });
    column.width = maxLength < 10 ? 15 : maxLength + 5;
    column.alignment = { vertical: 'middle', horizontal: 'center'};
    });
    worksheet.eachRow(function(row, rowNumber){
    
        switch (row.getCell(4).value) {
        case "TOTAL": 
        case "TOTAL POR SUCURSAL":
        case "TOTAL POR AGENTE":
        case "GRAN TOTAL":
            row.getCell(5).alignment = { vertical: 'middle', horizontal: 'center' };
            row.getCell(6).font = {color: {argb: "0000FF"}, bold: true};
        break;
        }

        switch (row.getCell(2).value) {
            case "AGENTE": 
            case "FECHA INICIAL": 
            case "FECHA FINAL": 
            case "SUCURSAL":
            case "USUARIO":
                row.getCell(3).alignment = { vertical: 'middle', horizontal: 'left' };
            break;
            }

        row.eachCell( function(cell, colNumber){
        if(cell.value!=''){
            if(colNumber==6 && cell.value != "IMPORTE PAGADO"){
                row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
               
                row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
            }
            switch (cell.value) {
                case "USUARIO":
                row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                row.getCell(colNumber).fill = fill2
                row.getCell(colNumber).font = { bold: true };
                break;
                case "FECHA DE OPERACION":
                case "NO DE OPERACION":
                case "REFERENCIA":
                case "BENEFICIARIO": 
                case "IMPORTE PAGADO":
                row.getCell(colNumber).fill = fill1
                row.getCell(colNumber).font = { bold: true };
                break;
                case "FECHA INICIAL":
                case "FECHA FINAL":
                case "AGENTE":
                case "SUCURSAL":
                case "TOTAL": 
                case "TOTAL POR SUCURSAL":
                case "TOTAL POR AGENTE":
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                    row.getCell(colNumber).fill = fill1
                    row.getCell(colNumber).font = { bold: true };
                    break;
                case "GRAN TOTAL":
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                    row.getCell(colNumber).fill = fill3
                    row.getCell(colNumber).font = { bold: true };
                    break;
                default:
                break;
            }
            
            row.getCell(colNumber).border = {
                top: { style: "thin" },
                left: { style: "thin" },
                bottom: { style: "thin" },
                right: { style: "thin" }
            }
            
            }
        });
    });
    var titleFont = {
        name: 'Calibri',
        family: 4,
        size: 18,
        underline: false,
        bold: true
    };
    worksheet.mergeCells('B2:F2');
    worksheet.getCell('B2').value = titulo;
    worksheet.getCell('B2').alignment = { horizontal:'center'} ;
    worksheet.getCell('B2').font = titleFont;
    worksheet.getCell('B2').border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" }
    }

    return worksheet;

    },
    GeneraExcel_Reporte_Transmisor: function(worksheet, datos, showGranTotal, titulo, reporte){ 

        worksheet.addRow(['', ''])
        worksheet.addRow(['', ''])
        worksheet.addRow(['', ''])
        worksheet.addRow(['','FECHA INICIAL', reporte.fecha_inicio])
        worksheet.addRow(['','FECHA FINAL', reporte.fecha_fin])
        worksheet.addRow(['','', ''])
        datos.resulset.forEach(element => {
            worksheet.addRow(['','TRANSMISOR', element.Nombre_Transmisor])
            element.sucursales.forEach(a =>{
            worksheet.addRow(['','SUCURSAL', a.sucursal])
            a.usuarios.forEach(b=>{
                worksheet.addRow(['','USUARIO', b.usuario])
                worksheet.addRow(['','FECHA DE OPERACION','NO DE OPERACION','REFERENCIA','BENEFICIARIO','IMPORTE PAGADO'])
                
                b.remesas.forEach(c=>{
                worksheet.addRow(['',c.fec_status, c.operacion, c.cve_cobro,c.nombre_beneficiario,c.importe_destino])
                })
                worksheet.addRow(['','','','TOTAL',b.totalRemesas,b.importeTotal])
                worksheet.addRow(['','','','','',''])
            })
            worksheet.addRow(['','','','TOTAL POR SUCURSAL',a.totalRemesas,a.importeTotal])
            worksheet.addRow(['','','','','',''])
            })  
            worksheet.addRow(['','','','TOTAL POR TRANSMISOR',element.totalRemesas,element.importeTotal])
            worksheet.addRow(['','','','','',''])
        });
        if(showGranTotal == true){
            worksheet.addRow(['','','','GRAN TOTAL',datos.totalRemesas,datos.importeTotal])
            worksheet.addRow(['','','','','',''])
        }
        var fill1 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'deeded'}};
        var fill2 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'FFFF00'}};
        var fill3 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'FFDD00'}};
    
    
        worksheet.columns.forEach(function (column, i) {
        var maxLength = 0;
        column["eachCell"]({ includeEmpty: true }, function (cell) {
            var columnLength = cell.value ? cell.value.toString().length : 10;
            if (columnLength > maxLength ) {
                maxLength = columnLength;
            }
        });
        column.width = maxLength < 10 ? 15 : maxLength + 5;
        column.alignment = { vertical: 'middle', horizontal: 'center'};
        });
        worksheet.eachRow(function(row, rowNumber){
        
            switch (row.getCell(5).value) {
            case "TOTAL": 
            case "TOTAL POR SUCURSAL":
            case "TOTAL POR TRANSMISOR":
            case "GRAN TOTAL":
                row.getCell(5).alignment = { vertical: 'middle', horizontal: 'center' };
                row.getCell(6).font = {color: {argb: "0000FF"}, bold: true};
            break;
            }
    
            switch (row.getCell(2).value) {
                case "TRANSMISOR": 
                case "FECHA INICIAL": 
                case "FECHA FINAL": 
                case "SUCURSAL":
                case "USUARIO":
                    row.getCell(3).alignment = { vertical: 'middle', horizontal: 'left' };
                break;
                }
    
            row.eachCell( function(cell, colNumber){
            if(cell.value!=''){
                if(colNumber==6 && cell.value != "IMPORTE PAGADO"){
                    row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
                   
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                }
                switch (cell.value) {
                    case "USUARIO":
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                    row.getCell(colNumber).fill = fill2
                    row.getCell(colNumber).font = { bold: true };
                    break;
                    case "FECHA DE OPERACION":
                    case "NO DE OPERACION":
                    case "REFERENCIA":
                    case "BENEFICIARIO": 
                    case "IMPORTE PAGADO":
                    row.getCell(colNumber).fill = fill1
                    row.getCell(colNumber).font = { bold: true };
                    break;
                    case "FECHA INICIAL":
                    case "FECHA FINAL":
                    case "TRANSMISOR":
                    case "SUCURSAL":
                    case "TOTAL": 
                    case "TOTAL POR SUCURSAL":
                    case "TOTAL POR TRANSMISOR":
                        row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                        row.getCell(colNumber).fill = fill1
                        row.getCell(colNumber).font = { bold: true };
                        break;
                    case "GRAN TOTAL":
                        row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                        row.getCell(colNumber).fill = fill3
                        row.getCell(colNumber).font = { bold: true };
                        break;
                    default:
                    break;
                }
                
                row.getCell(colNumber).border = {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" }
                }
                
                }
            });
        });
        var titleFont = {
            name: 'Calibri',
            family: 4,
            size: 18,
            underline: false,
            bold: true
        };
        worksheet.mergeCells('B2:F2');
        worksheet.getCell('B2').value = titulo;
        worksheet.getCell('B2').alignment = { horizontal:'center'} ;
        worksheet.getCell('B2').font = titleFont;
        worksheet.getCell('B2').border = {
            top: { style: "thin" },
            left: { style: "thin" },
            bottom: { style: "thin" },
            right: { style: "thin" }
        }
    
        return worksheet;
    
    },
    Reporte_Basico_envio: function (resultado){
        var  lq =  Enumerable.from(resultado)
        .groupBy(x=>x.agente_creacion)
        .select(x=>({
                Nombre_Agente:x.key(), 
                sucursales: Enumerable.from(x.getSource())
                .groupBy(y=>y.sucursal_creacion)
                .select(y=>({sucursal:y.key(), usuarios:Enumerable.from(y.getSource())
                    .groupBy(z=>z.nombre_empleado)
                    .select(z=>(
                            {
                            usuario:z.key(), 
                            remesas:z.getSource(),
                            importeTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                            comisionTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.comision);}),
                            IvaTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.iva);}),
                            importeCobradoTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.importe_cobrado);}),
                            totalRemesas : Enumerable.from(z.getSource()).count()
                            }))
                .toArray(), 
                importeTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                comisionTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.comision);}),
                IvaTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.iva);}),
                importeCobradoTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.importe_cobrado);}),
                totalRemesas : Enumerable.from(y.getSource()).count()
            })).toArray(),
            importeTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
            comisionTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.comision);}),
            IvaTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.iva);}),
            importeCobradoTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.importe_cobrado);}),
            totalRemesas : Enumerable.from(x.getSource()).count()
        })).toArray(); 
    
    var reporte = {
        resulset: lq,
        importeTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.importe_destino);}),
        comisionTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.comision);}),
        IvaTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.iva);}),
        importeCobradoTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.importe_cobrado);}),
        totalRemesas : Enumerable.from(resultado).count()
    }
    return  reporte
    },
    Reporte_Transmisor_envio: function (resultado){
    var  lq =  Enumerable.from(resultado)
    .groupBy(x=>x.remesador)
    .select(x=>({
            Nombre_Transmisor:x.key(), 
            sucursales: Enumerable.from(x.getSource())
            .groupBy(y=>y.sucursal_creacion)
            .select(y=>({sucursal:y.key(), usuarios:Enumerable.from(y.getSource())
                .groupBy(z=>z.nombre_empleado)
                .select(z=>(
                            {
                            usuario:z.key(), 
                            remesas:z.getSource(),
                            importeTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                            comisionTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.comision);}),
                            IvaTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.iva);}),
                            importeCobradoTotal : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.importe_cobrado);}),
                            totalRemesas : Enumerable.from(z.getSource()).count()
                            }))
                .toArray(), 
                importeTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
                comisionTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.comision);}),
                IvaTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.iva);}),
                importeCobradoTotal : Enumerable.from(y.getSource()).sum(function(item){return parseFloat(item.importe_cobrado);}),
                totalRemesas : Enumerable.from(y.getSource()).count()
            })).toArray(),
            importeTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.importe_destino);}),
            comisionTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.comision);}),
            IvaTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.iva);}),
            importeCobradoTotal : Enumerable.from(x.getSource()).sum(function(item){return parseFloat(item.importe_cobrado);}),
            totalRemesas : Enumerable.from(x.getSource()).count()
        })).toArray(); 
    
    var reporte = {
        resulset: lq,
        importeTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.importe_destino);}),
        comisionTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.comision);}),
        IvaTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.iva);}),
        importeCobradoTotal : Enumerable.from(resultado).sum(function(item){return parseFloat(item.importe_cobrado);}),
        totalRemesas : Enumerable.from(resultado).count()
    }
    
    return  reporte
    },
    GeneraExcel_Reporte_Basico_envio: function(worksheet, datos, showGranTotal, titulo, reporte){ 

    worksheet.addRow(['', ''])
    worksheet.addRow(['', ''])
    worksheet.addRow(['', ''])
    worksheet.addRow(['','FECHA INICIAL', reporte.fecha_inicio])
    worksheet.addRow(['','FECHA FINAL', reporte.fecha_fin])
    worksheet.addRow(['','', ''])
    datos.resulset.forEach(element => {
        worksheet.addRow(['','AGENTE', element.Nombre_Agente])
        element.sucursales.forEach(a =>{
        worksheet.addRow(['','SUCURSAL', a.sucursal])
        a.usuarios.forEach(b=>{
            worksheet.addRow(['','USUARIO', b.usuario])
            worksheet.addRow(['','FECHA DE OPERACION','NO DE OPERACION','REFERENCIA','REMITENTE','IMPORTE ENVIADO','COMISION','IVA','IMPORTE PAGADO'])
            
            b.remesas.forEach(c=>{
            worksheet.addRow(['',c.fec_status,c.operacion,c.cve_cobro,c.nombre_remitente,c.importe_destino, c.comision, c.iva, c.importe_cobrado])
            })
            worksheet.addRow(['','','TOTAL',b.totalRemesas,b.importeTotal,b.comisionTotal,b.IvaTotal,b.importeCobradoTotal])
            worksheet.addRow(['','','','',''])
        })
        worksheet.addRow(['','','TOTAL POR SUCURSAL',a.totalRemesas,a.importeTotal,a.comisionTotal,a.IvaTotal,a.importeCobradoTotal])
        worksheet.addRow(['','','','',''])
        })  
        worksheet.addRow(['','','TOTAL POR AGENTE',element.totalRemesas,element.importeTotal,element.comisionTotal,element.IvaTotal,element.importeCobradoTotal])
        worksheet.addRow(['','','','',''])
    });
    if(showGranTotal == true){
        worksheet.addRow(['','','GRAN TOTAL',datos.totalRemesas,datos.importeTotal,datos.comisionTotal,datos.IvaTotal,datos.importeCobradoTotal])
        worksheet.addRow(['','','','',''])
    }
    var fill1 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'deeded'}};
    var fill2 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'FFFF00'}};
    var fill3 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'FFDD00'}};


    worksheet.columns.forEach(function (column, i) {
    var maxLength = 0;
    column["eachCell"]({ includeEmpty: true }, function (cell) {
        var columnLength = cell.value ? cell.value.toString().length : 10;
        if (columnLength > maxLength ) {
            maxLength = columnLength;
        }
    });
    column.width = maxLength < 10 ? 15 : maxLength + 5;
    column.alignment = { vertical: 'middle', horizontal: 'center'};
    });
    worksheet.eachRow(function(row, rowNumber){

        switch (row.getCell(3).value) {
        case "TOTAL": 
        case "TOTAL POR SUCURSAL":
        case "TOTAL POR AGENTE":
        case "GRAN TOTAL":
            row.getCell(4).alignment = { vertical: 'middle', horizontal: 'center' };
            row.getCell(5).font = {color: {argb: "0000FF"}, bold: true};
            row.getCell(6).font = {color: {argb: "0000FF"}, bold: true};
            row.getCell(7).font = {color: {argb: "0000FF"}, bold: true};
            row.getCell(8).font = {color: {argb: "0000FF"}, bold: true};
        break;
        }

        switch (row.getCell(2).value) {
            case "AGENTE": 
            case "FECHA INICIAL": 
            case "FECHA FINAL": 
            case "SUCURSAL":
            case "USUARIO":
                row.getCell(3).alignment = { vertical: 'middle', horizontal: 'left' };
            break;
            }

        row.eachCell( function(cell, colNumber){
        if(cell.value!=''){
            if(colNumber==5 && cell.value != "IMPORTE ENVIADO"){
                row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
                
                row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
            }
            if(colNumber==6 && cell.value != "COMISION"){
                row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
                
                row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
            }
            if(colNumber==7 && cell.value != "IVA"){
                row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
                
                row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
            }
            if(colNumber==8 && cell.value != "IMPORTE PAGADO"){
                row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
                
                row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
            }
            switch (cell.value) {
                case "USUARIO":
                row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                row.getCell(colNumber).fill = fill2
                row.getCell(colNumber).font = { bold: true };
                break;
                case "FECHA DE OPERACION":
                case "REFERENCIA":
                case "REMITENTE": 
                case "IMPORTE ENVIADO":
                case "COMISION":
                case "IVA":
                case "IMPORTE PAGADO":
                row.getCell(colNumber).fill = fill1
                row.getCell(colNumber).font = { bold: true };
                break;
                case "FECHA INICIAL":
                case "FECHA FINAL":
                case "AGENTE":
                case "SUCURSAL":
                case "TOTAL": 
                case "TOTAL POR SUCURSAL":
                case "TOTAL POR AGENTE":
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                    row.getCell(colNumber).fill = fill1
                    row.getCell(colNumber).font = { bold: true };
                    break;
                case "GRAN TOTAL":
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                    row.getCell(colNumber).fill = fill3
                    row.getCell(colNumber).font = { bold: true };
                    break;
                default:
                break;
            }
            
            row.getCell(colNumber).border = {
                top: { style: "thin" },
                left: { style: "thin" },
                bottom: { style: "thin" },
                right: { style: "thin" }
            }
            
            }
        });
    });
    var titleFont = {
        name: 'Calibri',
        family: 4,
        size: 18,
        underline: false,
        bold: true
    };
    worksheet.mergeCells('B2:E2');
    worksheet.getCell('B2').value = titulo;
    worksheet.getCell('B2').alignment = { horizontal:'center'} ;
    worksheet.getCell('B2').font = titleFont;
    worksheet.getCell('B2').border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" }
    }

    return worksheet;

    },
    GeneraExcel_Reporte_Transmisor_envio: function(worksheet, datos, showGranTotal, titulo, reporte){ 

        worksheet.addRow(['', ''])
        worksheet.addRow(['', ''])
        worksheet.addRow(['', ''])
        worksheet.addRow(['','FECHA INICIAL', reporte.fecha_inicio])
        worksheet.addRow(['','FECHA FINAL', reporte.fecha_fin])
        worksheet.addRow(['','', ''])
        datos.resulset.forEach(element => {
            worksheet.addRow(['','TRANSMISOR', element.Nombre_Transmisor])
            element.sucursales.forEach(a =>{
            worksheet.addRow(['','SUCURSAL', a.sucursal])
            a.usuarios.forEach(b=>{
                worksheet.addRow(['','USUARIO', b.usuario])
                worksheet.addRow(['','FECHA DE OPERACION','REFERENCIA', 'REMITENTE','IMPORTE ENVIADO','COMISION','IVA','IMPORTE PAGADO'])
                
                b.remesas.forEach(c=>{
                worksheet.addRow(['',c.fec_status,c.cve_cobro,c.nombre_remitente,c.importe_destino, c.comision, c.iva, c.importe_cobrado ])
                })
                worksheet.addRow(['','','TOTAL',b.totalRemesas,b.importeTotal,b.comisionTotal,b.IvaTotal,b.importeCobradoTotal])
                worksheet.addRow(['','','','',''])
            })
            worksheet.addRow(['','','TOTAL POR SUCURSAL',a.totalRemesas,a.importeTotal,a.comisionTotal,a.IvaTotal,a.importeCobradoTotal])
            worksheet.addRow(['','','','',''])
            })  
            worksheet.addRow(['','','TOTAL POR TRANSMISOR',element.totalRemesas,element.importeTotal,element.comisionTotal,element.IvaTotal,element.importeCobradoTotal])
            worksheet.addRow(['','','','',''])
        });
        if(showGranTotal == true){
            worksheet.addRow(['','','GRAN TOTAL',datos.totalRemesas,datos.importeTotal,datos.comisionTotal,datos.IvaTotal,datos.importeCobradoTotal])
            worksheet.addRow(['','','','',''])
        }
        var fill1 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'deeded'}};
        var fill2 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'FFFF00'}};
        var fill3 = { type: 'pattern', pattern:'solid', fgColor:{ argb:'FFDD00'}};


        worksheet.columns.forEach(function (column, i) {
        var maxLength = 0;
        column["eachCell"]({ includeEmpty: true }, function (cell) {
            var columnLength = cell.value ? cell.value.toString().length : 10;
            if (columnLength > maxLength ) {
                maxLength = columnLength;
            }
        });
        column.width = maxLength < 10 ? 15 : maxLength + 5;
        column.alignment = { vertical: 'middle', horizontal: 'center'};
        });
        worksheet.eachRow(function(row, rowNumber){
        
            switch (row.getCell(3).value) {
            case "TOTAL": 
            case "TOTAL POR SUCURSAL":
            case "TOTAL POR TRANSMISOR":
            case "GRAN TOTAL":
                row.getCell(4).alignment = { vertical: 'middle', horizontal: 'center' };
                row.getCell(5).font = {color: {argb: "0000FF"}, bold: true};
                row.getCell(6).font = {color: {argb: "0000FF"}, bold: true};
                row.getCell(7).font = {color: {argb: "0000FF"}, bold: true};
                row.getCell(8).font = {color: {argb: "0000FF"}, bold: true};
            break;
            }

            switch (row.getCell(2).value) {
                case "TRANSMISOR": 
                case "FECHA INICIAL": 
                case "FECHA FINAL": 
                case "SUCURSAL":
                case "USUARIO":
                    row.getCell(3).alignment = { vertical: 'middle', horizontal: 'left' };
                break;
                }

            row.eachCell( function(cell, colNumber){
            if(cell.value!=''){
                if(colNumber==5 && cell.value != "IMPORTE ENVIADO"){
                    row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                }
                if(colNumber==6 && cell.value != "COMISION"){
                    row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                }
                if(colNumber==7 && cell.value != "IVA"){
                    row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                }
                if(colNumber==8 && cell.value != "IMPORTE PAGADO"){
                    row.getCell(colNumber).numFmt = '"$"#,##0.00;[Red]\-"$"#,##0.00';
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                }
                switch (cell.value) {
                    case "USUARIO":
                    row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                    row.getCell(colNumber).fill = fill2
                    row.getCell(colNumber).font = { bold: true };
                    break;
                    case "FECHA DE OPERACION":
                    case "REFERENCIA":
                    case "REMITENTE": 
                    case "IMPORTE ENVIADO":
                    case "COMISION":
                    case "IVA":
                    case "IMPORTE PAGADO":
                    row.getCell(colNumber).fill = fill1
                    row.getCell(colNumber).font = { bold: true };
                    break;
                    case "FECHA INICIAL":
                    case "FECHA FINAL":
                    case "TRANSMISOR":
                    case "SUCURSAL":
                    case "TOTAL": 
                    case "TOTAL POR SUCURSAL":
                    case "TOTAL POR TRANSMISOR":
                        row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                        row.getCell(colNumber).fill = fill1
                        row.getCell(colNumber).font = { bold: true };
                        break;
                    case "GRAN TOTAL":
                        row.getCell(colNumber).alignment = { vertical: 'middle', horizontal: 'right' };
                        row.getCell(colNumber).fill = fill3
                        row.getCell(colNumber).font = { bold: true };
                        break;
                    default:
                    break;
                }
                
                row.getCell(colNumber).border = {
                    top: { style: "thin" },
                    left: { style: "thin" },
                    bottom: { style: "thin" },
                    right: { style: "thin" }
                }
                
                }
            });
        });
        var titleFont = {
            name: 'Calibri',
            family: 4,
            size: 18,
            underline: false,
            bold: true
        };
        worksheet.mergeCells('B2:E2');
        worksheet.getCell('B2').value = titulo;
        worksheet.getCell('B2').alignment = { horizontal:'center'} ;
        worksheet.getCell('B2').font = titleFont;
        worksheet.getCell('B2').border = {
            top: { style: "thin" },
            left: { style: "thin" },
            bottom: { style: "thin" },
            right: { style: "thin" }
        }

        return worksheet;

    }
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\reportesExcel_Remesas.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\reportesPDF_Remesas.js ---

const path = require("path");
const pdf = require('html-pdf');
var moment = require('moment');

module.exports = {
    Get_templateListasNegras : function(detallelistasNegras, req){
        var detalle = '';
        var desprov = '';
        var imagenpath = detallelistasNegras[0].imagen;
        let basePath = path.join( __dirname,'../', 'public','img','/'+ imagenpath).replace(new RegExp(/\\/g),'/');
        basePath = "file:///" + basePath
        detallelistasNegras.forEach(element => {
          desprov = element.descripcion_proveedor;
          if(element.nombre_usuario == undefined){
            element.nombre_usuario = req.user.Nombre;
            element.sucursal = req.user.sucursal;
            element.agente = req.user.AgenteRelacionado;
          }
          
         element.Finalizacion_cargo = element.Finalizacion_cargo == undefined ? "" : element.Finalizacion_cargo;
          
          var hoy = new Date();
          var fechaHoy = hoy.getDate() + '-' + ( hoy.getMonth() + 1 ) + '-' + hoy.getFullYear();

          // obtener el nombre del mes, día del mes, año, hora
          var now = moment().format("DD/MM/YYYY HH:mm:ss");



          detalle = detalle + '<div style="padding-top:25px;"><br><table border = "0" cellspacing="5px" style="font-family:verdana; font-size:10px">' +
          '<tr>' +
            '<th style="text-align:left" width="20%">Cod. Individuo</th>' +
            '<th style="text-align:left" width="20%">Denominación</th>' +
            '<th style="text-align:left" width="20%">Identificación</th>' +
            '<th style="text-align:left" width="20%">Id Tributaria</th>' +
            '<th style="text-align:left" width="20%">Otra Identificación</th>' +
          '</tr> ' +
          '<tr>' +
            '<td>' + element.Cod_Individuo + '</td>' +
            '<td>' + element.Denominacion + '</td>' +
            '<td>' + element.Identificacion + '</td>' +
            '<td>' + element.Id_Tributaria + '</td>' +
            '<td>' + element.Otra_Identificacion + '</td>' +
          '</tr>'  +
          '<tr>' +
            '<th style="text-align:left">Fecha Nacimiento</th>' +
            '<th style="text-align:left">Cargo</th>' +
            '<th style="text-align:left">Lugar de Trabajo</th>' +
            '<th style="text-align:left" colspan="2">Dirección</th>' +
          '</tr>'  +
          '<tr>' +
            '<td>' + element.Fecha_nacimiento +'</td>' +
            '<td>' + element.Cargo + '</td>' +
            '<td>' + element.Lugar_Trabajo + '</td>' +
            '<td colspan="2">' + element.Direccion + '</td>' +
          '<tr>' +
            '<th style="text-align:left">Tipo</th>' +
            '<th style="text-align:left">SubTipo</th>' +
            '<th style="text-align:left">Estado</th>' +
            '<th style="text-align:left" colspan="2">Finalización del Cargo</th>' +
          '</tr> ' +
          '<tr>' +
            '<td>' + element.Tipo + '</td>' +
            '<td>' + element.Sub_Tipo + '</td>' +
            '<td>' + element.Estado + '</td>' +
            '<td colspan="2">' + element.Finalizacion_cargo + '</td>' +
          '<tr>' +
            '<th style="text-align:left">País Lista</th>' +
            '<th style="text-align:left">Lista</th>' +
            '<th style="text-align:left">Exactitud Denominación</th>' +
            '<th style="text-align:left" colspan="2">Exactitud Identificación</th>' +
          '</tr>'  +
          '<tr>' +
            '<td>' +  element.Pais_Lista + '</td>' +
            '<td>' + element.Lista + '</td>' +
            '<td>' + element.Exactitud_Denominacion + '</td>' +
            '<td colspan="2">' + element.Exactitud_Identificacion + '</td>' +
          '</tr>'  +
      '</table><hr><p style="text-align:right;text-font:verdana; font-size:11px"><span> Consulta realizada por <b>' +  element.nombre_usuario + '</b> en <b>'+ element.sucursal +'</b> del agente <b>' + element.agente + '</b> el ' + now + '</span></p></div>';
      
        }); 
      
        var html = '<body style="padding-left:25px;padding-right:25px">' + 
        '<div id="pageHeader"><img src="'+ basePath +'"></div>' +
        '	<br>' +
        '<div>' +
        '<div style="background-color:#0480be; height:20px; color:white; font-family:verdana;font-size:15px; ">&nbsp;&nbsp;' +
        'Coincidencia en Listas Negras</div>' +
        '<div class="box-body">' +   detalle + '</div>' +
        '</div>'+
        '	<div style="background-color:#0480be; height:20px; color:white; font-family:verdana;font-size:12px; padding-top:3px; padding-botton:3px ">' +
        '	&nbsp;&nbsp;&nbsp;&nbsp;' + desprov +
        '	</div>' +
        '</body>'; 
        return html;
    },
    GeneraPDF_ListasNegras(html, res){
      var options = {
        localUrlAccess: true,
        border: {
            "top": "0.3in",
            "right": "0.2in",
            "left": "0.2in",
            "bottom":"0in"
        },   
        format: 'A3',
        "header": {
            "height": "45mm",
            "contents": ""
        },
        "footer": {
        "height": "28mm",
        "contents": "<span style='color: #444;'>{{page}}</span>/<span>{{pages}}</span>"
        }
    }

      pdf.create(html,options).toStream(function (err,stream) {
        if (err) {
            res.send("Error creando PDF: " + err)
        } else {
            res.setHeader("Content-Type", "application/pdf");
            stream.pipe(res);
        }
      });

    }
    
};

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\reportesPDF_Remesas.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\upload-excel.js ---

const multer = require("multer");
const fs = require('fs');
const path = require("path");


const excelFilter = (req, file, cb) => {
  if (
    file.mimetype.includes("excel") ||
    file.mimetype.includes("spreadsheetml")
  ) {
    cb(null, true);
  } else {
    cb("por favor selecciona solo archivos de excel", false);
  }
};

var storage = multer.diskStorage({
    destination:function(req,file,cb){
      var MainPath = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente;
      if (!fs.existsSync(MainPath)) { fs.mkdirSync(MainPath);}

        var ruta = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog";
          if (!fs.existsSync(ruta)) { fs.mkdirSync(ruta);}
          cb(null, ruta + "/");
      },
  filename: (req, file, cb) => {
    console.log(file.originalname);
    cb(null,  path.extname(file.originalname));
  },
});

var uploadFile = multer({ storage: storage, fileFilter: excelFilter });
module.exports = uploadFile;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\lib\upload-excel.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\ajax-petitions.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const consumoApi = require("../lib/Apis/api_notificaciones");
const catalogosBD = require("../lib/catalogosBD");
const bdpld = require("../lib/catalogosBD_pld");
const { cod_corresponsal, cod_transmisor } = require("../lib/bitacoras");

router.post('/ajx/paises', async (req, res)=>{ 
  const result = await pool.query("Select cod_pais, pais FROM cat_paises where cod_pais<>'MEX'");
  res.send(result);
});



router.post('/ajx/paises-agente', async (req, res)=>{ 
  var tr = req.body.id;
  const resultPais = await catalogosBD.Cat_paises();
  const result2 = await catalogosBD.Get_paises_transmisor(req,tr);
  let result = []; 
  let paisesPermitidos = [];
 try{
    paisesPermitidos = result2[0].paises.split("|");
    let data;
    paisesPermitidos.forEach(element => {
      if(resultPais.find(x=>x.cod_pais == element)){
        let data =  resultPais.find(x=>x.cod_pais == element);
        result.push({cod_pais: element, pais: data.pais });
      }
    });
 }catch(error){
  res.send(error);
 }
  res.send(result);
});

router.post('/ajx/estados', async (req, res)=>{ 
  const idPais = req.body.id;
  const result = await pool.query("Select cod_estado, estado FROM cat_estados_spmx where cod_pais=? ORDER BY estado ASC", idPais);
  res.send(result);
});

router.post('/ajx/estados-envios', async (req, res)=>{ 
  const idPais = req.body.id;
  const result = await catalogosBD.Get_estados_envios(req, idPais);
  res.send(result);
});

  router.post('/ajx/municipios', async (req, res)=>{ 
    const idEstado = req.body.id;
    const result = await pool.query("Select cod_municipio, municipio FROM cat_municipios_spmx where cod_estado = ? order by municipio", idEstado );
    res.send(result);
  });

  router.post('/ajx/municipios_envios', async (req, res)=>{ 
    const idpais = req.body.pais;
    const idEstado = req.body.id;
    const result = await catalogosBD.Get_municipios_envios(req, idpais,idEstado);
    res.send(result);
  });

  router.post('/ajx/colonias', async (req, res)=>{ 
    const {idEdo, idMun} = req.body;
    const result = await pool.query("Select cod_asentamiento, asentamiento, cp FROM cat_asentamientos_spmx where cod_estado = ? and cod_municipio = ? order by asentamiento", [idEdo, idMun] );
    res.send(result);
  });

  router.post('/ajx/cp', async (req, res)=>{ 
    const cp = req.body.cp;
    const result = await pool.query("Select cod_estado, estado, cod_municipio, municipio, cp, cod_asentamiento, asentamiento, ciudad FROM vw_asentamientos_spmx where cp = ? order by asentamiento", [cp] );
    res.send(result);
  });

  router.post('/ajx/agentes', async (req, res)=>{ 
    const id = req.body.id;
    const result = await pool.query("Select cod_agente, nombre from agentes_relacionados where cod_empresa  = ? and tipo_servicio = '02' ", [id] );
    res.send(result);
  });


  router.post('/ajx/agente_tipo_servicio', async (req, res)=>{ 
    var cod_empresa = req.user.IdEmpresaCliente;
    var cod_agente = req.body.cod_agente;
    var params = [cod_empresa, cod_agente];
    const result = await pool.query("Select tipo_servicio from agentes_relacionados where cod_empresa  = ? and cod_agente = ? ", params);
    res.send(result);
  });


  router.post('/ajx/sucursales', async (req, res)=>{ 
    const id = req.body.id;
    const agente = req.body.cod_agente;
    const result = await pool.query("select cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_agente = ? and status = 1 order by nombre", [id, agente]); 
    res.send(result);
  });

  router.post('/ajx/sucursales_seleccion', async (req, res)=>{ 
    const id = req.body.id;
    const agente = req.body.cod_agente;
    const result = await pool.query("select concat(cod_sucursal,'|',cod_sucursal_externo) as cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_agente = ? and status = 1 order by nombre", [id, agente]); 
    res.send(result);
  });

  router.post('/ajx/sucursales_envios', async (req, res)=>{ 
    var transmisor = req.body.tra;
    var pais = req.body.pais;
    var edo = req.body.edo;
    var mpo = req.body.mpo;
    let params; 
    
    let result = "";
    if(pais!="MEX"){
      params = [req.user.IdEmpresaCliente, pais];
      result = await pool.query("Select concat( cod_agente,'|', cod_sucursal) as cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_pais = ? and status = 1 order by nombre", params); 
    }else{
      
      params = [req.user.IdEmpresaCliente, pais, edo, mpo];
      result = await pool.query("Select concat( cod_agente,'|', cod_sucursal) as cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_pais = ? and cod_estado = ? and cod_municipio = ? and status = 1 order by nombre", params); 
    }
    
    res.send(result);
  });

  router.all('/ajx/comision-envio', async (req, res)=>{ 
      var cod_empresa = req.user.IdEmpresaCliente;
      var cod_transmisor = req.body.cod_transmisor;
      var importe = req.body.importe;
      var params = [cod_empresa, cod_transmisor, importe];
      let dta = {};
      try {
        let result = await pool.query("call usp_calcula_comision(?,?,?)",params);
        if(result.length==2){ 
          result[0].forEach(element => {
               dta = {
                 importe_validar : element.importe_validar,
                 iva_aplicable : element.iva_aplicable,
                 comision_aplicable : element.comision_aplicable,
                 importeCobrar : element.importeCobrar
               };
            
          });
        }
       
      } catch (error) {
        
      }
       
      
      res.send(dta);
  });

  router.post('/ajx/GetMomentoValidacion', async (req, res)=>{ 
    const id = req.body.mtoVal;
    const result = await bdpld.Cat_momento_validacion(id);
    res.send(result);
  });

  router.get('/ajx/identificaciones', async (req, res)=>{ 
    const result = await pool.query("select id, descripcion from cat_identificaciones_by_envio a where a.cod_empresa =  ? and a.status =  1 ", req.user.IdEmpresaCliente);
    res.send(result);
  });

  router.all('/ajx/identificaciones-detalle', async (req, res)=>{ 
    let empresa = req.user.IdEmpresaCliente
    let id = req.body.id;
    const result = await pool.query("select fecha_expedicion, fecha_vigencia, ifnull(longitud,6) as longitud, ifnull(longitud_max,13) as longitud_max, catalogo from vw_identificaciones_detalle where cod_empresa  = ? and id_identificacion = ?", [empresa, id] );
    res.send(result);
  });

  router.post('/ajx/actividad', async (req, res)=>{ 
    let search = req.body.search;
    result_actividad  = await pool.query("select a.cod_actividad as value, b.descripcion as label from actividad_empresa a inner join cat_actividad_economica b on (b.cod_actividad = a.cod_actividad) where a.cod_empresa = ? and b.status = 1 and b.descripcion like '% " + search + "%'", [req.user.IdEmpresaCliente]);
    res.send(result_actividad);
  });

  router.post('/ajx/get-sucursales', async (req, res)=>{ 
    result  = await catalogosBD.Cat_sucursales_empresa(req);
    res.send(result);
  });

  router.post('/ajx/get-sucursales-cb', async (req, res)=>{ 
    result  = await catalogosBD.Cat_sucursales_empresa_catalogo(req);
    res.send(result);
  });

  router.post('/mantenimiento/sucursales/ajx/addPlantilla',  async (req, res)=>{ 
     let id = req.body.id;
     if(id==""){
       id = 0;
     }
    let datos = [req.user.IdEmpresaCliente, req.body.nombre, req.body.tipo, req.body.recibo, req.body.accion, id ];
    await pool.query("Call usp_add_plantillaRecibo (?)", [datos]).then(function(result){
            res.send("OK"); 
    }).catch(function(err){  
            res.send(err);   
    });
});

router.post('/configuraciones/ajx/getplantilla',  async (req, res)=>{ 
  
  let cod  =  req.body.cod_plantilla;
  let resultado = {
    code : "99",
    total_sucursales : 0,
    result : []
  }
  try {
    let total = await catalogosBD.Get_total_sucursales_plantilla(req, cod);
    let recibo = await catalogosBD.Get_recibo_plantilla(req, cod)
    resultado = {
      code : "00",
      total_sucursales : total[0].total,
      result : recibo
    }
    
  } catch (error) {
    console.log(error);
  }
  res.send(resultado); 
 
});

router.post('/configuraciones/ajx/asignarecibosucursales',  async (req, res)=>{ 
  
  let cod  =  req.body.cod_plantilla;
  let resultado = {
    code : "00",
    total_sucursales : 0
  }
  try {
    let datos = [req.user.IdEmpresaCliente, cod ];
    let result = await pool.query("Call usp_asigna_plantillaRecibo (?)", [datos])
    resultado = {
      code : "OK",
      total_sucursales : result[0][0].total
    }
  } catch (error) {
    console.log(error);
  }
  
  res.send(resultado); 
});


  router.post('/ajx/notificaPagado', async (req, res)=>{ 
    let cve_cobro = req.body.cve_cobro;
    let cod_transmisor = req.body.cod_transmisor;
    let cod_corresponsal = req.body.cod_corresponsal;
    let tipo = req.body.tipoDocumento;
    let Iddocumento = req.body.idDocumento;
    let  result = await consumoApi.ReportPayment(req,cod_transmisor, cod_corresponsal, cve_cobro, Iddocumento, tipo);
    let msg = "OK";
    if(result.code != 0){
      msg = result.mensaje
    }
    res.send(msg);
  });

  router.post('/ajx/notificaCancelado', async (req, res)=>{ 
    let cve_cobro = req.body.cve_cobro;
    let cod_transmisor = req.body.cod_transmisor;
    let cod_corresponsal = req.body.cod_corresponsal;
    let result = await consumoApi.CancelPaymemt(req, cod_transmisor, cod_corresponsal, cve_cobro);
    let msg = "OK";
     if(result.code != 0){
       msg = result.mensaje
     }
    res.send(msg);
  });




  router.post('/ajx/dashboard_getPagados', async (req, res)=>{ 
    let id = req.body.id_tipo;
    let tipo_producto = req.body.tipo_producto;
    var sp = "";
    switch (tipo_producto) {
      case "vol":
        sp = "usp_dashboard_pagados";
        break;
      case "imp":
        sp = "usp_dashboard_pagados_importe";
        break;
      case "com":
        sp = "usp_dashboard_pagados_comision";
        break;  
      case "rem":
        sp = "usp_dashboard_pagados_remesador";
        break;  
      default:
        break;
    }
    let result = []; 
   try{
    let resultado = await pool.query("call "+ sp +"(?,?)",[req.user.IdEmpresaCliente, id] );
  
    if(resultado.length==2){ 
      resultado[0].forEach(element => {
          let data =[]
          if(tipo_producto=="vol"){
            data = [element.descripcion, parseInt(element.total)];
          }else{
            data = [element.descripcion, parseFloat(element.total)];
          }
          result.push(data);
      });
    }
   }catch(error){
   }
    console.log(result);
    res.send(result);
  });


  router.post('/ajx/dashboard_getCancelados', async (req, res)=>{ 
    let id = req.body.id_tipo;
   
    let result = []; 
   try{
    let resultado = await pool.query("call usp_dashboard_cancelados(?,?)",[req.user.IdEmpresaCliente, id] );
    if(resultado.length==2){ 
      resultado[0].forEach(element => {
          let data = [element.descripcion, element.total];
          result.push(data);
      });
    }
   }catch(error){
   }
    console.log(result);
    res.send(result);
  });

  router.post('/ajx/dashboard_getCanceladosImporte', async (req, res)=>{ 
    let id = req.body.id_tipo;
    let tipo_producto = req.body.tipo_producto;
    var sp = "";
   
    let result = []; 
   try{
    let resultado = await pool.query("call usp_dashboard_cancelados_importe(?,?)",[req.user.IdEmpresaCliente, id] );
    if(resultado.length==2){ 
      resultado[0].forEach(element => {
          let data = [element.descripcion, parseFloat(element.total)];
          result.push(data);
      });
    }
   }catch(error){
   }
    console.log(result);
    res.send(result);
  });


  router.post('/ajx/dashboard_getVariacion', async (req, res)=>{ 
    let id = req.body.id_tipo;
    let tipo_producto = req.body.tipo_producto;
    var sp = "";
    let resultado = await pool.query("call usp_dashboard_variacion(?,?)",[req.user.IdEmpresaCliente, id] );
    let result = []; 
   try{
    if(resultado.length==2){ 
      resultado[0].forEach(element => {
          let data = {act: parseFloat(element.act), comp: parseFloat(element.comp), var: parseFloat(element.variacion), indicador: element.indicador};
          result.push(data);
      });
    }
   }catch(error){
   }
    console.log(result);
    res.send(result);
  });

  router.post('/ajx/reportreg-getSucursal', async (req, res)=>{ 
    let id = req.body.cod_sucursal;
    let result = [];
   try{
    let resultado = await bdpld.ReportesReg_Cat_localidad(req, id);
      resultado.forEach(element => {
          let data = {
            municipio : element.municipio,
            cod_cnvb : element.cod_cnvb,
            cp : element.cp
          };
          result.push(data);
      });
   }catch(error){
   }
    res.send(result);
  });

  router.post('/ajx/reportreg-municipios', async (req, res)=>{ 
    const idEstado = req.body.id;
    const result = await bdpld.ReportesReg_Cat_localidad_estado(idEstado);
    res.send(result);
  });

  router.post('/ajx/get_datos_cliente_pm', async (req, res)=>{ 
    var cod_pm = req.body.cod_pm;
    var cod_tipo = req.body.cod_tipo_persona;
    let respuesta = {
      clientes : {},
      cuenta : "",
      banco: "",
      saldo: ""
    };
   try{
    let resp = {}; 
    if( cod_tipo == "PM"){
      resp = await catalogosBD.Get_pm_beneficiarios_pm(req, cod_pm);
    }
    if( cod_tipo == "PF"){
      resp = await catalogosBD.Get_pm_beneficiarios_pf(req,cod_pm);
    }

    let datosbancarios = await catalogosBD.Get_vw_pm_datos_bancarios(req,cod_pm);
    
    respuesta = {
      clientes : resp,
      cuenta : datosbancarios[0] == undefined ?"": datosbancarios[0].num_cuenta,
      banco: datosbancarios[0] == undefined ?"": datosbancarios[0].banco,
      saldo: ""
    }
   }catch(error){
   console.log(error);
  } 
    res.send(respuesta);
  });

  router.post('/ajx/get_datos_cliente_datos_bancarios', async (req, res)=>{ 
    let id = req.body.cod_beneficiario;
    let result = [];
   try{
    let resultado = await catalogosBD.Get_pm_beneficiarios_datos_bancarios(req, id);
      resultado.forEach(element => {
          let data = {
            curp : element.curp,
            clabe : element.clabe,
            cuenta : element.cuenta,
            cod_banco : element.cod_banco,
            banco : element.banco
          };

          result.push(data);
      });
   }catch(error){
   }
    res.send(result);
  });

  router.post('/ajx/dashboard_importe_by_ctep', async (req, res)=>{ 
    let id = req.body.id_tipo;
    let tipo_producto = req.body.tipo_producto;
    let anio = req.body.anio;
    let codcte = req.body.cod_cliente;
    var sp = "";
    switch (tipo_producto) {
      case "imp":
        sp = "usp_dashboard_perfil_transaccional";
        break;
      default:
        break;
    }
    let result = [];
    let result2 = []; 
    
    let response = {
      pagos : result,
      envios : result2
    };

    let request = [req.user.IdEmpresaCliente, anio, id, codcte];
    
   try{
    let resultado = await pool.query("call "+ sp +"(?,?,?,?)", request );
    if(resultado.length==3){ 
      resultado[0].forEach(element => {
          let data =[]
          if(tipo_producto=="vol"){
            data = [element.descripcion, parseInt(element.total)];
          }else{
            data = [element.descripcion, parseFloat(element.total)];
          }
          result.push(data);
      });

      resultado[1].forEach(element => {
        let data2 =[]
        if(tipo_producto=="vol"){
          data = [element.descripcion, parseInt(element.total)];
        }else{
          data = [element.descripcion, parseFloat(element.total)];
        }
        result2.push(data);
      });
        response = {
          pagos : result,
          envios : result2
        };
    }
   }catch(error){
   }
    res.send(response);
  });

  router.post('/ajx/dashboard_calificacion_by_ctep', async (req, res)=>{ 
    let id = req.body.id_tipo;
    let tipo_producto = req.body.tipo_producto;
    let anio = req.body.anio;
    let codcte = req.body.cod_cliente;
    var sp = "";
    switch (tipo_producto) {
      case "vol":
        sp = "usp_dashboard_calificacion";
        break;
      default:
        break;
    }
    let result = [];
    let result2 = []; 
    
    let response = {
      pagos : result,
      envios : result2
    };

    let request = [req.user.IdEmpresaCliente, anio, id, codcte];
    
   try{
    let resultado = await pool.query("call "+ sp +"(?,?,?,?)", request );
    if(resultado.length==3){ 
      resultado[0].forEach(element => {
          let data =[]
          if(tipo_producto=="vol"){
            data = [element.descripcion, parseInt(element.total)];
          }else{
            data = [element.descripcion, parseFloat(element.total)];
          }
          result.push(data);
      });

      resultado[1].forEach(element => {
        let data2 =[]
        if(tipo_producto=="vol"){
          data = [element.descripcion, parseInt(element.total)];
        }else{
          data = [element.descripcion, parseFloat(element.total)];
        }
        result2.push(data);
      });
        response = {
          pagos : result,
          envios : result2
        };
    }
   }catch(error){
   }
    res.send(response);
  });

  router.post('/ajx/RegistraCaja', async (req, res)=>{ 
    const id = req.body.tipo;
    console.log(id);
    const result = {code: "00"};
    res.send(result);
  });

  router.post('/ajx/valida-importe-envio', async (req, res)=>{ 
    let importe = req.body.importe;
    result  = await catalogosBD.Get_importe_envio_max(req.user.IdEmpresaCliente);
    let resultado = {code : "00", msg : "" }  
    if(result[0]!= undefined){
      let rs = result[0];
      let imp = rs.importe_max;
      let msg = rs.mensaje;

      if( parseFloat(importe) > parseFloat(imp)){
        resultado.code="01";
        resultado.msg = msg
      }

    }
    res.send(resultado);
  });
  router.post('/ajx/get_cotizador', async (req, res)=>{ 
    const transmisor = req.body.tra;
    const params = {cod_empresa: req.user.IdEmpresaCliente, cod_transmisor: transmisor};
    const result = await catalogosBD.obtenerCodProveedor(params);
    res.send(result);
  });
module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\ajax-petitions.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\authentication.js ---

const express = require("express");
const passport = require("passport");
const pool = require("../database");
const configuracion = require("../lib/config_gral");
const fn = require('../lib/catalogosFunctions');

const router = express.Router();
var path = require('path');
const {  isNotLoggedIn, isLoggedIn } = require("../lib/auth");
const jwthdl = require("../lib/jwt");
const { allowInsecurePrototypeAccess } = require("@handlebars/allow-prototype-access");

function fn_isSimpleAuth(){
    return process.env.LOCAL || "true";
}
router.get('/', (req, res)=>{
    res.redirect("/login");
});
  router.get('/login', function(req, res) {
    let isSimpleAuth = fn_isSimpleAuth();
    res.render('login', { layout: 'aftermain.hbs', isSimpleAuth: isSimpleAuth});
}); 
router.get('/logout', function(req, res) {
        req.logout();
        req.session.destroy((err) => res.redirect('/login'));
}); 

router.post('/principal', function(req, res, next) {
  //  const userMachineName = process.env['USERPROFILE'].split(path.sep)[2];

  var tipo = req.body.hfte;
  var redireccion ="/";
    passport.authenticate('local.signin',{
        successRedirect:"/acceso",
        failureRedirect: redireccion,
        failureFlash :true
    })(req, res, next);
}); 

router.get('/acceso',isLoggedIn , async function(req, res) {
    req.user.IdEmpresaCliente = "--";
    req.user.IdPerfilCliente = "--";
    let cod_empresa  = process.env.EMPRESA_CODE;
    if( req.user.IdPerfil == 0)  //Es administrador de sistema
    {   
        const resultado = await pool.query("Select idEmpresa, nombre from empresas where idEmpresa = ?", cod_empresa);
        res.render('seleccion-empresa', {resultado});
    }else
    {   
        req.user.IdEmpresaCliente = req.user.IdEmpresa;
        req.user.IdPerfilCliente = req.user.IdPerfil;
        req.user.EmpresaCliente = req.user.Empresa;
        await configuracion.Get_menu_sistema(req, req.user.IdEmpresaCliente, req.user.IdPerfil, req.user.IdAgenteRelacionado);
        res.redirect('/menu');
    }
}); 
router.post('/asigna',isLoggedIn , async function(req, res) {
   
let idEmpresaSeleccionada  = req.body.cboEmpresa;
let idAgneciaSeleccionada = req.body.cboAgenteDestino;
let idSucursalSeleccionada = req.body.cboSucursalDestino;
let partes = idSucursalSeleccionada.split('|');

if(idEmpresaSeleccionada !="")
{
    req.user.IdEmpresaCliente = idEmpresaSeleccionada ;
    req.user.IdPerfilCliente = 1;
    req.user.IdPerfilEquivalente = 1;
    req.user.EmpresaCliente = req.body.txtNombreEmpresa;
    if(idAgneciaSeleccionada!= "" ){
        req.user.IdAgenteRelacionado = idAgneciaSeleccionada;
        req.user.AgenteRelacionado = req.body.txtAgenciaSel;
    }

    if(idSucursalSeleccionada!=""){
        req.user.cod_sucursal = partes[0];
        req.user.sucursal =  req.body.txtSucursalSel;
        req.user.cod_sucursal_externo = partes[1];
    }

        const token = jwthdl.generateJwt(req.user);  // Aquí se genera el JWT usando la función
        req.session.authToken = token;  // Guardamos el JWT en la sesión

    await configuracion.Get_menu_sistema(req, req.user.IdEmpresaCliente, req.user.IdPerfil, req.user.IdAgenteRelacionado);
    res.redirect('/menu');
}
else
{

    res.redirect('/acceso');
}
});

router.get('/asigna',isLoggedIn ,async function(req, res) {
    req.user.IdAgenteRelacionado = "";
    req.user.AgenteRelacionado = "";
    req.user.cod_sucursal = "";
    req.user.sucursal =  "";
    req.user.IdEmpresaCliente = req.user.IdEmpresa;
    req.user.IdPerfilCliente = req.user.IdPerfil;
    req.user.EmpresaCliente = req.user.Empresa;
    await configuracion.Get_menu_sistema(req, req.user.IdEmpresaCliente, req.user.IdPerfil, req.user.IdAgenteRelacionado);
    res.redirect("/menu");
}); 
module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\authentication.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\authenticationAD.js ---

const express = require("express");
const router = express.Router();
const passport = require("passport");
const { getAuthUrl, getTokenFromCode } = require('../lib/authAD');
require('dotenv').config();
const axios = require('axios');  
const { isNotLoggedIn } = require("../lib/auth");
const bcrypt = require('bcryptjs');
const jwthdl = require('../lib/jwt');
const pool = require("../database");

router.get('/authAD', async (req, res) => {
    try {
      const authUrl = await getAuthUrl();
      //res.redirect("/auth/callback_fake"); // Redirige al usuario a la URL de autenticación
      res.redirect(authUrl); // Redirige al usuario a la URL de autenticación
    } catch (error) {
      console.error("Error generating auth URL", error);
      res.status(500).send("Error al generar la URL de autenticación.");
    }

});
  
  router.get('/auth/callback', async (req, res, next) => {
    const { code } = req.query;
    if (!code) {
      return res.status(400).send("Código de autorización no recibido.");
    }
    
    try {
      // Obtener el token de acceso usando el código de autorización
     const tokenResponse = await getTokenFromCode(code);
     const idToken = tokenResponse.idToken; // Recuperamos el id_token
     let usuario =  tokenResponse.account.username;
     let usuariolakin = tokenResponse.account.idTokenClaims.extensionAttribute1 == undefined ? usuario : tokenResponse.account.idTokenClaims.extensionAttribute1;
     const encryptedUserAD = await bcrypt.hash(usuario, 10); 
     
      req.session.userAD = usuario;
      req.session.userLakin = usuariolakin;
      req.session.idToken = idToken; // Guardamos el id_token en sesión
       // Llamada a la función de validación de usuario con Azure AD
      const { user, mensaje_salida } = await validateUser(usuario, process.env.EMPRESA_CODE, usuariolakin);

      if (mensaje_salida!="") {
        req.flash("error_msg", mensaje_salida);
        res.redirect("/login");
      }
  
       // Generación del JWT
       const token = jwthdl.generateJwt(user);  // Aquí se genera el JWT usando la función
       
       req.user = user;
       req.session.authToken = token;  // Guardamos el JWT en la sesión
 
       // Devolvemos el JWT
      res.redirect("/acceso");
    } catch (error) {
      console.error("Error al obtener los detalles del usuario: ", error);
      return res.status(500).send("Error al obtener los detalles del usuario." + error);
    }
  });

  router.get('/logoutAD', async (req, res) => {
    try {
      // Elimina el token o la información de sesión almacenada
      const idToken = req.session.idToken;
      let usr = req.session.userAD;
      req.session.destroy((err) => {
        if (err) {
          console.error("Error al destruir la sesión:", err);
          return res.status(500).send("Error al destruir la sesión.");
        }
      });
      let logoutUrl="";
      if (!idToken) {
        logoutUrl = 'https://login.microsoftonline.com/common/oauth2/v2.0/logout' +
                        '?post_logout_redirect_uri=' + encodeURIComponent('https://frd.compliance-itech.com'); // URL de redirección después de cerrar sesión
      }else{
        logoutUrl = `https://login.microsoftonline.com/common/oauth2/v2.0/logout?` +
            `id_token_hint=${encodeURIComponent(idToken)}` + 
            `&logout_hint=${encodeURIComponent(usr)}` +  // Usuario a cerrar sesión
            `&post_logout_redirect_uri=${encodeURIComponent('https://frd.compliance-itech.com')}`;
      }
      res.redirect(logoutUrl); // Redirige al usuario a la URL de Azure AD para el cierre de sesión
    } catch (error) {
      console.error("Error en el cierre de sesión", error);
      res.status(500).send("Error al cerrar sesión.");
    }
  });



  async function validateUser(userAD, empresa, userLakin) {
    let mensaje_salida = "";
    let acceso = 1;
    try {
      const result = await pool.query("call usp_valida_usuario_ad(?,?)", [userAD, empresa]);
      const r = result[0];
  
      if (!r || r.length === 0) {
        mensaje_salida = "El usuario y/o el password son incorrectos, intenta de nuevo";
        acceso = 0;
      }
  
      if (acceso === 1) {
        if (r[0].status_empresa === 0) {
          mensaje_salida = "El sistema se encuentra inhabilitado por el momento";
          acceso = 0;
        }
      }
  
      if (acceso === 1) {
        if (r[0].status_sucursal === 0) {
          mensaje_salida = "La sucursal " + r[0].sucursal + " se encuentra inhabilitada.";
          acceso = 0;
        }
      }
  
      if (acceso === 1) {
        if (r[0].status_usuario === 0) {
          mensaje_salida = "El usuario se encuentra inactivo, por favor contacta al administrador";
          acceso = 0;
        }
      }
  
      if (acceso === 1) {
        const user = {
          IdUser: r[0].cod_usuario,
          Nombre: r[0].nombre_usuario,
          IdPerfil: r[0].id_perfil,
          Perfil: r[0].perfil,
          cod_sucursal: r[0].cod_sucursal,
          sucursal: r[0].sucursal,
          IdEmpresa: r[0].cod_empresa,
          Empresa: r[0].empresa,
          IdAgenteRelacionado: r[0].cod_agente,
          AgenteRelacionado: r[0].agente,
          IdEmpresaCliente: "--",
          IdPerfilCliente: "--",
          EmpresaCliente: "--",
          IsMoral: r[0].isMoral,
          IdPerfilEquivalente: r[0].id_perfil_equivalente,
          usuario: r[0].usuario == "" ?  userLakin : r[0].usuario,
          usuarioAD: r[0].usuarioAD,
          cod_sucursal_externo: r[0].cod_sucursal_externo
        };
        return { user, mensaje_salida };
      }
  
      return { mensaje_salida };
  
    } catch (error) {
      console.error('Error al validar el usuario:', error);
      throw new Error("Error al validar el usuario en la base de datos.");
    }
  }
module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\authenticationAD.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-agentes.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const multer = require("multer");
const fs = require('fs');
const path = require("path");
const { userInfo } = require("os");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const fn_bd = require("../lib/catalogosBD");

router.get('/mantenimiento/agentes', isLoggedIn, async (req, res)=>{ 

    res.render("catalogos/agentes");
  });

  router.all('/mantenimiento/agentes/add',isLoggedIn, async (req, res)=>
{
  let tipo_servicio = req.body.cboTipoServicioAgente;
  let desc_tipo_servicio = "";
  switch (tipo_servicio) {
    case "02":
        desc_tipo_servicio = "ENTREGA EN EFECTIVO"
      break;
    case "03":
        desc_tipo_servicio = "DEPOSITO"
      break;
    default:
      res.redirect("/mantenimiento/agentes");
      break;
  }
  var sql2 = "select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?"
  const plantilla = await pool.query(sql2, req.user.IdEmpresaCliente);  
  const result_actividad = await fn_bd.Cat_actividad_economica();
  let result_nacionalidad  = await fn_bd.Cat_nacionalidad();
  let result_pais_nacimiento = await fn_bd.Cat_paises();
  const result = await pool.query("Select cod_pais, pais FROM cat_paises order by pais");
  let dt = { id : 0, action : "A"}
  let sucursalesTotales = 0;

  let data = {
    tipoServicio_descripcion : desc_tipo_servicio,
    tipoServicio : tipo_servicio
    
  }

  res.render("catalogos/add-agente",{dt, plantilla, result, sucursalesTotales, result_actividad, result_nacionalidad, result_pais_nacimiento, data });
});

router.all('/mantenimiento/agentes/edit', isLoggedIn,async (req, res)=>
{
  if(!req.body.hfidnva){
    res.redirect("/mantenimiento/agentes");
  }
  let idEmpresa  = req.user.IdEmpresaCliente;
  let cod_agente = req.body.hfidnva;

  const plantilla = await pool.query("select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?", req.user.IdEmpresaCliente);     
  const resultPais = await pool.query("Select cod_pais, pais FROM cat_paises order by pais");
  const resultadoPaises = await pool.query("select paises from agentes_paises where cod_empresa = ? and cod_agente = ?", [idEmpresa, cod_agente]);
  const result_actividad = await fn_bd.Cat_actividad_economica();
  const resultT = await pool.query("select ifnull(count(*),0) as totalSucursales from agentes_sucursales where cod_empresa = ? and cod_agente = ?", [idEmpresa, cod_agente]);
  
  let result_nacionalidad  = await fn_bd.Cat_nacionalidad();
  let result_pais_nacimiento = await fn_bd.Cat_paises();

  let sucursalesTotales = resultT[0].totalSucursales;


 let arreglo = {};
 let result = [];
 if(resultadoPaises.length>0){
   arreglo = resultadoPaises[0].paises.split("|");
 }
  
 resultPais.forEach(element => {
    let ch = 0;
    if(arreglo.length>0){
      if(arreglo.find(x => x === element.cod_pais)){ch = 1}
    }
    objeto = {cod_pais : element.cod_pais, pais : element.pais, seleccionado: ch };
  result.push(objeto)

 });

  const resultadoPermisos = await pool.query("select * from agentes_permisos where cod_empresa = ? and cod_agente = ?", [idEmpresa, cod_agente]);
  let rs = {}
   if(resultadoPermisos.length>0){
     rs = {er: resultadoPermisos[0].EnvioRemesa, pr:resultadoPermisos[0].PagoRemesa}; 
   }

  const resultadoBusqueda = await pool.query("select *, DATE_FORMAT(fecha_contrato, '%d/%m/%Y') as fecha_contrato_formato, DATE_FORMAT(fecha_registro, '%d/%m/%Y') as fecha_registro, DATE_FORMAT(fecha_baja, '%d/%m/%Y') as fecha_baja, case tipo_servicio when '02' then 'ENTREGA EN EFECTIVO' when '03' then 'DEPOSITO' else '' end as tipo_servicio_descripcion  from agentes_relacionados where cod_empresa = ? and cod_agente = ?", [idEmpresa, cod_agente]);
 
  let tipoN="";
  let tipoI ="";
  let data = {};
  if (resultadoBusqueda.length>0){
    if(resultadoBusqueda[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
    data = {
      cod_agente_externo: resultadoBusqueda[0].cod_agente_externo,
      nombre: resultadoBusqueda[0].nombre,
      nombrePF: resultadoBusqueda[0].nombre_pf, 
      apaternoPF: resultadoBusqueda[0].apaterno_pf,
      amaternoPF: resultadoBusqueda[0].amaterno_pf,
      nacionalidadPF: resultadoBusqueda[0].nacionalidad_agente,
      rfc: resultadoBusqueda[0].rfc,
      telefono: resultadoBusqueda[0].telefono,
      web: resultadoBusqueda[0].pagina_web,
      email:resultadoBusqueda[0].email,
      calle: resultadoBusqueda[0].calle,
      noint: resultadoBusqueda[0].no_int,
      noext: resultadoBusqueda[0].no_ext,
      ciudad: resultadoBusqueda[0].ciudad,
      cp: resultadoBusqueda[0].cp,
      tipoI: tipoI,
      tipoN:tipoN,
      cboColonia : resultadoBusqueda[0].cod_asentamiento,
      cboEstado : resultadoBusqueda[0].cod_estado,
      cboMuncipio : resultadoBusqueda[0].cod_municipio,
      txtColonia : resultadoBusqueda[0].asentamiento,
      txtEstado : resultadoBusqueda[0].estado,
      txtMunicipio :resultadoBusqueda[0].municipio,
      pais : resultadoBusqueda[0].cod_pais,
      status : resultadoBusqueda[0].status,
      tipoPersona : resultadoBusqueda[0].tipoPersona,
      subtipo : resultadoBusqueda[0].subtipo,
      curp:  resultadoBusqueda[0].curp,
      id_nivel: resultadoBusqueda[0].nivel_riesgo,
      fechacontrato: resultadoBusqueda[0].fecha_contrato_formato,
      importe_max : resultadoBusqueda[0].importe_max,
      divisa_importe_max : resultadoBusqueda[0].divisa_importe_max,
      cod_actividad : resultadoBusqueda[0].cod_actividad_mercantil,
      nombreApoderado : resultadoBusqueda[0].nombre_apoderado,
      apaternoApoderado : resultadoBusqueda[0].apaterno_apoderado,
      amaternoApoderado : resultadoBusqueda[0].amaterno_apoderado,
      rfcApoderado : resultadoBusqueda[0].rfc_apoderado,
      curpApoderado : resultadoBusqueda[0].curp_apoderado,
      fecha_registro  : resultadoBusqueda[0].fecha_registro,
      fecha_baja  : resultadoBusqueda[0].fecha_baja,
      paisNacimiento : resultadoBusqueda[0].pais_nacimiento_pf,
      nacionalidad : resultadoBusqueda[0].nacionalidad_agente,
      participaReporte : resultadoBusqueda[0].participaReporte,
      tipoServicio_descripcion : resultadoBusqueda[0].tipo_servicio_descripcion,
      tipoServicio : resultadoBusqueda[0].tipo_servicio,
      comision: resultadoBusqueda[0].comision
    };
  }  
  
  let dt = { id : cod_agente, action : "C"}
 
   res.render("catalogos/add-agente", {data, dt, plantilla, result, rs, result_actividad, sucursalesTotales, result_nacionalidad, result_pais_nacimiento});
});

router.post('/mantenimiento/agentes/addAgenteProcess',isLoggedIn,async function (req, res, next) {
  
  let tipoI = "";
  let tipoN = "";
  let TipoDomicilio = "N";
  let Cod_colonia = "";
  let dts = req.body.hftiposervicio;

  if(dts=="02"){
  
    if(req.body.cboColonia!="")
    {
      Cod_colonia = req.body.cboColonia.split("|")[0];
    }
    if(req.body.optTipoDom=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
  }
  const data = {
    cod_agente_externo: req.body.txtAgenteExterno == undefined ? "" : req.body.txtAgenteExterno.toUpperCase(),
    nombre: req.body.txtNombreAgente == undefined ? "" : req.body.txtNombreAgente.toUpperCase(),
    nombrePF: req.body.txtNombrePFAgente == undefined ? "" : req.body.txtNombrePFAgente.toUpperCase(),
    apaternoPF: req.body.txtApaternoPFAgente == undefined ? "" : req.body.txtApaternoPFAgente.toUpperCase(),
    amaternoPF: req.body.txtAmaternoPFAgente == undefined ? "" : req.body.txtAmaternoPFAgente.toUpperCase(),
    telefono: req.body.txtTelefono == undefined ? "": req.body.txtTelefono,
    email:req.body.txtEmail == undefined ? "": req.body.txtEmail,
    web: req.body.txtWeb == undefined ? "": req.body.txtWeb,
    calle: req.body.txtCalle == undefined ? "": req.body.txtCalle.toUpperCase(),
    noint: req.body.txtNumInt == undefined ? "": req.body.txtNumInt.toUpperCase(),
    noext: req.body.txtNumExt == undefined ? "": req.body.txtNumExt.toUpperCase(),
    ciudad: req.body.txtCiudad == undefined ? "": req.body.txtCiudad.toUpperCase(),
    cp: req.body.txtCP == undefined ? "": req.body.txtCP,
    tipoI:  tipoI,
    tipoN:  tipoN,
    cboColonia : req.body.cboColonia == undefined ? "": req.body.cboColonia,
    cboEstado : req.body.cboEstado == undefined ? "":  req.body.cboEstado,
    cboMuncipio : req.body.cboMunicipio == undefined ? "": req.body.cboMunicipio,
    txtColonia : req.body.txtColonia == undefined ? "": req.body.txtColonia,
    txtEstado : req.body.txtEstado == undefined ? "": req.body.txtEstado,
    txtMunicipio : req.body.txtMunicipio == undefined ? "": req.body.txtMunicipio,
    pais :   req.body.cboPais == undefined ? "": req.body.cboPais,
    status : req.body.cboStatus == undefined ? 1 : req.body.cboStatus,
    tipoPersona : req.body.cboTipoPersona2 == undefined ? "PM" : req.body.cboTipoPersona,
    subtipo : req.body.cboTipoPersona2 == undefined ? "" : req.body.cboTipoPersona2,
    rfc: req.body.txtRFC == undefined ? "": req.body.txtRFC.toUpperCase(),
    curp: req.body.txtCURP == undefined ? "" : req.body.txtCURP.toUpperCase(),
    id_nivel: req.body.cboPlantillaAdd,
    fechacontrato: req.body.txtFechaContrato,
    importe_max : req.body.txtImporteMax,
    divisa_importe_max : req.body.cboDivisa,
    cod_actividad : req.body.cboActividad,
    nombreApoderado : req.body.txtNombreApoderado == undefined ? "" : req.body.txtNombreApoderado.toUpperCase(),
    apaternoApoderado : req.body.txtAmaternoApoderado == undefined ? "" : req.body.txtAmaternoApoderado.toUpperCase(),
    amaternoApoderado : req.body.txtApaternoApoderado == undefined ? "" : req.body.txtApaternoApoderado.toUpperCase(),
    rfcApoderado : req.body.txtRFCApoderado == undefined ? "": req.body.txtRFCApoderado,
    curpApoderado :req.body.txtCURPApoderado == undefined ? "": req.body.txtCURPApoderado,
    fecha_registro  : req.body.hfFechaActivo,
    fecha_baja  : req.body.hfFechaBaja,
    paisNacimiento :req.body.cboPaisNacimiento == undefined ? "" : req.body.cboPaisNacimiento,
    nacionalidad: req.body.cboNacionalidad == undefined ? "" : req.body.cboNacionalidad,
    participaReporte: req.body.cboParticipa == undefined ? "" : req.body.cboParticipa,
    tipoServicio_descripcion : req.body.hftiposerviciodes,
    tipoServicio : req.body.hftiposervicio,
    comision: req.body.txtComision == undefined ? null : req.body.txtComision
  };
  let sql;
  let registro = [];
  let success_msg="";
  let error_msg="";
  let action = "";

  let fecha_contratoBase =  fn.ConvierteFechaFormatoBase(req.body.txtFechaContrato)
  if(req.body.hdActivaPanel=="A")  // INSERT
  {
    action = 'A';
     sql = 'CALL usp_inserta_agente_relacionado(?)';
     success_msg = "El agente relacionado se ha registrado correctamente";
     error_msg = "El agente relacionado que estas registrando ya existe en sistema";
     registro = [req.user.IdEmpresaCliente, data.nombre, data.telefono, data.email,data.web, TipoDomicilio,data.pais,data.cboEstado, data.cboMuncipio, Cod_colonia,data.ciudad, data.cp, data.txtEstado, data.txtMunicipio, data.txtColonia,data.calle, data.noext, data.noint ,data.status, data.tipoPersona, data.subtipo, data.rfc, data.curp, data.id_nivel, fecha_contratoBase, req.user.IdUser,data.importe_max, data.divisa_importe_max, data.cod_actividad, data.nombreApoderado, data.rfcApoderado, data.curpApoderado, data.apaternoApoderado, data.amaternoApoderado, data.nombrePF, data.apaternoPF, data.amaternoPF, data.paisNacimiento, data.nacionalidad, data.cod_agente_externo, data.participaReporte, data.tipoServicio, data.comision ];
     
  }else{
     action = 'C';
     sql = 'CALL usp_actualiza_agente_relacionado(?)';
     success_msg = "El agente relacionado se ha actualizado correctamente";
     error_msg = "Error al tratar de actualizar los datos del agente relacionado";
     registro = [req.user.IdEmpresaCliente, req.body.hfidnva , data.nombre, data.telefono, data.email,data.web, TipoDomicilio,data.pais,data.cboEstado, data.cboMuncipio, Cod_colonia,data.ciudad, data.cp, data.txtEstado, data.txtMunicipio, data.txtColonia,data.calle, data.noext, data.noint ,data.status, data.tipoPersona, data.subtipo, data.rfc, data.curp, data.id_nivel, fecha_contratoBase, req.user.IdUser,data.importe_max, data.divisa_importe_max, data.cod_actividad, data.nombreApoderado, data.rfcApoderado, data.curpApoderado, data.apaternoApoderado, data.amaternoApoderado, data.nombrePF, data.apaternoPF, data.amaternoPF, data.paisNacimiento, data.nacionalidad, data.cod_agente_externo, data.participaReporte, data.comision ];
  }
  
  let dt = { action: req.body.hdActivaPanel,   id: req.body.hfidnva }
  var sql2 = "select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?"
  const plantilla = await pool.query(sql2, req.user.IdEmpresaCliente);  
  const resultPais = await pool.query("Select cod_pais, pais FROM cat_paises order by pais");
  const resultadoPaises = await pool.query("select paises from agentes_paises where cod_empresa = ? and cod_agente = ?", [req.user.IdEmpresaCliente, req.body.hfidnva]);
  const result_actividad = await fn_bd.Cat_actividad_economica();
  const resultT = await pool.query("select ifnull(count(*),0) as totalSucursales from agentes_sucursales where cod_empresa = ? and cod_agente = ?", [req.user.IdEmpresaCliente, req.body.hfidnva]);
  let result_nacionalidad  = await fn_bd.Cat_nacionalidad();
  let result_pais_nacimiento = await fn_bd.Cat_paises();

 let sucursalesTotales = resultT[0].totalSucursales;
 let arreglo = {};
 let result = [];
 if(resultadoPaises.length>0){
   arreglo = resultadoPaises[0].paises.split("|");
 }
  
 resultPais.forEach(element => {
    let ch = 0;
    if(arreglo.length>0){
      if(arreglo.find(x => x === element.cod_pais)){ch = 1}
    }
    objeto = {cod_pais : element.cod_pais, pais : element.pais, seleccionado: ch };
  result.push(objeto)

 });

  const resultadoPermisos = await pool.query("select * from agentes_permisos where cod_empresa = ? and cod_agente = ?", [req.user.IdEmpresaCliente, req.body.hfidnva]);
  let rs = {}
   if(resultadoPermisos.length>0){
     rs = {er: resultadoPermisos[0].EnvioRemesa, pr:resultadoPermisos[0].PagoRemesa}; 
   }


  await pool.query(sql, [registro])
    .then(function(resultadoObtenido) {
          let r =resultadoObtenido[0];
          if((r[0]).cod=="00"){
            if(action =="A") { dt = { action: "C",   id: r[0].cod_agencia }; }
            
            res.render("catalogos/add-agente",{success_msg, data, dt, plantilla, result, rs, result_actividad,sucursalesTotales,result_nacionalidad, result_pais_nacimiento});
          }else { 
            error_msg = r[0].msg;
            
            res.render("catalogos/add-agente",{error_msg, data, dt, plantilla, result, rs, result_actividad,sucursalesTotales,result_nacionalidad, result_pais_nacimiento});
          }
    }).catch(function(err){
      error_msg = err;
      res.render("catalogos/add-agente",{error_msg, data, dt , plantilla, result, rs, result_actividad,sucursalesTotales, result_nacionalidad, result_pais_nacimiento});
    });
  });

  
router.post('/mantenimiento/findAgentes',isLoggedIn, async (req, res)=>{
  let nombre = req.body.txtNombreBusqueda.toUpperCase();
  let status = req.body.optStatus;
  let conditions= "";
   if(nombre!="")
   {
     conditions = " and  nombre LIKE '%" + nombre + "%'";
   }
   if(status!="")
   {
      conditions += " and status =" + status 
   }
   
   let sql = "select cod_agente, cod_agente_externo, nombre, rfc,  telefono, email, case when status  = 1 then 'ACTIVO' else 'INACTIVO' end as descripcion_status, importe_max, divisa_importe_max, case ifnull(participaReporte, 99) when 1 then 'SI' when 0 then 'NO' else '' end as participaReporte, case tipo_servicio when '02' then 'ENTREGA EN EFECTIVO' when '03' then 'DEPOSITO' else '' end as tipo_servicio from agentes_relacionados where cod_empresa = ? " + conditions +";"
  
   const result = await pool.query(sql, [req.user.IdEmpresaCliente]);
  
   res.render("catalogos/agentes", {result, nombre, status});
});

router.post('/agentes/mantenimiento/ajx/updPermisos',isLoggedIn,  async (req, res)=>{ 
  let data = [req.user.IdEmpresaCliente, req.body.codigo, req.body.er, req.body.pr];
  await pool.query("Call usp_gestiona_agentePermisos (?)", [data]).then(function(result){
    res.send("OK");
  }).catch(function(err){
    res.send(err);
  });
});

router.post('/agentes/mantenimiento/ajx/updPaises',isLoggedIn,  async (req, res)=>{ 
  let data = [req.user.IdEmpresaCliente, req.body.codigo, req.body.paises];
  await pool.query("Call usp_gestiona_agentePaises (?)", [data]).then(function(result){
    console.log(data);
    console.log(result);
    res.send("OK");

  }).catch(function(err){
    res.send(err);
  });
});





  module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-agentes.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-empleados.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const multer = require("multer");
const fs = require('fs');
const path = require("path");
const { userInfo } = require("os");
const { isLoggedIn } = require("../lib/auth");
const url = require('url');
const fn = require("../lib/catalogosFunctions");
const fn_bd = require("../lib/catalogosBD");
const crypto = require('crypto');
const { repeatWithFinalize } = require("linq");


router.get('/mantenimiento/empleados', isLoggedIn, async(req, res)=>{
    const result_agentes = await pool.query("select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? ", req.user.IdEmpresaCliente); 
    res.render("catalogos/empleado",{result_agentes});
});

router.get('/mantenimiento/empleados/add', isLoggedIn, async (req, res)=>{ 
    const result_agentes = await pool.query("select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? ", req.user.IdEmpresaCliente); 
    let dt = { id : 0, action : "A"}
    let showPass = req.user.IdEmpresaCliente ==process.env.EMPRESA_CODE ? "false" : "true";
    res.render("catalogos/add-empleado", {dt, result_agentes, showPass});
});


router.post('/mantenimiento/empleados/addEmpleadosProcess',isLoggedIn,async function (req, res, next) {
    let datausuario = {};
    let tipoI = "";
    let tipoN = "";
    let TipoDomicilio = "";
    let Cod_colonia = "";
    if(req.body.cboColonia!="")
      {
        Cod_colonia = req.body.cboColonia.split("|")[0];
      }
    if(req.body.optTipoDom=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
    const data = {
      cod_agente : req.body.cboAgente == undefined ? req.body.hfidcoda : req.body.cboAgente,
      nombre: req.body.txtNombre.toUpperCase(),
      apaterno: req.body.txtApaterno.toUpperCase(),
      amaterno: req.body.txtAmaterno.toUpperCase(),
      telefono: req.body.txtTelefono,
      email: req.body.txtCorreo,
      fechanacimiento : req.body.txtFechaNacimiento,
      calle: req.body.txtCalle.toUpperCase(),
      noint: req.body.txtNumInt.toUpperCase(),
      noext: req.body.txtNumExt.toUpperCase(),
      ciudad: req.body.txtCiudad.toUpperCase(),
      cp: req.body.txtCP,
      tipoI: tipoI,
      tipoN: tipoN,
      cboColonia : req.body.cboColonia,
      cboEstado : req.body.cboEstado,
      cboMuncipio : req.body.cboMunicipio,
      txtColonia : req.body.txtColonia,
      txtEstado : req.body.txtEstado,
      txtMunicipio : req.body.txtMunicipio,
      pais : req.body.cboPais,
      status : req.body.cboStatus == undefined ? 1 : req.body.cboStatus,
      rfc : req.body.txtRFC,
      curp : req.body.txtCURP,
      nss : req.body.txtNSS,
      tipo_empleado : req.body.cboTipoEmpleado,
      cod_agente : req.body.cboAgente,
      recibeCorreoPLD : req.body.cboNotificaEmail
    };
    let fecha_NacimientoBase =  fn.ConvierteFechaFormatoBase(req.body.txtFechaNacimiento);
    let sql;
    let registro = [];
    let success_msg="";
    let error_msg="";
    let action = "";
    if(req.body.hdActivaPanel=="A")  // INSERT
    {
      action = 'A';
       sql = 'CALL usp_inserta_empleado(?)';
       success_msg = "El  empleado se ha registrado correctamente";
       error_msg = "El empleado que estas registrando ya existe en sistema";
       registro = [req.user.IdEmpresaCliente, data.nombre, data.apaterno, data.amaterno, data.telefono, data.email, fecha_NacimientoBase, TipoDomicilio,data.pais,data.cboEstado, data.cboMuncipio, Cod_colonia,data.ciudad, data.cp, data.txtEstado, data.txtMunicipio, data.txtColonia,data.calle, data.noext, data.noint ,data.status, data.rfc, data.curp, data.nss, data.tipo_empleado, data.cod_agente];
       
    }else{
       action = 'C';
       sql = 'CALL usp_actualiza_empleado(?)';
       success_msg = "El empleado se ha actualizado correctamente";
       error_msg = "Error al tratar de actualizar los datos del empleado";
       registro = [req.user.IdEmpresaCliente,req.body.hfidnva, data.nombre, data.apaterno, data.amaterno, data.telefono, data.email, fecha_NacimientoBase, TipoDomicilio,data.pais,data.cboEstado, data.cboMuncipio, Cod_colonia,data.ciudad, data.cp, data.txtEstado, data.txtMunicipio, data.txtColonia,data.calle, data.noext, data.noint ,data.status, data.rfc, data.curp, data.nss, data.tipo_empleado, data.cod_agente];
       
    }
    const result_agentes = await pool.query("select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? ", req.user.IdEmpresaCliente); 
    
  let condicion = "" ;
  if(req.user.IdPerfilCliente!=0){
    condicion = " and a.id_perfil<> 0" 
  }
  const result_perfiles = await pool.query("select a.id_perfil, b.descripcion from  tipo_empleado_perfiles a inner join cat_perfiles b on (b.id_perfil = a.id_perfil ) where  cod_tipo_empleado = ? "+ condicion, data.tipo_empleado); 
  const result_sucursales = await pool.query("select cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_agente = ? and status = 1", [req.user.IdEmpresaCliente, data.cod_agente]); 
  const result_usuario = await pool.query("select * from  usuarios a where a.cod_empresa = ? and cod_empleado = ? ", [req.user.IdEmpresaCliente, req.body.hfidnva]); 
  if(result_usuario.length>0){
    datausuario = {
      usuario : result_usuario[0].usuario,
      pwd : result_usuario[0].password_usuario,
      status :result_usuario[0].status,
      idperfil: result_usuario[0].id_perfil,
      cod_sucursal : result_usuario[0].cod_sucursal
    }
  }
  
    let dt = { action: req.body.hdActivaPanel,   id: req.body.hfidnva }
    await pool.query(sql, [registro])
      .then(function(resultadoObtenido) {
            let r =resultadoObtenido[0];
            if((r[0]).cod=="00"){

              fn_bd.Asigna_notificacion_correo_empleado(req, r[0].cod_empleado, "PLD", data.recibeCorreoPLD);

              if(action =="A") { dt = { action: "C",   id: r[0].cod_empleado }; 
                res.render("catalogos/add-empleado",{success_msg, data, dt, result_agentes, result_perfiles,result_sucursales,datausuario });
              }else{
                req.flash("success_msg", success_msg)
                res.redirect(url.format({pathname: "/mantenimiento/empleados/edit",  query:{"hfidnva": req.body.hfidnva }}));
              }
            }else { 
              error_msg = r[0].msg;
              res.render("catalogos/add-empleado",{error_msg, data, dt, result_agentes, result_perfiles,result_sucursales, datausuario});
            }
      }).catch(function(err){
        error_msg = err;
        res.render("catalogos/add-empleado",{error_msg, data, dt, result_agentes, result_perfiles, result_sucursales, datausuario});
    });
});

    
router.all('/mantenimiento/empleados/edit', isLoggedIn,async (req, res)=>
{
  let cod_empleado="";
  if(!req.body.hfidnva){
    if(!req.query.hfidnva){
      res.redirect("/mantenimiento/empleados");
    }else{
        cod_empleado = req.query.hfidnva;
    }
  }else{
    cod_empleado = req.body.hfidnva;
  }
  let idEmpresa  = req.user.IdEmpresaCliente;
  const result_agentes = await pool.query("select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? ", req.user.IdEmpresaCliente); 
  const resultadoBusqueda = await pool.query("select a.*,ifnull(a.cod_agente,'00000') as cod_agente_f,date_format(a.fecha_nacimiento,'%d/%m/%Y') as fechanacimiento_formato, case when ifnull(b.cod_empleado, 'N') = 'N' then 0 else 1 end as recibe_notificacion_correo_pld from empleados a left join notificacion_correo_empleado b on (b.cod_empresa = a.cod_empresa and b.cod_empleado = a.cod_empleado and modulo_correo = 'PLD' ) where a.cod_empresa = ? and a.cod_empleado = ?", [idEmpresa, cod_empleado]);
  const result_usuario = await pool.query("select * from  usuarios a where a.cod_empresa = ? and cod_empleado = ? ", [req.user.IdEmpresaCliente, cod_empleado]); 
  
  let tipoN="";
  let tipoI ="";
  let data = {};
  let datausuario = {};
  if (resultadoBusqueda.length>0){
    if(resultadoBusqueda[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
    data = {
      cod_agente: resultadoBusqueda[0].cod_agente_f,
      nombre: resultadoBusqueda[0].nombre,
      apaterno: resultadoBusqueda[0].apaterno,
      amaterno: resultadoBusqueda[0].amaterno,
      telefono: resultadoBusqueda[0].telefono,
      fechanacimiento : resultadoBusqueda[0].fecha_nacimiento,
      fecha_Nacimiento_formato : resultadoBusqueda[0].fechanacimiento_formato,
      email: resultadoBusqueda[0].email,
      calle: resultadoBusqueda[0].calle,
      noint: resultadoBusqueda[0].no_int,
      noext: resultadoBusqueda[0].no_ext,
      ciudad: resultadoBusqueda[0].ciudad,
      cp: resultadoBusqueda[0].cp,
      tipoI: tipoI,
      tipoN:tipoN,
      cboColonia : resultadoBusqueda[0].cod_asentamiento + "|" + resultadoBusqueda[0].cp,
      cboEstado : resultadoBusqueda[0].cod_estado,
      cboMuncipio : resultadoBusqueda[0].cod_municipio,
      txtColonia : resultadoBusqueda[0].asentamiento,
      txtEstado : resultadoBusqueda[0].estado,
      txtMunicipio :resultadoBusqueda[0].municipio,
      pais : resultadoBusqueda[0].cod_pais,
      status : resultadoBusqueda[0].status,
      rfc :resultadoBusqueda[0].rfc,
      curp :resultadoBusqueda[0].curp,
      nss :resultadoBusqueda[0].nss,
      tipo_empleado : resultadoBusqueda[0].tipo_empleado,
      cod_agente : resultadoBusqueda[0].cod_agente,
      recibeCorreoPLD : resultadoBusqueda[0].recibe_notificacion_correo_pld
    };
  }  
  console.log(data);
  if(result_usuario.length>0){
    datausuario = {
      usuario : result_usuario[0].usuario,
      pwd : result_usuario[0].password_usuario,
      status :result_usuario[0].status,
      idperfil: result_usuario[0].id_perfil,
      cod_sucursal : result_usuario[0].cod_sucursal
    }
  }
  let dt = { id : cod_empleado, action : "C"}
  let condicion = "" ;
  if(req.user.IdPerfilCliente!=0){
    condicion = " and id_perfil<> 0" 
  }
  const result_perfiles = await pool.query("select * from vw_perfiles_by_usuario where cod_empresa = ? and cod_tipo_empleado = ? "+ condicion, [req.user.IdEmpresaCliente,data.tipo_empleado]); 
  const result_sucursales = await pool.query("select cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_agente = ? and status = 1 order by nombre asc", [req.user.IdEmpresaCliente, data.cod_agente]); 
  let showPass = req.user.IdEmpresaCliente == process.env.EMPRESA_CODE ? "false" : "true";
   res.render("catalogos/add-empleado", {data, dt, result_agentes, result_perfiles, result_sucursales, datausuario,showPass});
});

router.post('/mantenimiento/findEmpleados',isLoggedIn, async (req, res)=>{
    let nombre = req.body.txtNombreBusqueda.toUpperCase();
    let status = req.body.optStatus;
    let cod_agente = req.body.cboAgente;
    let tipoEmpleado = req.body.cboTipoEmpleado;
    let usuario = req.body.txtUsuario;
    let cod_sucursal = req.body.cboSucursal;
    let conditions= "";
  
      var sql2 = "select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? "
      const result_agentes = await pool.query(sql2, req.user.IdEmpresaCliente);  
  
     if(cod_agente!="")
     {
        conditions += " and cod_agente ='" + cod_agente + "'";
     }
     if(tipoEmpleado!="")
     {
        conditions += " and tipo_empleado ='" + tipoEmpleado + "'";
     }
     if(nombre!="")
     {
       conditions = " and  concat(nombre,' ', apaterno, ' ', ifnull(amaterno,'')) LIKE '%" + nombre + "%'";
     }
     if(status!="")
     {
        conditions += " and status =" + status ;
     }
     if (usuario!=""){
      conditions += " and usuario ='" + usuario + "'";
     }
     if(cod_sucursal!="" && cod_sucursal != undefined)
     {
        conditions += " and cod_sucursal ='" + cod_sucursal + "'";
     }
     
     let sql = "select cod_empleado, concat(nombre, ' ' , apaterno, ' ' , ifnull(amaterno,'')) as nombre, concat (calle, ' ', no_ext, ' ', ifnull(no_int,''), ' COL.', asentamiento, ' CP. ',cp, ' ', municipio, ' ', estado)  as domicilio, descripcion_status, descripcion_Tipo_empleado, agente_relacionado,usuario, sucursal, perfil  from vw_empleados  where cod_empresa = ? " + conditions +";"
     const result = await pool.query(sql, [req.user.IdEmpresaCliente]);
    
     res.render("catalogos/empleado", {result, nombre, status, cod_agente, tipoEmpleado, result_agentes, usuario, cod_sucursal});
  });
  
  router.post('/mantenimiento/empleados/ajx/updUsuario',isLoggedIn, async (req, res)=>{
    pwd = req.body.pwd == "" ? generatePassword() : req.body.pwd;
    let data = [req.user.IdEmpresaCliente, req.body.id_empleado, req.body.usuario, pwd , req.body.perfil, req.body.cod_sucursal, req.body.status];
    console.log(data);
    await pool.query("Call usp_gestiona_usuario (?)", [data]).then(function(result){
      let r =result[0];
            if((r[0]).cod=="00"){
              res.send("OK");
            }else{
            
              error_msg = r[0].msg;
              res.send(error_msg);
            };
    }).catch(function(err){
      res.send(err);
    });
  });

  router.post('/mantenimiento/empleados/ajx/loadModulos',isLoggedIn, async (req, res)=>{
    const result = await pool.query("select nombre from vw_perfil_modulos where idEmpresa = ? and id_perfil = ? and (id_padre <> 0 or (id_menu=2 and id_padre = 0))", [req.user.IdEmpresaCliente, req.body.id]); 
    res.send(result);
  });

  router.post('/mantenimiento/empleados/ajx/loadSucursales',isLoggedIn, async (req, res)=>{
    const result = await pool.query("select cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_agente = ? and status = 1", [req.user.IdEmpresaCliente, req.body.id]); 
    res.send(result);
  });
  
  function generatePassword(length = 15) {
    return crypto.randomBytes(length)
        .toString('base64')  // Convierte a base64 para obtener más caracteres
        .replace(/[^a-zA-Z0-9]/g, '') // Elimina caracteres especiales
        .slice(0, length); // Asegura que tenga la longitud deseada
}

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-empleados.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-empresas.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const multer = require("multer");
const fs = require('fs');
const path = require("path");
const { userInfo } = require("os");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const fn_catalogos = require("../lib/catalogosBD");
const configuracion = require("../lib/config_gral");
const { reset } = require("nodemon");
const catalogosBD = require("../lib/catalogosBD");


const storage = multer.diskStorage({
    destination:function(req,file,cb){
      var ruta = './src/public/ConfigClientes/' + req.body.hfidnva;
        if (!fs.existsSync(ruta)) { fs.mkdirSync(ruta);}
        cb(null, ruta + "/");
    },
    filename:function(req,file,cb){
        //cb(null, "logo" + path.extname(file.originalname));
        cb(null, "logo.png"); 
    }
});

const upload = multer({ storage: storage,
  fileFilter: function (req, file, cb) {
 
    if (!file.originalname.match(/\.(png|jpeg|jpg)$/)) {
      return cb(new Error('Error en el tipo de archivo.'));
    }
    cb(null, true);
  
  }
  });


router.get('/mantenimiento/empresas', isLoggedIn, (req, res)=>{ 
  if(req.user.IdPerfilCliente!= 0){
    res.redirect("/mantenimiento/empresas/edit");
  }else
  {
    res.render("catalogos/empresas");
  }
});

router.get('/mantenimiento/empresas/add',isLoggedIn, async (req, res)=>
{
  const result = await pool.query("select CONCAT('EM', LPAD((SUBSTRING(ifnull(max(idEmpresa),0),3,3) + 1),3,'0')) as idEmpresa from empresas");
  let result_actividad = await fn_catalogos.Cat_actividad_economica();
   let dt = { id : result[0].idEmpresa, action : "A" }
   res.render("catalogos/add-empresa", {dt, result_actividad});
});

router.all('/mantenimiento/empresas/edit', isLoggedIn,async (req, res)=>
{
  let idEmpresa ="";
  if(req.user.IdPerfilCliente!=0){
      idEmpresa = req.user.IdEmpresaCliente;
  }else{
      idEmpresa = req.body.hfidnva;
  }

  const result = await pool.query("select *, date_format(fecha_registro_inicio,'%d/%m/%Y') as fecha_registro_inicio_formato, date_format(fecha_registro_fin,'%d/%m/%Y') as fecha_registro_fin_formato  from empresas where idEmpresa = ?", idEmpresa);
  let apikey = "";
  let result_api = await catalogosBD.Get_Api_Key_webservices(idEmpresa);
  
  if(result_api[0] !=undefined){
    let reg = result_api[0];
    apikey = reg.apiKey;
  }

  let tipoN="";
  let tipoI ="";
  if(result[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
  const data = {
    api_key : apikey,
    cod_actividad : result[0].cod_actividad,
    nombre: result[0].nombre,
    rfc: result[0].rfc,
    telefono: result[0].telefono,
    web: result[0].pagina_web,
    email:result[0].email,
    calle: result[0].calle,
    noint: result[0].no_int,
    noext: result[0].no_ext,
    ciudad: result[0].ciudad,
    cp: result[0].cp,
    tipoI: tipoI,
    tipoN:tipoN,
    cboColonia : result[0].cod_asentamiento,
    cboEstado : result[0].cod_estado,
    cboMuncipio : result[0].cod_municipio,
    txtColonia : result[0].asentamiento,
    txtEstado : result[0].estado,
    txtMunicipio : result[0].municipio,
    pais : result[0].cod_pais,
    status : result[0].status,
    no_registro : result[0].no_registro,
    fecha_registro_inicio : result[0].fecha_registro_inicio_formato,
    fecha_registro_fin : result[0].fecha_registro_fin_formato,
    alias : result[0].alias,
    operaPersonaMoral : result[0].operaPersonaMoral,
    id_nivel : result[0].nivel_riesgo
  };
  let result_actividad = await fn_catalogos.Cat_actividad_economica();
   let dt = { id : idEmpresa, action : "C"}
   const plantilla = await pool.query("select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?", req.user.IdEmpresaCliente);     
    
   res.render("catalogos/add-empresa", {data, dt, result_actividad, plantilla});
});

var type = upload.single('flLogo');
router.post('/mantenimiento/empresas/addEmpresaProcess',isLoggedIn, type,async function (req, res, next) {
let  rutaArchivo ="";
if(req.file){
    rutaArchivo = req.file.path;
}
let tipoI = "";
let tipoN = "";
let TipoDomicilio = "";
let Cod_colonia = "";
if(req.body.cboColonia!="")
  {
    Cod_colonia = req.body.cboColonia.split("|")[0];
  }
if(req.body.optTipoDom=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}


let apikey = "";
  let result_api = await catalogosBD.Get_Api_Key_webservices(req.body.hfidnva);
  if(result_api[0] !=undefined){
    let reg = result_api[0];
    apikey = reg.apiKey;
  }
const data = {
  api_key : apikey,
  cod_actividad: req.body.cboActividad,
  nombre: req.body.txtNombreEmpresa.toUpperCase(),
  rfc: req.body.txtRFC.toUpperCase(),
  telefono: req.body.txtTelefono,
  web: req.body.txtWeb,
  email:req.body.txtEmail,
  calle: req.body.txtCalle.toUpperCase(),
  noint: req.body.txtNumInt.toUpperCase(),
  noext: req.body.txtNumExt.toUpperCase(),
  ciudad: req.body.txtCiudad.toUpperCase(),
  cp: req.body.txtCP,
  tipoI: tipoI,
  tipoN:tipoN,
  cboColonia : req.body.cboColonia,
  cboEstado : req.body.cboEstado,
  cboMuncipio : req.body.cboMunicipio,
  txtColonia : req.body.txtColonia,
  txtEstado : req.body.txtEstado,
  txtMunicipio : req.body.txtMunicipio,
  pais : req.body.cboPais,
  status : req.body.cboStatus == undefined ? 1 : req.body.cboStatus,
  no_registro : req.body.txtRegistroCNBV,
  fecha_registro_inicio : req.body.txtFechaIniCNBV,
  fecha_registro_fin : req.body.txtFechaFinCNBV,
  alias : req.body.txtAlias == undefined ? '' : req.body.txtAlias.toUpperCase(),
  operaPersonaMoral : req.body.cboOperaPersonaMoral,
  id_nivel :  req.body.cboPlantillaAdd == undefined ? 0 : req.body.cboPlantillaAdd
};
let sql;
let success_msg="";
let error_msg="";
let action = "";
let fecha_registro_inicio_base = "";
let fecha_registro_fin_base = "";
if(req.body.txtFechaIniCNBV!=""){
  fecha_registro_inicio_base = fn.ConvierteFechaFormatoBase(req.body.txtFechaIniCNBV);
}
if(req.body.txtFechaFinCNBV!=""){
  fecha_registro_fin_base = fn.ConvierteFechaFormatoBase(req.body.txtFechaFinCNBV);
}

if(req.body.hdActivaPanel=="A")  // INSERT
{
  action = 'A';
   sql = 'CALL usp_inserta_empresa(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
   success_msg = "La empresa se ha registrado correctamente";
   error_msg = "La empresa que estas registrando ya existe en sistema";
}else{
   action = 'C';
   sql = 'CALL usp_actualiza_empresa(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
   success_msg = "La empresa se ha actualizado correctamente";
   error_msg = "Error al tratar de actualizar los datos de la empresa";
}

let dt = { action: req.body.hdActivaPanel,   id: req.body.hfidnva }
let result_actividad = await fn_catalogos.Cat_actividad_economica();
const plantilla = await pool.query("select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?", req.user.IdEmpresaCliente);     
   
await pool.query(sql, [req.body.hfidnva, data.rfc, data.nombre, data.telefono, data.email,data.web, TipoDomicilio,data.pais,data.cboEstado, data.cboMuncipio, Cod_colonia,data.ciudad, data.cp, data.txtEstado, data.txtMunicipio, data.txtColonia,data.calle, data.noext, data.noint ,data.status, rutaArchivo, data.no_registro, fecha_registro_inicio_base, fecha_registro_fin_base, data.alias, data.cod_actividad, data.operaPersonaMoral,data.id_nivel])
  .then(async function(result) {
        let r =result[0];
        if((r[0]).cod=="00"){
          if(action =="A") { dt = { action: "C",   id: req.body.hfidnva }; }
          await configuracion.Get_menu_sistema(req, req.user.IdEmpresaCliente, req.user.IdPerfil, req.user.IdAgenteRelacionado);
          res.render("catalogos/add-empresa",{success_msg, data, dt, result_actividad, plantilla });
        }else { 
          res.render("catalogos/add-empresa",{error_msg, data, dt , result_actividad, plantilla});
        }
  }).catch(function(err){
    error_msg = err;
    res.render("catalogos/add-empresa",{error_msg, data, dt, result_actividad, plantilla });
  });
});

router.post('/ajx/empresas/ManageApi',isLoggedIn, async (req, res)=>{
   var uuuuid = "";
   var accion = req.body.accion;
   if (accion=="add"){
    uuuuid = fn.Genera_UIDD();
   }
    Params = [req.body.hfidnva, uuuuid ];
    await pool.query("call usp_gestiona_credendicales_webservices (?,?)", Params);
    res.send(uuuuid);
});



router.post('/mantenimiento/findEmpresa',isLoggedIn, async (req, res)=>{
  let nombre = req.body.txtNombreBusqueda.toUpperCase();
  let status = req.body.optStatus;
  let conditions= "";
   if(nombre!="")
   {
     conditions = " where nombre LIKE '%" + nombre + "%'";
   }
   if(status!="")
   {
     if(conditions == ""){
      conditions += " where status =" + status ;
    }
      else
      {
        conditions += " and status =" + status ;
      }
   }
   let sql = "select idEmpresa, no_registro, rfc, nombre, telefono, email, case when status  = 1 then 'ACTIVO' else 'INACTIVO' end as descripcion_status from empresas" + conditions +";"
  
   const result = await pool.query(sql);
  
   res.render("catalogos/empresas", {result, nombre, status});
});


module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-empresas.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-persona-moral.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const multer = require("multer");
const fs = require('fs');
const path = require("path");
const { userInfo } = require("os");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const CatalogosBD = require("../lib/catalogosBD");
const CatalogosBD_PLD = require("../lib/catalogosBD_pld");
const configuracion = require("../lib/config_gral");
const url = require('url');
var Enumerable = require('linq');
const { isFunction } = require("util");
const { session } = require("passport");
const upload = require("../lib/upload-excel");
const readXlsxFile = require("read-excel-file/node");
const fn_pld = require("../lib/reglas_pld_in");

async function  GetCatalogosGenerales(req, seccion)
{
    let result_actividad = {};
    let result_nacionalidad = {};
    let result_empleados = {};
    let result_pais_nacimiento = {};
    let result_identificaciones = {};
    let result_operaciones_esperadas = {};
    let result_montos_esperados = {};
    let result_origen_recursos = {};
    let result_destino_recursos = {};
    let result_monedas = {};
    let result_nivel = {};
    let result_patrimonio = {};
    let result_entidades_financieras = {};
    let result_paises = {};
    let result_divisas = {};
    switch (seccion) {
        case 1:
            result_actividad = await CatalogosBD.Cat_actividad_economica();
            result_nacionalidad  = await CatalogosBD.Cat_nacionalidad();        
            result_pais_nacimiento = await CatalogosBD.Cat_paises();
            result_identificaciones = await CatalogosBD.Cat_identificaciones(req);
            result_empleados = await CatalogosBD.Cat_numero_empleados();
            break;
        case 2:
            result_nacionalidad  = await CatalogosBD.Cat_nacionalidad();
            result_pais_nacimiento = await CatalogosBD.Cat_paises();
            result_identificaciones = await CatalogosBD.Cat_identificaciones(req);
            result_origen_recursos = await CatalogosBD.Cat_origen_recursos_pm_risk(req);
            
            break;
        case 3:
            result_actividad = await CatalogosBD.Cat_actividad_economica();
            result_nacionalidad  = await CatalogosBD.Cat_nacionalidad();
            result_pais_nacimiento = await CatalogosBD.Cat_paises();
            result_identificaciones = await CatalogosBD.Cat_identificaciones(req);
            result_patrimonio = await CatalogosBD.Cat_origen_patrimonio_pm();
            break;            
        case 4:
            result_origen_recursos = await CatalogosBD.Cat_origen_recursos_pm();
            result_destino_recursos = await CatalogosBD.Cat_destino_recursos_pm();
            result_divisas = await CatalogosBD.Cat_divisas();
            break;
        case 5:
            result_empleados = await CatalogosBD.Cat_numero_empleados();
            result_paises = await CatalogosBD.Cat_paises();
            result_monedas = await CatalogosBD_PLD.ReportesReg_Cat_divisa();
            break;
        case 6:
            result_nivel = await CatalogosBD.Cat_nivel_riesgo_empresa(req);
            break;
        case 7:
                result_actividad = await CatalogosBD.Cat_actividad_economica();
                result_nacionalidad  = await CatalogosBD.Cat_nacionalidad();        
                result_pais_nacimiento = await CatalogosBD.Cat_paises();
                result_identificaciones = await CatalogosBD.Cat_identificaciones(req);
                result_empleados = await CatalogosBD.Cat_numero_empleados();
                result_entidades_financieras = await CatalogosBD.Cat_entidades_financieras(req);
                result_monedas = await CatalogosBD_PLD.ReportesReg_Cat_divisa();
                break;    
    }
    catalogos = {
        result_actividad,
        result_nacionalidad,
        result_empleados,
        result_pais_nacimiento,
        result_identificaciones,
        result_operaciones_esperadas,
        result_montos_esperados,
        result_origen_recursos,
        result_destino_recursos,
        result_monedas,
        result_entidades_financieras,
        result_nivel,
        result_patrimonio,
        result_paises,
        result_divisas
    };
    return catalogos;
}


router.get('/mantenimiento/persona-moral', isLoggedIn, async (req, res)=>{     
    res.render("persona-moral/persona-moral");    
});


router.post('/mantenimiento/calificacion-cliente', isLoggedIn, async (req, res)=>{     
    let cod_pm = req.body.hfidctecal;
    let params = [req.user.IdEmpresaCliente, cod_pm];
    let error_msg = "";

    try {
        let result = await pool.query("call usp_getRiesgo_clientePM(?)", [params]); 
        let r =result[0];
         if(r[0].code=="00"){
             success_msg = r[0].msg;
             error_msg = "";
             
             req.flash("success_msg", success_msg);
         }else { 
             error_msg = r[0].msg;
             req.flash("error_msg", error_msg);
         }
     } catch (error) {
         error_msg = "Error al tratar de almacenar la información: " + error;
         req.flash("error_msg", error_msg);
     }
     req.session.cod_pm = cod_pm;
     res.redirect("/mantenimiento/persona-moral/edit");
});




router.post('/mantenimiento/findPersonaMoral', isLoggedIn, async (req, res)=>{ 
    let nombre = req.body.txtNombreBusqueda.toUpperCase();
    let status = req.body.optStatus;
    let conditions= " where a.cod_empresa = '"+ req.user.IdEmpresaCliente + "'";
     if(nombre!="") { conditions += " and a.razon_social LIKE '%" + nombre + "%'";}
     if(status!="") {
       if(conditions == ""){
        conditions += " where a.status =" + status ;
      }
        else
        {
          conditions += " and a.status =" + status ;
        }
     }
     let sql = "select a.cod_pm, a.razon_social, a.rfc, a.telefono, a.email , case when a.status  = 1 then 'ACTIVO' else 'INACTIVO' end as descripcion_status, ifnull(upper(b.nombre),'NO CALIFICADO') as nivel, ifnull(b.color,'gray') as color from pm_datos_generales a left join vw_plantilla_empresa b on (b.cod_empresa = a.cod_empresa and b.id_plantilla = a.plantilla  and b.id_nivel = a.nivel_riesgo) " + conditions +";"
     
    
     const result = await pool.query(sql);
     res.render("persona-moral/persona-moral", {result, nombre, status});    
});


router.get('/mantenimiento/persona-moral/add', isLoggedIn, async (req, res)=>{ 
    let porcentaje_avance = 0;
    let catalogos = await GetCatalogosGenerales(req, 1);
    let dt = {  action : "I"}
    let catf = {catalogos, dt, porcentaje_avance };
    res.render("persona-moral/add-persona-moral", catf);

});

router.all('/mantenimiento/persona-moral/calificacion', isLoggedIn,  async (req, res)=>{ 
    
    main :{
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break main;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }
    }
    let data = req.session.nivel_riesgo;
    let dt = {  action : "U", cod_cliente:cod_pm}
    res.render("persona-moral/calificacion-detalle",{dt, data});    
});

router.all('/riesgos/cliente/detalleCalificacion-pm', isLoggedIn,  async (req, res)=>{ 
    let cod_cliente = req.body.cod;
    let params = [req.user.IdEmpresaCliente, cod_cliente];
    let result = await pool.query("call usp_getDetalleCalificacion_by_clientePM(?)", [params]); 
    let r =result[0];
    console.log(r);
    res.send(r);
});

router.all('/mantenimiento/persona-moral/apoderado-legal', isLoggedIn, async (req, res)=>{ 
    main :{
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break main;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }
    
        let data = { cod_cliente_pm : req.session.cod_pm, accion:"U"}
        let r = await CatalogosBD.Get_pm_datos_apoderado_legal(req, req.session.cod_pm);
        if(r.length!=0){
            //Datos Generales
            let tipoN="";
            let tipoI ="";
            if(r[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
            data = {
                accion :"U",
                cod_cliente_pm : r[0].cod_pm,
                nombreApoderado : r[0].nombre,
                apaternoApoderado : r[0].apaterno,
                amaternoApoderado : r[0].amaterno,
                rfcApoderado:  r[0].rfc,
                curpApoderado: r[0].curp,
                fecha_Nacimiento_formato: r[0].fecha_nacimiento_formato,
                fecha_Nacimiento_base: "",
                nacionalidad : r[0].cod_nacionalidad,
                datos_identificacion : {
                    identificacion :r[0].cod_identificacion,
                    NumeroIdentificacion:r[0].num_identificacion,
                    fechaExpedicion: r[0].Fecha_expedicion_formato,
                    fechaExpedicion_base: "",
                    AnioExpedicion:r[0].anio_expedicion,
                    fechaExpiracion:r[0].Fecha_vigencia_formato,
                    fechaExpiracion_base:"" ,
                    AnioExpiracion:r[0].anio_vigencia,
                    paisEmision: r[0].pais_emision
                },
                domicilio : {
                    calle: r[0].calle,
                    noint: r[0].no_int,
                    noext: r[0].no_ext,
                    ciudad: r[0].ciudad,
                    cp: r[0].cp,
                    tipoI: tipoI,
                    tipoN: tipoN,
                    cboColonia : r[0].cod_asentamiento,
                    cboEstado : r[0].cod_estado,
                    cboMuncipio : r[0].cod_municipio,
                    txtColonia : r[0].asentamiento,
                    txtEstado : r[0].estado,
                    txtMunicipio : r[0].municipio,
                    pais : r[0].cod_pais,
                },
                datosnacionalidad:{
                    tipoConstitucion : r[0].tipo,
                    txtEstado : r[0].estado_nacimiento,
                    txtMunicipio :  r[0].municipio_nacimiento,
                    pais :  r[0].cod_pais_nacimiento,
                    cboEstado :  r[0].cod_estado_nacimiento,
                    cboMunicipio :  r[0].cod_municipio_nacimiento
                },
                no_documento_facultades : r[0].no_documento,
                fechadocumento : r[0].fecha_documento_formato,
                fechadocumento_base:"",
                fecharegistroApoderado : r[0].fecha_inscripcion_formato,
                fecharegistroApoderado_base : "",
                email : r[0].email,
                telefono : r[0].telefono,
                origen_recursos :r[0].origen_recursos,
            }
        } 
        
        let porcentaje_avance = 0;
        let catalogos = await GetCatalogosGenerales(req, 2);
        let dt = {  action : "U"}
        let catf = {catalogos, dt, porcentaje_avance , data };
    res.render("persona-moral/add-apoderado-legal", catf);
    }
});

router.all('/mantenimiento/persona-moral/accionistas', isLoggedIn, async (req, res)=>{ 
    let cod_pm = "";
    let result_accionistas = {}
    let dt = {  action : "U"}
    main :{
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break main;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }
        result_accionistas = await CatalogosBD.Get_pm_datos_accionistas(req, cod_pm);
        let catf = {result_accionistas, dt };
        res.render("persona-moral/add-accionistas", catf);
    }
});

function getdatapropietario (req, r, cod_accionista, cod_propietario ){
    let data ={  }
    data ={ 
        tipoPersona : req.body.cboTipoPersona,
        cod_cliente_pm : req.session.cod_pm,
        cod_accionista : cod_accionista,
        cod_propietario : cod_propietario
     }
   
    if(r.length!=0){
        //Datos Generales
        let tipoN="";
        let tipoI ="";
        if(r[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
        data = {
            accion :"U",
            cod_cliente_pm : r[0].cod_pm,
            cod_accionista : r[0].cod_accionista,
            cod_propietario: r[0].cod_propietario,
            nombre : r[0].nombre,
            apaterno : r[0].apaterno,
            amaterno : r[0].amaterno,
            pais_nacimiento : r[0].cod_pais_nacimiento,
            nacionalidad : r[0].cod_nacionalidad,
            status : r[0].cod_status,
            cod_actividad : r[0].cod_actividad,
            cod_patrimonio : r[0].cod_origen_patrimonio,
            email : r[0].email,
            telefono : r[0].telefono,
            datos_identificacion : {
                identificacion :r[0].cod_identificacion,
                NumeroIdentificacion:r[0].num_identificacion,
                fechaExpedicion: r[0].Fecha_expedicion_formato,
                fechaExpedicion_base: "",
                AnioExpedicion:r[0].anio_expedicion,
                fechaExpiracion:r[0].Fecha_vigencia_formato,
                fechaExpiracion_base:"" ,
                AnioExpiracion:r[0].anio_vigencia,
                paisEmision: r[0].pais_emision
            },
            domicilio : {
                calle: r[0].calle,
                noint: r[0].no_int,
                noext: r[0].no_ext,
                ciudad: r[0].ciudad,
                cp: r[0].cp,
                tipoI: tipoI,
                tipoN: tipoN,
                cboColonia : r[0].cod_asentamiento,
                cboEstado : r[0].cod_estado,
                cboMuncipio : r[0].cod_municipio,
                txtColonia : r[0].asentamiento,
                txtEstado : r[0].estado,
                txtMunicipio : r[0].municipio,
                pais : r[0].cod_pais
            }
        }
    } 
    return data;
}

function getdatapf (req, r, tipo_persona){
    
    let data ={ 
        tipoPersona : tipo_persona,
        cod_cliente_pm : req.session.cod_pm,
        tipo_persona_descripcion : 'PERSONA FISICA',
     }
   
    if(r.length!=0){
        //Datos Generales
        let tipoN="";
        let tipoI ="";
        if(r[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
        data = {
            accion :"U",
            porcentaje: r[0].porcentaje_participacion,
            tipoPersona : "PF",
            tipo_persona_descripcion : 'PERSONA FISICA',
            cod_cliente_pm : r[0].cod_pm,
            cod_accionista : r[0].cod_accionista,
            nombre : r[0].nombre,
            apaterno : r[0].apaterno,
            amaterno : r[0].amaterno,
            pais_nacimiento : r[0].cod_pais_nacimiento,
            nacionalidad : r[0].cod_nacionalidad,
            status : r[0].cod_status,
            cod_actividad : r[0].cod_actividad,
            cod_patrimonio : r[0].cod_origen_patrimonio,
            email : r[0].email,
            telefono : r[0].telefono,
            rfc: r[0].rfc,
            curp: r[0].curp,
            datos_identificacion : {
                identificacion :r[0].cod_identificacion,
                NumeroIdentificacion:r[0].num_identificacion,
                fechaExpedicion: r[0].Fecha_expedicion_formato,
                fechaExpedicion_base: "",
                AnioExpedicion:r[0].anio_expedicion,
                fechaExpiracion:r[0].Fecha_vigencia_formato,
                fechaExpiracion_base:"" ,
                AnioExpiracion:r[0].anio_vigencia,
                paisEmision: r[0].pais_emision
            },
            domicilio : {
                calle: r[0].calle,
                noint: r[0].no_int,
                noext: r[0].no_ext,
                ciudad: r[0].ciudad,
                cp: r[0].cp,
                tipoI: tipoI,
                tipoN: tipoN,
                cboColonia : r[0].cod_asentamiento,
                cboEstado : r[0].cod_estado,
                cboMuncipio : r[0].cod_municipio,
                txtColonia : r[0].asentamiento,
                txtEstado : r[0].estado,
                txtMunicipio : r[0].municipio,
                pais : r[0].cod_pais
            }
        }
    } 
    return data;
}

function getdatapm(req, r, tipo_persona){
    
    let data ={ 
        tipoPersona : tipo_persona,
        cod_cliente_pm : req.session.cod_pm,
        tipo_persona_descripcion : 'PERSONA MORAL',
     }
   
    if(r.length!=0){
        let tipoN="";
        let tipoI ="";
        if(r[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
        //Datos Generales
        data = {
            accion :"U",
            porcentaje: r[0].porcentaje_participacion,
            tipoPersona : "PM",
            tipo_persona_descripcion : 'PERSONA MORAL',
            cod_cliente_pm : r[0].cod_pm,
            cod_accionista : r[0].cod_accionista,
            nombreComercial : r[0].nombre_comercial,
            telefono : r[0].telefono,
            status : r[0].status,
            web : r[0].pagina_web,
            email : r[0].email,
            cod_actividad : r[0].cod_actividad,
            rfc : r[0].rfc,
            razonSocial : r[0].razon_social,
            fecha_constitucion : r[0].fecha_constitucion_formato,
            fecha_constitucion_base:"",
            nacionalidad : r[0].cod_nacionalidad,
            datos_constitucion :{
                tipoConstitucion : r[0].tipo,
                pais : r[0].cod_pais_constitucion,
                cboEstado : r[0].cod_estado_constitucion,
                cboMunicipio : r[0].cod_municipio_constitucion,
                txtEstado : r[0].estado_constitucion,
                txtMunicipio : r[0].cod_municipio_constitucion
            },
            domicilio : {
                calle: r[0].calle,
                noint: r[0].no_int,
                noext: r[0].no_ext,
                ciudad: r[0].ciudad,
                cp: r[0].cp,
                tipoI: tipoI,
                tipoN: tipoN,
                cboColonia : r[0].cod_asentamiento,
                cboEstado : r[0].cod_estado,
                cboMuncipio : r[0].cod_municipio,
                txtColonia : r[0].asentamiento,
                txtEstado : r[0].estado,
                txtMunicipio : r[0].municipio,
                pais : r[0].cod_pais
            }
        }
    } 
    return data;
}     

router.all('/mantenimiento/persona-moral/add-accionista', isLoggedIn, async (req, res)=>{ 
    let cod_pm = "";
    let data = {};
    let result_accionistas = {}
    let dt = {  action : "U"}
    let tipo_persona = "";
    let porcentaje = "";
    let result_propietarios = {};
    
    main :{
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break main;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }

        

        let cod_accionista;
        
        
        
        if(!req.body.hfidacc2){
            if(!req.query.hfidacc2){
            }else{
                cod_accionista = req.query.hfidacc2;
            }
        }else{
            cod_accionista = req.body.hfidacc2;
        }

        if(!req.body.cboTipoPersona){
            if(req.query.cboTipoPersona){
                tipo_persona = req.query.cboTipoPersona; 
            }
        }else{
            tipo_persona = req.body.cboTipoPersona; 
        }

        
        if(tipo_persona == "PF"){
            
            let r = await CatalogosBD.Get_pm_datos_accionista_pf(req, req.session.cod_pm, cod_accionista);
            data = getdatapf(req, r, tipo_persona);
            console.log(data);
        }else{
            
            let r = await CatalogosBD.Get_pm_datos_accionista_pm(req, req.session.cod_pm, cod_accionista);
            data = getdatapm(req, r, tipo_persona);
            result_propietarios = await CatalogosBD.Get_pm_datos_propietarios_pm(req, req.session.cod_pm, cod_accionista);
        }

        let catalogos = await GetCatalogosGenerales(req, 3);
        let catf = {result_accionistas, dt, tipo_persona, data, catalogos, result_propietarios };
        res.render("persona-moral/add-accionista", catf);
    }
});

router.all('/mantenimiento/persona-moral/add-propietario', isLoggedIn, async (req, res)=>{ 
    let cod_pm = "";
    let data = {};
    let result_accionistas = {}
    let dt = {  action : "U"}
    let tipo_persona = "";
    let cod_accionista = req.body.hfidacc2;
    let cod_propietario = req.body.hfidpro2;
    main :{
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break main;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }
            
            let r = await CatalogosBD.Get_pm_datos_propietario_pm(req, req.session.cod_pm, cod_accionista, cod_propietario);
            data = getdatapropietario(req, r,cod_accionista,cod_propietario);
            console.log(data);

        let catalogos = await GetCatalogosGenerales(req, 3);
        let catf = {dt, tipo_persona, data, catalogos };
        res.render("persona-moral/add-propietario", catf);
    }
});

router.all('/mantenimiento/persona-moral/perfil-transaccional', isLoggedIn, async (req, res)=>{ 
    main :{
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break main;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }
    
        let data = { cod_cliente_pm : req.session.cod_pm, accion:"U"}
        let r = await CatalogosBD.Get_pm_datos_perfil_transaccional(req, req.session.cod_pm);
        if(r.length!=0){
            data = {
                accion : "U",
                cod_cliente_pm : r[0].cod_pm,
                numero_operaciones_esperadas_envio : r[0].operaciones_esperadas_envio,
                numero_operaciones_esperadas_pago : r[0].operaciones_esperadas_pago,
                monto_esperado_envio : r[0].montos_esperados_envio,
                monto_esperado_pago : r[0].montos_esperados_pago,
                maneja_efectivo : r[0].maneja_efectivo,
                montos_que_maneja : r[0].monto_maneja,
                origen_recursos : r[0].origen_recursos,
                destino_recursos : r[0].destino_recursos,
                tiene_pep : r[0].relacion_pep,
                nombrePep : r[0].nombre,
                apaternoPep : r[0].apaterno,
                amaternoPep : r[0].amaterno,
                exportaciones: r[0].realiza_exportaciones,
                importaciones: r[0].realiza_importaciones,
                PagoNacEfectivo: r[0].aplica_pago_nac_efectivo,
                PagoNacDeposito: r[0].aplica_pago_nac_deposito,
                EnvioNacEfectivo:r[0].aplica_envio_nac_efectivo,
                EnvioNacDeposito:r[0].aplica_envio_nac_deposito,
                PagoIntEfectivo:r[0].aplica_pago_int_efectivo,
                PagoIntDeposito:r[0].aplica_pago_int_deposito,
                EnvioIntEfectivo:r[0].aplica_envio_int_efectivo,
                EnvioIntDeposito:r[0].aplica_envio_int_deposito,
                numero_operaciones_esperadas_pago_int:r[0].operaciones_esperadas_pago_int,
                monto_esperado_pago_int:r[0].montos_esperados_pago_int,
                numero_operaciones_esperadas_envio_int:r[0].operaciones_esperadas_envio_int,
                monto_esperado_envio_int:r[0].montos_esperados_envio_int,
                divisa_1:r[0].divisa_1,
                divisa_2:r[0].divisa_2
            }
        } 
        
        let porcentaje_avance = 0;
        let catalogos = await GetCatalogosGenerales(req, 4);
        let dt = {  action : "U"}
        let catf = {catalogos, dt, porcentaje_avance , data };
    res.render("persona-moral/add-perfil-transaccional", catf);
    }
});

router.all('/mantenimiento/persona-moral/datos-bancarios', isLoggedIn, async (req, res)=>{ 
    main :{
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break main;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }
    
        let data = { cod_cliente_pm : req.session.cod_pm, accion:"U"}
        let r = await CatalogosBD.Get_pm_datos_bancarios(req, req.session.cod_pm);
        if(r.length!=0){
            data = {
                accion : "U",
                cod_cliente_pm : r[0].cod_pm,
                nombreBanco : r[0].entidad,
                pais_banco : r[0].origen_entidad,
                direccionBanco : r[0].direccion,
                cod_divisaBanco : r[0].cod_moneda,
                cuentaBanco : r[0].num_cuenta,
                cuentaClabe : r[0].clabe
            }
        } 
        
        let porcentaje_avance = 0;
        let catalogos = await GetCatalogosGenerales(req, 5);
        let dt = {  action : "U"}
        let catf = {catalogos, dt, porcentaje_avance , data };
    res.render("persona-moral/add-datos-bancarios", catf);
    }
});

router.all('/mantenimiento/persona-moral/datos-adicionales', isLoggedIn, async (req, res)=>{ 
    main :{
    if(!req.body.hfidnva){
        if(!req.session.cod_pm){
            req.flash("error_msg", "No existe el código de cliente a consultar");
            res.redirect("/mantenimiento/persona-moral");
            break main;
        }else{
            cod_pm = req.session.cod_pm;
        }
    }else{
        cod_pm = req.body.hfidnva;
    }

    let data = { cod_cliente_pm : req.session.cod_pm, accion :"U" }
    let r = await CatalogosBD.Get_pm_datos_adicionales(req, req.session.cod_pm);
    if(r.length!=0){
        data = {
            accion :"U",
            cod_cliente_pm : r[0].cod_pm,
            fechacontrato : r[0].firma_contrato_formato,
            importe_max : r[0].importe_maximo,
            divisa_importe_max : r[0].cod_divisa,
            id_nivel : r[0].id_nivel
        }
    } 
    //Datos Generales
  

    let porcentaje_avance = 0;
    let catalogos = await GetCatalogosGenerales(req, 6);
    let dt = {  action : "U"}
    let catf = {catalogos, dt, porcentaje_avance , data };
    res.render("persona-moral/add-datos-adicionales", catf);
    }
});


router.all('/mantenimiento/persona-moral/edit', isLoggedIn, async (req, res)=>{ 
    let cod_pm = "";
    main :{
    if(!req.body.hfidnva){
        if(!req.session.cod_pm){
            req.flash("error_msg", "No existe el código de cliente a consultar");
            res.redirect("/mantenimiento/persona-moral");
            break main;
        }else{
            cod_pm = req.session.cod_pm;
        }
    }else{
        cod_pm = req.body.hfidnva;
        req.session.cod_pm = cod_pm;
    }
    

    let r = await CatalogosBD.Get_pm_datos_generales(req, cod_pm);
    if(r.length==0){
        req.flash("error_msg", "No existe información a consultar");
        res.redirect("/mantenimiento/persona-moral");
        break main;
    } 
    //Datos Generales
    let tipoN="";
    let tipoI ="";
    if(r[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
    let data = {
        accion :"U",
        cod_cliente_pm : r[0].cod_pm,
        nombreComercial : r[0].nombre_comercial,
        nivel : r[0].nivel,
        color : r[0].color,
        telefono : r[0].telefono,
        status : r[0].status,
        web : r[0].pagina_web,
        email : r[0].email,
        cod_actividad : r[0].cod_actividad,
        domicilio : {
            calle: r[0].calle,
            noint: r[0].no_int,
            noext: r[0].no_ext,
            ciudad: r[0].ciudad,
            cp: r[0].cp,
            tipoI: tipoI,
            tipoN: tipoN,
            cboColonia : r[0].cod_asentamiento,
            cboEstado : r[0].cod_estado,
            cboMuncipio : r[0].cod_municipio,
            txtColonia : r[0].asentamiento,
            txtEstado : r[0].estado,
            txtMunicipio : r[0].municipio,
            pais : r[0].cod_pais,
        },
        rfc : r[0].rfc,
        razonSocial : r[0].razon_social,
        fecha_constitucion : r[0].fecha_constitucion_formato,
        fecha_constitucion_base:"",
        fecha_inscripcion : r[0].fecha_inscripcion_formato,
        fecha_inscripcion_base : "",
        nacionalidad : r[0].cod_nacionalidad,
        datos_constitucion :{
            tipoConstitucion : r[0].tipo,
            pais : r[0].cod_pais_constitucion,
            cboEstado : r[0].cod_estado_constitucion,
            cboMunicipio : r[0].cod_municipio_constitucion,
            txtEstado : r[0].estado_constitucion,
            txtMunicipio : r[0].cod_municipio_constitucion
        }, 
        no_escritura : r[0].no_escritura,
        numero_empleados : r[0].no_empleados,
        folioMercantil : r[0].no_folio,
        descripcion1 : r[0].objeto_social
    }
    console.log(data);    
    req.session.nombre_comercial_pm = data.nombreComercial;

    req.session.nivel_riesgo = {color: data.color,nivel: data.nivel};

    let catalogos = await GetCatalogosGenerales(req, 1);
    let dt = {  action : "U"}
    let catf = {catalogos, dt, data };
    res.render("persona-moral/add-persona-moral", catf);
}

})


router.post('/mantenimiento/persona-moral/addgeneralesProcess', isLoggedIn, async (req, res)=>{ 
    fn.errores = [];
    let catalogos = [];
    let error_msg = "";
    let TipoDomicilio = "";
    let Cod_colonia = "";
    let tipoN="";
    let tipoI ="";
    let success_msg = "";
    let continua = 1;
    let isInsert = false;
    if(req.body.optTipoDom0=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}

    let data = {
        accion : req.body.hdActivaPanel,
        cod_cliente_pm : req.body.hdActivaPanel=="I"? "" : fn.CleanValue(req.body.hfidsecc1,"GENERAL", true, "- Código PM inválido, debes dar de alta al cliente Persona Moral") ,
        nombreComercial : fn.CleanValue(req.body.txtNombreComercial,"GENERAL", true, "- Nombre comercial"),
        telefono : fn.CleanValue(req.body.txtTelefono,"GENERAL", true, "- Teléfono"),
        status : fn.CleanValue(req.body.cboStatus,"GENERAL", true, "- Status"),
        web : fn.CleanValue(req.body.txtWeb,"GENERAL", true, "- Página Web"),
        email : fn.CleanValue(req.body.txtEmail,"GENERAL", true, "- Correo electrónico"),
        cod_actividad : fn.CleanValue(req.body.cboActividad,"GENERAL", true, "- Actividad"),
        domicilio : {
            calle: fn.CleanValue(req.body.txtCalle0,"GENERAL", true, "- Calle"),
            noint: fn.CleanValue(req.body.txtNumInt0,"GENERAL", false, "- Número Interior"),
            noext: fn.CleanValue(req.body.txtNumExt0,"GENERAL", true, "- Número Exterior"),
            ciudad: fn.CleanValue(req.body.txtCiudad0,"GENERAL", true, "- Ciudad"),
            cp: fn.CleanValue(req.body.txtCP0,"GENERAL", true, "- CP"),
            tipoI: tipoI,
            tipoN: tipoN,
            cboColonia : fn.CleanValue(req.body.cboColonia0,"GENERAL", TipoDomicilio == "N" ? true : false , "- Colonia"),
            cboEstado : fn.CleanValue(req.body.cboEstado0,"GENERAL", TipoDomicilio == "N" ? true : false, "- Estado"),
            cboMuncipio : fn.CleanValue(req.body.cboMunicipio0,"GENERAL", TipoDomicilio == "N" ? true : false, "- Municipio"),
            txtColonia : fn.CleanValue(req.body.txtColonia0,"GENERAL",  TipoDomicilio == "I" ? true : false, "- Colonia"),
            txtEstado : fn.CleanValue(req.body.txtEstado0,"GENERAL", TipoDomicilio == "I" ? true : false, "- Estado"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipio0,"GENERAL", TipoDomicilio == "I" ? true : false, "- Municipio"),
            pais : fn.CleanValue(req.body.cboPais0,"GENERAL", true, "- País"),
        },
        rfc : fn.CleanValue(req.body.txtRFC,"GENERAL", true, "- RFC"),
        razonSocial : fn.CleanValue(req.body.txtRazonSocial,"GENERAL", true, "- Razón Social"),
        fecha_constitucion : fn.CleanValue(req.body.txtFechaConstitucion,"GENERAL", true, "- Fecha de Constitución"),
        fecha_constitucion_base : fn.CleanValue(req.body.txtFechaConstitucion,"FECHA_BASE", false, ""),
        fecha_inscripcion : fn.CleanValue(req.body.txtFechaInscripcion,"GENERAL", false, ""),
        fecha_inscripcion_base : fn.CleanValue(req.body.txtFechaInscripcion,"FECHA_BASE", false, ""),
        nacionalidad : fn.CleanValue(req.body.cboNacionalidad,"GENERAL", false, "- Nacionalidad"),
        datos_constitucion :{
            tipoConstitucion : fn.CleanValue(req.body.cboTipoCtrl1,"GENERAL", false, ""),
            pais : fn.CleanValue(req.body.cboPaisCtrl1,"GENERAL", true, "País de Constitución"),
            cboEstado : fn.CleanValue(req.body.cboEstadoCtrl1,"GENERAL", req.body.cboPaisCtrl1 == "N" ? true : false, "- Estado de Constitución"),
            cboMunicipio : fn.CleanValue(req.body.cboMunicipioCtrl1,"GENERAL", req.body.cboPaisCtrl1 == "N" ? true : false, "- Municipio de Constitución"),
            txtEstado : fn.CleanValue(req.body.txtEstadoCtrl,"GENERAL", req.body.cboPaisCtrl1 == "I" ? true : false, "- Estado de Constitución"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipioCtrl,"GENERAL", req.body.cboPaisCtrl1 == "I" ? true : false, "- Municipio de Constitución"),
        }, 
        no_escritura : fn.CleanValue(req.body.txtEscritura,"GENERAL", true, "- Escritura Constitutiva"),
        numero_empleados : fn.CleanValue(req.body.cboNoEmpleados,"GENERAL", true, "- No. de Empleados"),
        folioMercantil : fn.CleanValue(req.body.txtFolioMercantil,"GENERAL", true, "- Folio Mercantil"),
        descripcion1 : fn.CleanValue(req.body.txtDescription1,"GENERAL", true, "- Objeto"),
    }
    
    if(TipoDomicilio=="N"){
        Cod_colonia = data.domicilio.cboColonia.split("|")[0];
    }
    catalogos = await GetCatalogosGenerales(req, 1);
    main :{
        error_msg = fn.GetErrores();
        if(error_msg!=""){
            break main;
        }
        let params = [
            data.accion,
            req.user.IdEmpresaCliente,
            data.cod_cliente_pm,
            data.nombreComercial,
            data.telefono,
            data.status,
            data.web,
            data.email,
            data.cod_actividad,
            data.rfc,
            data.razonSocial,
            data.fecha_constitucion_base,
            data.fecha_inscripcion_base,
            data.nacionalidad,
            data.datos_constitucion.tipoConstitucion,
            data.datos_constitucion.pais,
            data.datos_constitucion.cboEstado,
            data.datos_constitucion.cboMunicipio,
            data.datos_constitucion.txtEstado,
            data.datos_constitucion.txtMunicipio,
            data.no_escritura,
            data.folioMercantil,
            data.descripcion1,
            data.numero_empleados,
            TipoDomicilio,
            data.domicilio.pais,
            data.domicilio.cboEstado,
            data.domicilio.cboMuncipio,
            Cod_colonia,
            data.domicilio.ciudad,
            data.domicilio.cp,
            data.domicilio.txtEstado,
            data.domicilio.txtMunicipio,
            data.domicilio.txtColonia,
            data.domicilio.calle,
            data.domicilio.noext,
            data.domicilio.noint,
            req.user.IdUser,
            req.user.IdEmpresa
        ];

        try {
           let result = await pool.query("call usp_gestiona_pm_datos_generales(?)", [params]); 
           let r =result[0];
            if(r[0].code=="00"){
                data.accion = "U";
                data.cod_cliente_pm = r[0].cod_pm;
                success_msg = r[0].msg;
                error_msg = "";
                continua = 0;
                req.session.cod_pm = data.cod_cliente_pm;
                req.flash("success_msg", success_msg);
                res.redirect(url.format({pathname: "/mantenimiento/persona-moral/edit",  query:{"hfidnva": data.cod_cliente_pm }}));
            }else { 
                error_msg = r[0].msg;
            }
        } catch (error) {
            error_msg = "Error al tratar de almacenar la información: " + error;
        }
    }
       if(continua == 1){
            let dt = {  action : data.accion}
            let catf = {catalogos, data, error_msg, dt, success_msg };
            res.render("persona-moral/add-persona-moral", catf ); 
        };
});

router.post('/mantenimiento/persona-moral/addapoderadoProcess', isLoggedIn, async (req, res)=>{ 
    
    let continua = 1;
    let error_msg = [];
    let TipoDomicilio = "";
    let TipoDomicilio2 = "";
    let Cod_colonia = "";
    let tipoN="";
    let tipoI ="";
    let tipoN2="";
    let tipoI2 ="";
    let success_msg = "";
    let isInsert = false;
    if(req.body.optTipoDom1=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
    if(req.body.cboTipoCtrl2=="N"){TipoDomicilio2="N"; }else{ TipoDomicilio2="I";}

    
    data = {
        accion :"U",
        cod_cliente_pm :  fn.CleanValue(req.body.hfidsecc2,"GENERAL", true, "- Código PM inválido, debes dar de alta al cliente Persona Moral"),
        nombreApoderado : fn.CleanValue(req.body.txtNombreApoderado,"GENERAL", true, "- Nombre del Apoderado"),
        apaternoApoderado : fn.CleanValue(req.body.txtApaternoApoderado,"GENERAL", true, "- Apellido paterno del Apoderado"),
        amaternoApoderado : fn.CleanValue(req.body.txtAmaternoApoderado,"GENERAL", false, ""),
        rfcApoderado: fn.CleanValue(req.body.txtRFCApoderado,"GENERAL", true, "- RFC"),
        curpApoderado: fn.CleanValue(req.body.txtCURPApoderado,"GENERAL", true, "- CURP"),
        fecha_Nacimiento_formato: fn.CleanValue(req.body.txtFechaNacimientoApoderado,"GENERAL", true, "- Fecha de Nacimiento"),
        fecha_Nacimiento_base: fn.CleanValue(req.body.txtFechaNacimientoApoderado,"FECHA_BASE", false, ""),
        nacionalidad : fn.CleanValue(req.body.cboNacionalidadApoderado,"GENERAL", true, "- Nacionalidad"),
        datos_identificacion : {
            identificacion :fn.CleanValue(req.body.cboIdentificacion1,"GENERAL", true, "- Identificación"),
            NumeroIdentificacion: fn.CleanValue(req.body.txtNumeroIdentificacion1,"GENERAL", true, "- Número de Identificación"),
            fechaExpedicion: req.body.txtFechaExpedicion1,
            fechaExpedicion_base: req.body.txtFechaExpedicion1 == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaExpedicion1),
            AnioExpedicion:  req.body.txtAnioExpedicion1 == "" ? null : req.body.txtAnioExpedicion1,
            AnioExpiracion: req.body.txtAnioVigencia1 == "" ? null : req.body.txtAnioVigencia1,
            paisEmision: req.body.cboEmision1,
            fechaExpiracion:req.body.txtFechaVigencia1 == "" ? null : req.body.txtFechaVigencia1,
            fechaExpiracion_base:req.body.txtFechaVigencia1 == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaVigencia1),
        },
        domicilio : {
            calle: fn.CleanValue(req.body.txtCalle1,"GENERAL", true, "- Calle"),
            noint: fn.CleanValue(req.body.txtNumInt1,"GENERAL", false, "- Número Interior"),
            noext: fn.CleanValue(req.body.txtNumExt1,"GENERAL", true, "- Número Exterior"),
            ciudad: fn.CleanValue(req.body.txtCiudad1,"GENERAL", true, "- Ciudad"),
            cp: fn.CleanValue(req.body.txtCP1,"GENERAL", true, "- CP"),
            tipoI: tipoI,
            tipoN: tipoN,
            cboColonia : fn.CleanValue(req.body.cboColonia1,"GENERAL", TipoDomicilio == "N" ? true : false , "- Colonia"),
            cboEstado : fn.CleanValue(req.body.cboEstado1,"GENERAL", TipoDomicilio == "N" ? true : false, "- Estado"),
            cboMuncipio : fn.CleanValue(req.body.cboMunicipio1,"GENERAL", TipoDomicilio == "N" ? true : false, "- Municipio"),
            txtColonia : fn.CleanValue(req.body.txtColonia1,"GENERAL",  TipoDomicilio == "I" ? true : false, "- Colonia"),
            txtEstado : fn.CleanValue(req.body.txtEstado1,"GENERAL", TipoDomicilio == "I" ? true : false, "- Estado"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipio1,"GENERAL", TipoDomicilio == "I" ? true : false, "- Municipio"),
            pais : fn.CleanValue(req.body.cboPais1,"GENERAL", true, "- País"),
        },
        datosnacionalidad:{
            tipoConstitucion : fn.CleanValue(req.body.cboTipoCtrl2,"GENERAL", true, "- País"), 
            txtEstado : fn.CleanValue(req.body.txtEstadoCtrl2,"GENERAL", TipoDomicilio2 == "I" ? true : false, "- Estado"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipioCtrl2,"GENERAL", TipoDomicilio2 == "I" ? true : false, "- Municipio"),
            pais : fn.CleanValue(req.body.cboPaisCtrl2,"GENERAL", true, "- País"),
            cboEstado : fn.CleanValue(req.body.cboEstadoCtrl2,"GENERAL", TipoDomicilio2 == "N" ? true : false, "- Estado"),
            cboMunicipio : fn.CleanValue(req.body.cboMunicipioCtrl2,"GENERAL", TipoDomicilio2 == "N" ? true : false, "- Municipio"),
        },
        no_documento_facultades : fn.CleanValue(req.body.txtdocumentoFacultades,"GENERAL", true, "- País"), 
        fechadocumento :fn.CleanValue(req.body.txtFechaDocumento,"GENERAL", true, "- País"), 
        fechadocumento_base: fn.CleanValue(req.body.txtFechaDocumento,"FECHA_BASE", false, ""),
        fecharegistroApoderado : fn.CleanValue(req.body.txtFechaInscripcionApoderado,"GENERAL", false, "- País"), 
        fecharegistroApoderado_base : fn.CleanValue(req.body.txtFechaInscripcionApoderado,"FECHA_BASE", false, ""),
        email :fn.CleanValue(req.body.txtCorreoApoderado,"GENERAL", true, "- Email"), 
        telefono : fn.CleanValue(req.body.txtTelefonoApoderado,"GENERAL", true, "- Teléfono"), 
        origen_recursos : fn.CleanValue(req.body.cboOrigenRecursosApoderado,"INT", false, "- Origen de los recursos"), 
    }
    
    if(TipoDomicilio=="N"){
        Cod_colonia = data.domicilio.cboColonia.split("|")[0];
    }

    let catalogos =await GetCatalogosGenerales(req, 2);
    let catf = {catalogos};
    main :{
        error_msg = fn.GetErrores();
        if(error_msg!=""){
            break main;
        }
        let params = [
            req.user.IdEmpresaCliente,
            data.cod_cliente_pm,
            data.nombreApoderado,
            data.apaternoApoderado,
            data.amaternoApoderado,
            data.rfcApoderado,
            data.curpApoderado,
            data.fecha_Nacimiento_base,
            data.nacionalidad,
            data.datosnacionalidad.tipoConstitucion,
            data.datosnacionalidad.pais,
            data.datosnacionalidad.cboEstado,
            data.datosnacionalidad.cboMunicipio,
            data.datosnacionalidad.txtEstado,
            data.datosnacionalidad.txtMunicipio,
            data.no_documento_facultades,
            data.fechadocumento_base,
            data.fecharegistroApoderado_base,
            data.email,
            data.telefono,
            data.datos_identificacion.identificacion,
            data.datos_identificacion.NumeroIdentificacion,
            data.datos_identificacion.fechaExpedicion_base,
            data.datos_identificacion.fechaExpiracion_base,
            data.datos_identificacion.AnioExpedicion,
            data.datos_identificacion.AnioExpiracion,
            data.datos_identificacion.paisEmision,
            TipoDomicilio,
            data.domicilio.pais,
            data.domicilio.cboEstado,
            data.domicilio.cboMuncipio,
            Cod_colonia,
            data.domicilio.ciudad,
            data.domicilio.cp,
            data.domicilio.txtEstado,
            data.domicilio.txtMunicipio,
            data.domicilio.txtColonia,
            data.domicilio.calle,
            data.domicilio.noext,
            data.domicilio.noint,
            req.user.IdUser,
            req.user.IdEmpresa,
            data.origen_recursos
        ];
        
        try {
            let result = await pool.query("call usp_gestiona_pm_datos_apoderado_legal(?)", [params]); 
            let r =result[0];
             if(r[0].code=="00"){
                 let success_msg = r[0].msg;
                 error_msg = "";
                 continua = 0;
                 req.flash("success_msg", success_msg);
                 res.redirect(url.format({pathname: "/mantenimiento/persona-moral/apoderado-legal",  query:{"hfidnva": data.cod_cliente_pm }}));
             }else { 
                 error_msg = r[0].msg;
             }
         } catch (error) {
             error_msg = "Error al tratar de almacenar la información: " + error;
         }
     }
        if(continua == 1){
             let dt = {  action : data.accion}
             let catf = {catalogos, data, error_msg, dt };
             res.render("persona-moral/add-apoderado-legal", catf ); 
         };
});

router.post('/mantenimiento/persona-moral/addAccionistaPFProcess', isLoggedIn, async (req, res)=>{ 
    
    let continua = 1;
    let error_msg = [];
    let TipoDomicilio = "";
    let Cod_colonia = "";
    let tipoN="";
    let tipoI ="";
    let tipo_persona = "";
    if(req.body.optTipoDom1=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
    if(req.body.cboTipoCtrl2=="N"){TipoDomicilio2="N"; }else{ TipoDomicilio2="I";}

   
   
    data = {
        accion :"U",
        cod_accionista : req.body.hfidacc2,
        porcentaje : req.body.txtPorcentaje,
        tipoPersona : req.body.cboTipoPersona,
        tipo_persona_descripcion : req.body.cboTipoPersona == "PM"? 'PERSONA MORAL' : 'PERSONA FISICA',
        cod_cliente_pm :  fn.CleanValue(req.body.hfidsecc2,"GENERAL", true, "- Código PM inválido, debes dar de alta al cliente Persona Moral"),
        nombre : fn.CleanValue(req.body.txtNombre,"GENERAL", true, "- Nombre del "),
        apaterno : fn.CleanValue(req.body.txtApaterno,"GENERAL", true, "- Apellido paterno del "),
        amaterno : fn.CleanValue(req.body.txtAmaterno,"GENERAL", false, ""),
        pais_nacimiento : fn.CleanValue(req.body.cboPaisNacimiento,"GENERAL", true, "- Pais de Nacimiento"),
        nacionalidad : fn.CleanValue(req.body.cboNacionalidad,"GENERAL", true, "- Nacionalidad"),
        status : req.body.cboStatus,
        cod_actividad : fn.CleanValue(req.body.cboActividad,"GENERAL", true, "- Actividad Económica"),
        cod_patrimonio : fn.CleanValue(req.body.cboPatrimonio,"GENERAL", true, "- Patrimonio"),
        email :fn.CleanValue(req.body.txtEmail,"GENERAL", true, "- Email"), 
        telefono : fn.CleanValue(req.body.txtTelefono,"GENERAL", true, "- Teléfono"),
        rfc : fn.CleanValue(req.body.txtRFCAccinistaPF,"GENERAL", false, "- RFC"),
        curp : fn.CleanValue(req.body.txtCURPAccinistaPF,"GENERAL", false, "- CURP"),
        datos_identificacion : {
            identificacion :fn.CleanValue(req.body.cboIdentificacion1,"GENERAL", true, "- Identificación"),
            NumeroIdentificacion: fn.CleanValue(req.body.txtNumeroIdentificacion1,"GENERAL", true, "- Número de Identificación"),
            fechaExpedicion: req.body.txtFechaExpedicion1,
            fechaExpedicion_base: req.body.txtFechaExpedicion1 == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaExpedicion1),
            AnioExpedicion:  req.body.txtAnioExpedicion1 == "" ? null : req.body.txtAnioExpedicion1,
            AnioExpiracion: req.body.txtAnioVigencia1 == "" ? null : req.body.txtAnioVigencia1,
            paisEmision: req.body.cboEmision1,
            fechaExpiracion:req.body.txtFechaVigencia1 == "" ? null : req.body.txtFechaVigencia1,
            fechaExpiracion_base:req.body.txtFechaVigencia1 == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaVigencia1),
        },
        domicilio : {
            calle: fn.CleanValue(req.body.txtCalle1,"GENERAL", true, "- Calle"),
            noint: fn.CleanValue(req.body.txtNumInt1,"GENERAL", false, "- Número Interior"),
            noext: fn.CleanValue(req.body.txtNumExt1,"GENERAL", true, "- Número Exterior"),
            ciudad: fn.CleanValue(req.body.txtCiudad1,"GENERAL", true, "- Ciudad"),
            cp: fn.CleanValue(req.body.txtCP1,"GENERAL", true, "- CP"),
            tipoI: tipoI,
            tipoN: tipoN,
            cboColonia : fn.CleanValue(req.body.cboColonia1,"GENERAL", TipoDomicilio == "N" ? true : false , "- Colonia"),
            cboEstado : fn.CleanValue(req.body.cboEstado1,"GENERAL", TipoDomicilio == "N" ? true : false, "- Estado"),
            cboMuncipio : fn.CleanValue(req.body.cboMunicipio1,"GENERAL", TipoDomicilio == "N" ? true : false, "- Municipio"),
            txtColonia : fn.CleanValue(req.body.txtColonia1,"GENERAL",  TipoDomicilio == "I" ? true : false, "- Colonia"),
            txtEstado : fn.CleanValue(req.body.txtEstado1,"GENERAL", TipoDomicilio == "I" ? true : false, "- Estado"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipio1,"GENERAL", TipoDomicilio == "I" ? true : false, "- Municipio"),
            pais : fn.CleanValue(req.body.cboPais1,"GENERAL", true, "- País"),
        }
        
    }
    
    if(TipoDomicilio=="N"){
        Cod_colonia = data.domicilio.cboColonia.split("|")[0];
    }
    tipo_persona = data.tipoPersona;
    let catalogos =await GetCatalogosGenerales(req, 3);
    let catf = {catalogos};
    main :{
        error_msg = fn.GetErrores();
        if(error_msg!=""){
            break main;
        }
        let params = [
            req.user.IdEmpresaCliente,
            data.cod_cliente_pm,
            data.cod_accionista,
            data.nombre,
            data.apaterno,
            data.amaterno,
            data.pais_nacimiento,
            data.nacionalidad,
            data.cod_actividad,
            data.cod_patrimonio,
            data.email,
            data.telefono,
            data.datos_identificacion.identificacion,
            data.datos_identificacion.NumeroIdentificacion,
            data.datos_identificacion.fechaExpedicion_base,
            data.datos_identificacion.fechaExpiracion_base,
            data.datos_identificacion.AnioExpedicion,
            data.datos_identificacion.AnioExpiracion,
            data.datos_identificacion.paisEmision,
            TipoDomicilio,
            data.domicilio.pais,
            data.domicilio.cboEstado,
            data.domicilio.cboMuncipio,
            Cod_colonia,
            data.domicilio.ciudad,
            data.domicilio.cp,
            data.domicilio.txtEstado,
            data.domicilio.txtMunicipio,
            data.domicilio.txtColonia,
            data.domicilio.calle,
            data.domicilio.noext,
            data.domicilio.noint,
            req.user.IdUser,
            req.user.IdEmpresa,
            data.status,
            data.porcentaje,
            data.rfc,
            data.curp
        ];
        
        try {
            let result = await pool.query("call usp_gestiona_pm_datos_accionistas_pf(?)", [params]); 
            let r =result[0];
             if(r[0].code=="00"){
                 let success_msg = r[0].msg;
                 error_msg = "";
                 continua = 0;
                 req.flash("success_msg", success_msg);
                 res.redirect(url.format({pathname: "/mantenimiento/persona-moral/accionistas",  query:{"hfidnva": "0" }}));
             }else { 
                 error_msg = r[0].msg;
             }
         } catch (error) {
             error_msg = "Error al tratar de almacenar la información: " + error;
         }
     }
        if(continua == 1){
             let dt = {  action : data.accion}
             let catf = {catalogos, data, error_msg, dt, tipo_persona };
             res.render("persona-moral/add-accionista", catf ); 
         };
});

router.post('/mantenimiento/persona-moral/addAccionistaPMProcess', isLoggedIn, async (req, res)=>{ 
    
    let continua = 1;
    let error_msg = [];
    let Cod_colonia = "";
    let TipoDomicilio = "";
    let tipoN="";
    let tipoI ="";
    let tipo_persona = "";
    if(req.body.optTipoDom1=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
    
    data = {
        accion :"U",
        cod_accionista : req.body.hfidacc2,
        porcentaje : req.body.txtPorcentaje,
        tipoPersona : req.body.cboTipoPersona,
        tipo_persona_descripcion : req.body.cboTipoPersona == "PM"? 'PERSONA MORAL' : 'PERSONA FISICA',
        cod_cliente_pm :  fn.CleanValue(req.body.hfidsecc2,"GENERAL", true, "- Código PM inválido, debes dar de alta al cliente Persona Moral"),
        nombreComercial : fn.CleanValue(req.body.txtNombreComercial,"GENERAL", true, "- Nombre comercial"),
        telefono : fn.CleanValue(req.body.txtTelefono,"GENERAL", true, "- Teléfono"),
        status : fn.CleanValue(req.body.cboStatus,"GENERAL", true, "- Status"),
        web : fn.CleanValue(req.body.txtWeb,"GENERAL", true, "- Página Web"),
        email : fn.CleanValue(req.body.txtEmail,"GENERAL", true, "- Correo electrónico"),
        cod_actividad : fn.CleanValue(req.body.cboActividad,"GENERAL", true, "- Actividad"),
        rfc : fn.CleanValue(req.body.txtRFC,"GENERAL", true, "- RFC"),
        razonSocial : fn.CleanValue(req.body.txtRazonSocial,"GENERAL", true, "- Razón Social"),
        fecha_constitucion : fn.CleanValue(req.body.txtFechaConstitucion,"GENERAL", true, "- Fecha de Constitución"),
        fecha_constitucion_base : fn.CleanValue(req.body.txtFechaConstitucion,"FECHA_BASE", false, ""),
        nacionalidad : fn.CleanValue(req.body.cboNacionalidad,"GENERAL", false, "- Nacionalidad"),
        datos_constitucion :{
            tipoConstitucion : fn.CleanValue(req.body.cboTipoCtrl1,"GENERAL", false, ""),
            pais : fn.CleanValue(req.body.cboPaisCtrl1,"GENERAL", true, "País de Constitución"),
            cboEstado : fn.CleanValue(req.body.cboEstadoCtrl1,"GENERAL", req.body.cboPaisCtrl1 == "N" ? true : false, "- Estado de Constitución"),
            cboMunicipio : fn.CleanValue(req.body.cboMunicipioCtrl1,"GENERAL", req.body.cboPaisCtrl1 == "N" ? true : false, "- Municipio de Constitución"),
            txtEstado : fn.CleanValue(req.body.txtEstadoCtrl,"GENERAL", req.body.cboPaisCtrl1 == "I" ? true : false, "- Estado de Constitución"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipioCtrl,"GENERAL", req.body.cboPaisCtrl1 == "I" ? true : false, "- Municipio de Constitución"),
        },
        domicilio : {
            calle: fn.CleanValue(req.body.txtCalle1,"GENERAL", true, "- Calle"),
            noint: fn.CleanValue(req.body.txtNumInt1,"GENERAL", false, "- Número Interior"),
            noext: fn.CleanValue(req.body.txtNumExt1,"GENERAL", true, "- Número Exterior"),
            ciudad: fn.CleanValue(req.body.txtCiudad1,"GENERAL", true, "- Ciudad"),
            cp: fn.CleanValue(req.body.txtCP1,"GENERAL", true, "- CP"),
            tipoI: tipoI,
            tipoN: tipoN,
            cboColonia : fn.CleanValue(req.body.cboColonia1,"GENERAL", TipoDomicilio == "N" ? true : false , "- Colonia"),
            cboEstado : fn.CleanValue(req.body.cboEstado1,"GENERAL", TipoDomicilio == "N" ? true : false, "- Estado"),
            cboMuncipio : fn.CleanValue(req.body.cboMunicipio1,"GENERAL", TipoDomicilio == "N" ? true : false, "- Municipio"),
            txtColonia : fn.CleanValue(req.body.txtColonia1,"GENERAL",  TipoDomicilio == "I" ? true : false, "- Colonia"),
            txtEstado : fn.CleanValue(req.body.txtEstado1,"GENERAL", TipoDomicilio == "I" ? true : false, "- Estado"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipio1,"GENERAL", TipoDomicilio == "I" ? true : false, "- Municipio"),
            pais : fn.CleanValue(req.body.cboPais1,"GENERAL", true, "- País"),
        } 
    }

    if(TipoDomicilio=="N"){
        Cod_colonia = data.domicilio.cboColonia.split("|")[0];
    }
    tipo_persona = data.tipoPersona;
    let catalogos =await GetCatalogosGenerales(req, 3);
    let catf = {catalogos};
    main :{
        error_msg = fn.GetErrores();
        if(error_msg!=""){
            break main;
        }
        let params = [
            req.user.IdEmpresaCliente,
            data.cod_cliente_pm,
            data.cod_accionista,
            data.nombreComercial,
            data.telefono,
            data.status,
            data.web,
            data.email,
            data.cod_actividad,
            data.rfc,
            data.razonSocial,
            data.fecha_constitucion_base,
            data.nacionalidad,
            data.datos_constitucion.tipoConstitucion,
            data.datos_constitucion.pais,
            data.datos_constitucion.cboEstado,
            data.datos_constitucion.cboMunicipio,
            data.datos_constitucion.txtEstado,
            data.datos_constitucion.txtMunicipio,
            req.user.IdUser,
            req.user.IdEmpresa,
            data.porcentaje,
            TipoDomicilio,
            data.domicilio.pais,
            data.domicilio.cboEstado,
            data.domicilio.cboMuncipio,
            Cod_colonia,
            data.domicilio.ciudad,
            data.domicilio.cp,
            data.domicilio.txtEstado,
            data.domicilio.txtMunicipio,
            data.domicilio.txtColonia,
            data.domicilio.calle,
            data.domicilio.noext,
            data.domicilio.noint
        ];
        console.log(params);
        try {
            let result = await pool.query("call usp_gestiona_pm_datos_accionistas_pm(?)", [params]); 
            let r =result[0];
             if(r[0].code=="00"){
                 let success_msg = r[0].msg;
                 error_msg = "";
                 continua = 0;
                 req.flash("success_msg", success_msg);
                 res.redirect(url.format({pathname: "/mantenimiento/persona-moral/accionistas",  query:{"hfidnva": "0" }}));
             }else { 
                 error_msg = r[0].msg;
             }
         } catch (error) {
             error_msg = "Error al tratar de almacenar la información: " + error;
         }
     }
        if(continua == 1){
             let dt = {  action : data.accion}
             let catf = {catalogos, data, error_msg, dt, tipo_persona };
             res.render("persona-moral/add-accionista", catf ); 
         };
});

router.post('/mantenimiento/persona-moral/addPropietarioProcess', isLoggedIn, async (req, res)=>{ 
    
    let continua = 1;
    let error_msg = [];
    let TipoDomicilio = "";
    let Cod_colonia = "";
    let tipoN="";
    let tipoI ="";
    let tipo_persona = "";
    if(req.body.optTipoDom1=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
    if(req.body.cboTipoCtrl2=="N"){TipoDomicilio2="N"; }else{ TipoDomicilio2="I";}

    
   
    data = {
        accion :"U",
        cod_accionista : req.body.hfidacc2,
        cod_propietario: req.body.hfidpro2,
        tipoPersona : req.body.cboTipoPersona,
        cod_cliente_pm :  req.session.cod_pm,
        nombre : fn.CleanValue(req.body.txtNombre,"GENERAL", true, "- Nombre del "),
        apaterno : fn.CleanValue(req.body.txtApaterno,"GENERAL", true, "- Apellido paterno del "),
        amaterno : fn.CleanValue(req.body.txtAmaterno,"GENERAL", false, ""),
        pais_nacimiento : fn.CleanValue(req.body.cboPaisNacimiento,"GENERAL", true, "- Pais de Nacimiento"),
        nacionalidad : fn.CleanValue(req.body.cboNacionalidad,"GENERAL", true, "- Nacionalidad"),
        status : req.body.cboStatus,
        cod_actividad : fn.CleanValue(req.body.cboActividad,"GENERAL", true, "- Actividad Económica"),
        cod_patrimonio : fn.CleanValue(req.body.cboPatrimonio,"GENERAL", true, "- Patrimonio"),
        email :fn.CleanValue(req.body.txtEmail,"GENERAL", true, "- Email"), 
        telefono : fn.CleanValue(req.body.txtTelefono,"GENERAL", true, "- Teléfono"),
        datos_identificacion : {
            identificacion :fn.CleanValue(req.body.cboIdentificacion1,"GENERAL", true, "- Identificación"),
            NumeroIdentificacion: fn.CleanValue(req.body.txtNumeroIdentificacion1,"GENERAL", true, "- Número de Identificación"),
            fechaExpedicion: req.body.txtFechaExpedicion1,
            fechaExpedicion_base: req.body.txtFechaExpedicion1 == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaExpedicion1),
            AnioExpedicion:  req.body.txtAnioExpedicion1 == "" ? null : req.body.txtAnioExpedicion1,
            AnioExpiracion: req.body.txtAnioVigencia1 == "" ? null : req.body.txtAnioVigencia1,
            paisEmision: req.body.cboEmision1,
            fechaExpiracion:req.body.txtFechaVigencia1 == "" ? null : req.body.txtFechaVigencia1,
            fechaExpiracion_base:req.body.txtFechaVigencia1 == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaVigencia1),
        },
        domicilio : {
            calle: fn.CleanValue(req.body.txtCalle1,"GENERAL", true, "- Calle"),
            noint: fn.CleanValue(req.body.txtNumInt1,"GENERAL", false, "- Número Interior"),
            noext: fn.CleanValue(req.body.txtNumExt1,"GENERAL", true, "- Número Exterior"),
            ciudad: fn.CleanValue(req.body.txtCiudad1,"GENERAL", true, "- Ciudad"),
            cp: fn.CleanValue(req.body.txtCP1,"GENERAL", true, "- CP"),
            tipoI: tipoI,
            tipoN: tipoN,
            cboColonia : fn.CleanValue(req.body.cboColonia1,"GENERAL", TipoDomicilio == "N" ? true : false , "- Colonia"),
            cboEstado : fn.CleanValue(req.body.cboEstado1,"GENERAL", TipoDomicilio == "N" ? true : false, "- Estado"),
            cboMuncipio : fn.CleanValue(req.body.cboMunicipio1,"GENERAL", TipoDomicilio == "N" ? true : false, "- Municipio"),
            txtColonia : fn.CleanValue(req.body.txtColonia1,"GENERAL",  TipoDomicilio == "I" ? true : false, "- Colonia"),
            txtEstado : fn.CleanValue(req.body.txtEstado1,"GENERAL", TipoDomicilio == "I" ? true : false, "- Estado"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipio1,"GENERAL", TipoDomicilio == "I" ? true : false, "- Municipio"),
            pais : fn.CleanValue(req.body.cboPais1,"GENERAL", true, "- País"),
        }
    }
    
    if(TipoDomicilio=="N"){
        Cod_colonia = data.domicilio.cboColonia.split("|")[0];
    }
    tipo_persona = data.tipoPersona;
    let catalogos =await GetCatalogosGenerales(req, 3);
    let catf = {catalogos};
    main :{
        error_msg = fn.GetErrores();
        if(error_msg!=""){
            break main;
        }
        let params = [
            req.user.IdEmpresaCliente,
            data.cod_cliente_pm,
            data.cod_accionista,
            data.cod_propietario,
            data.nombre,
            data.apaterno,
            data.amaterno,
            data.pais_nacimiento,
            data.nacionalidad,
            data.cod_actividad,
            data.cod_patrimonio,
            data.email,
            data.telefono,
            data.datos_identificacion.identificacion,
            data.datos_identificacion.NumeroIdentificacion,
            data.datos_identificacion.fechaExpedicion_base,
            data.datos_identificacion.fechaExpiracion_base,
            data.datos_identificacion.AnioExpedicion,
            data.datos_identificacion.AnioExpiracion,
            data.datos_identificacion.paisEmision,
            TipoDomicilio,
            data.domicilio.pais,
            data.domicilio.cboEstado,
            data.domicilio.cboMuncipio,
            Cod_colonia,
            data.domicilio.ciudad,
            data.domicilio.cp,
            data.domicilio.txtEstado,
            data.domicilio.txtMunicipio,
            data.domicilio.txtColonia,
            data.domicilio.calle,
            data.domicilio.noext,
            data.domicilio.noint,
            req.user.IdUser,
            req.user.IdEmpresa,
            data.status
        ];
        console.log(params);
        try {
            let result = await pool.query("call usp_gestiona_pm_datos_propietario_real(?)", [params]); 
            let r =result[0];
             if(r[0].code=="00"){
                 let success_msg = r[0].msg;
                 error_msg = "";
                 continua = 0;
                 req.flash("success_msg", success_msg);
                 res.redirect(url.format({pathname: "/mantenimiento/persona-moral/add-accionista",  query:{"hfidnva": "0", "hfidacc2": data.cod_accionista,"cboTipoPersona": "PM", }}));
             }else { 
                 error_msg = r[0].msg;
             }
         } catch (error) {
             error_msg = "Error al tratar de almacenar la información: " + error;
         }
     }
        if(continua == 1){
             let dt = {  action : data.accion}
             let catf = {catalogos, data, error_msg, dt, tipo_persona };
             res.render("persona-moral/add-propietario", catf ); 
         };
});

router.post('/mantenimiento/persona-moral/addperfilProcess', isLoggedIn, async (req, res)=>{ 
    
    let continua = 1;
    let error_msg = [];
  
    data = {
        accion : "U",
        cod_cliente_pm : fn.CleanValue(req.body.hfidsecc4,"GENERAL", true, "- Código de Cliente"),
        numero_operaciones_esperadas_envio : fn.CleanValue(req.body.cboNoOperacionesEnvio,"GENERAL", true, "- Operaciones esperadas para envio"),
        numero_operaciones_esperadas_pago : fn.CleanValue(req.body.cboNoOperacionesPago,"GENERAL", true, "- Operaciones esperadas para pago"),
        monto_esperado_envio : fn.CleanValue(req.body.cboMontosEnvio,"GENERAL", true, "- Monto esperado para pago"),
        monto_esperado_pago : fn.CleanValue(req.body.cboMontosPago,"GENERAL", true, "- Monto esperado ára envio"),
        maneja_efectivo : fn.CleanValue(req.body.cboManejaEfectivo,"GENERAL", true, "- ¿Maneja Efectivo?"),
        montos_que_maneja : fn.CleanValue(req.body.cboMontosManeja,"INT", false, "- Monto que maneja"),
        origen_recursos : fn.CleanValue(req.body.cboOrigenRecursos,"GENERAL", true, "- Origen de los recursos"),
        destino_recursos : fn.CleanValue(req.body.cboDestinoRecursos,"GENERAL", true, "- Destino de los recursos"),
        tiene_pep : fn.CleanValue(req.body.cboTienePep,"GENERAL", true, "- Relación PEP"),
        nombrePep : fn.CleanValue(req.body.txtNombrePep,"GENERAL", false, "- Nombre del PEP"),
        apaternoPep : fn.CleanValue(req.body.txtApaternoPep,"GENERAL", false, "- Apelltido Paterno del PEP"),
        amaternoPep : fn.CleanValue(req.body.txtAmaternoPep,"GENERAL", false, "- Apellido Materno del PEP"),
        exportaciones: fn.CleanValue(req.body.cboExportaciones,"GENERAL", true, "- Exportaciones"),
        importaciones: fn.CleanValue(req.body.cboImportaciones,"GENERAL", true, "- importaciones"),
        PagoNacEfectivo: fn.CleanValue(req.body.cboPagoNacEfectivo,"GENERAL", true, "- Aplica pago Nacional Efectivo"),
        PagoNacDeposito: fn.CleanValue(req.body.cboPagoNacDeposito,"GENERAL", true, "- Aplica pago Nacional Depósito"),
        EnvioNacEfectivo:fn.CleanValue(req.body.cboEnvioNacEfectivo,"GENERAL", true, "- Aplica envío Nacional Efectivo"),
        EnvioNacDeposito:fn.CleanValue(req.body.cboEnvioNacDeposito,"GENERAL", true, "- Aplica envío Nacional Depósito"),
        PagoIntEfectivo:fn.CleanValue(req.body.cboPagoIntEfectivo,"GENERAL", true, "- Aplica pago Internacional Efectivo"),
        PagoIntDeposito:fn.CleanValue(req.body.cboPagoIntDeposito,"GENERAL", true, "- Aplica pago Internacional Depósito"),
        EnvioIntEfectivo:fn.CleanValue(req.body.cboEnvioIntEfectivo,"GENERAL", true, "- Aplica envío Internacional Efectivo"),
        EnvioIntDeposito:fn.CleanValue(req.body.cboEnvioIntDeposito,"GENERAL", true, "- Aplica envío Internacional Depósito"),
        numero_operaciones_esperadas_pago_int:fn.CleanValue(req.body.cboNoOperacionesPagoInt,"GENERAL", true, "- Operaciones esperadas para pago internacional"),
        monto_esperado_pago_int:fn.CleanValue(req.body.cboMontosPagoInt,"GENERAL", true, "- Monto esperado para pago Internacional"),
        numero_operaciones_esperadas_envio_int:fn.CleanValue(req.body.cboNoOperacionesEnvioInt,"GENERAL", true, "- Operaciones esperadas para envío internacional"),
        monto_esperado_envio_int:fn.CleanValue(req.body.cboMontosEnvioInt,"GENERAL", true, "- Monto esperado para envío internacional"),
        divisa_1:fn.CleanValue(req.body.cboDivisas1,"GENERAL", true, "- Divisa 1"),
        divisa_2:fn.CleanValue(req.body.cboDivisas2,"GENERAL", true, "- Divisa 2"),
    }

    let catalogos =await GetCatalogosGenerales(req, 4);
    let catf = {catalogos};
    main :{
        error_msg = fn.GetErrores();
        if(error_msg!=""){
            break main;
        }
        let params = [
            req.user.IdEmpresaCliente,
            data.cod_cliente_pm,
            data.numero_operaciones_esperadas_envio,
            data.numero_operaciones_esperadas_pago,
            data.monto_esperado_envio,
            data.monto_esperado_pago,
            data.maneja_efectivo,
            data.montos_que_maneja,
            data.origen_recursos,
            data.destino_recursos,
            data.tiene_pep,
            data.nombrePep,
            data.apaternoPep,
            data.amaternoPep,
            req.user.IdUser,
            req.user.IdEmpresa,
            data.exportaciones,
            data.importaciones,
            data.PagoNacEfectivo,
            data.PagoNacDeposito,
            data.EnvioNacEfectivo,
            data.EnvioNacDeposito,
            data.PagoIntEfectivo,
            data.PagoIntDeposito,
            data.EnvioIntEfectivo,
            data.EnvioIntDeposito,
            data.numero_operaciones_esperadas_pago_int,
            data.monto_esperado_pago_int,
            data.numero_operaciones_esperadas_envio_int,
            data.monto_esperado_envio_int,
            data.divisa_1,
            data.divisa_2
        ];
        
        try {
            let result = await pool.query("call usp_gestiona_pm_perfil_transaccional(?)", [params]); 
            let r =result[0];
             if(r[0].code=="00"){
                 let success_msg = r[0].msg;
                 error_msg = "";
                 continua = 0;
                 req.flash("success_msg", success_msg);
                 res.redirect(url.format({pathname: "/mantenimiento/persona-moral/perfil-transaccional",  query:{"hfidnva": data.cod_cliente_pm }}));
             }else { 
                 error_msg = r[0].msg;
             }
         } catch (error) {
             error_msg = "Error al tratar de almacenar la información: " + error;
         }
     }
        if(continua == 1){
             let dt = {  action : data.accion}
             let catf = {catalogos, data, error_msg, dt };
             res.render("persona-moral/add-perfil-transaccional", catf ); 
         };
});

router.post('/mantenimiento/persona-moral/addDatosbancariosProcess', isLoggedIn, async (req, res)=>{ 
    let continua = 1;
    let error_msg = [];
    let data = {
        accion : "U",
        cod_cliente_pm :  fn.CleanValue(req.body.hfidsecc5,"GENERAL", true, "- Código PM inválido, debes dar de alta al cliente Persona Moral"),
        nombreBanco : fn.CleanValue(req.body.cboBanco,"GENERAL", true, "- Banco"),
        direccionBanco : fn.CleanValue(req.body.txtDireccionBanco,"GENERAL", true, "- Dirección"),
        cod_divisaBanco : fn.CleanValue(req.body.cboDivisaBanco,"GENERAL", true, "- Divisa"),
        cuentaBanco : fn.CleanValue(req.body.txtCuentaBanco,"GENERAL", true, "- Cuenta"),
        cuentaClabe : fn.CleanValue(req.body.txtClabeBanco,"GENERAL", true, "- Clabe"),
        pais_banco : fn.CleanValue(req.body.cboPaisBanco,"GENERAL", true, "- Pais"),
    }
    let catalogos =await GetCatalogosGenerales(req, 5);
    let catf = {catalogos};
    main :{
        error_msg = fn.GetErrores();
        if(error_msg!=""){
            break main;
        }
        let params = [
            req.user.IdEmpresaCliente,
            data.cod_cliente_pm,
            data.nombreBanco,
            data.direccionBanco,
            data.cod_divisaBanco,
            data.cuentaBanco,
            data.cuentaClabe,
            req.user.IdUser,
            req.user.IdEmpresa,
            data.pais_banco
        ];
        
        try {
            let result = await pool.query("call usp_gestiona_pm_datos_bancarios(?)", [params]); 
            let r =result[0];
             if(r[0].code=="00"){
                 let success_msg = r[0].msg;
                 error_msg = "";
                 continua = 0;
                 req.flash("success_msg", success_msg);
                 res.redirect(url.format({pathname: "/mantenimiento/persona-moral/datos-bancarios",  query:{"hfidnva": data.cod_cliente_pm }}));
             }else { 
                 error_msg = r[0].msg;
             }
         } catch (error) {
             error_msg = "Error al tratar de almacenar la información: " + error;
         }
     }
        if(continua == 1){
             let dt = {  action : data.accion}
             let catf = {catalogos, data, error_msg, dt };
             res.render("persona-moral/add-datos-bancarios", catf ); 
         };
});

router.post('/mantenimiento/persona-moral/addadicionalesProcess', isLoggedIn, async (req, res)=>{ 
    let continua = 1;
    let error_msg = [];
    let data = {
        accion : "U",
        cod_cliente_pm :  fn.CleanValue(req.body.hfidsecc6,"GENERAL", true, "- Código PM inválido, debes dar de alta al cliente Persona Moral"),
        id_nivel : fn.CleanValue(req.body.cboPlantillaAdd,"GENERAL", true, "- Nivel de Riesgo"),
        divisa_importe_max : fn.CleanValue(req.body.cboDivisa,"GENERAL", true, "- Divisa"),
        importe_max : req.body.txtImporteMax,
        fechacontrato : fn.CleanValue(req.body.txtFechaContrato,"GENERAL", true, "- Fecha de Contrato"),
        fechacontrato_base : fn.CleanValue(req.body.txtFechaContrato,"FECHA_BASE", false, ""),
    }
    let catalogos =await GetCatalogosGenerales(req, 6);
    let catf = {catalogos };
    main :{
        error_msg = fn.GetErrores();
        if(error_msg!=""){
            break main;
        }
        let params = [
            req.user.IdEmpresaCliente,
            data.cod_cliente_pm,
            data.fechacontrato_base,
            data.importe_max,
            data.divisa_importe_max,
            data.id_nivel,
            req.user.IdUser,
            req.user.IdEmpresa
        ];
        try {
            let result = await pool.query("call usp_gestiona_pm_datos_adicionales(?)", [params]); 
            let r =result[0];
             if(r[0].code=="00"){
                 let success_msg = r[0].msg;
                 error_msg = "";
                 continua = 0;
                 req.flash("success_msg", success_msg);
                 res.redirect(url.format({pathname: "/mantenimiento/persona-moral/datos-adicionales",  query:{"hfidnva": data.cod_cliente_pm }}));
             }else { 
                 error_msg = r[0].msg;
             }
         } catch (error) {
             error_msg = "Error al tratar de almacenar la información: " + error;
         }
     }
        if(continua == 1){
             let dt = {  action : data.accion}
             let catf = {catalogos, data, error_msg, dt };
             res.render("persona-moral/add-datos-adicionales", catf ); 
         };
});
function armaConsultaPerfilCte(parametrosBusqueda, req){
    var sql ="";
    var sqlP = "Select * from vw_beneficiarios_by_clientes_pm where cod_empresa = '" + req.user.IdEmpresaCliente +"'";
    sql = sql + (parametrosBusqueda.cod_pm !="" ? " and cod_subempresa = '"+ parametrosBusqueda.cod_pm + "'": "");
    var tipo = "";
    /*switch (parametrosBusqueda.tipo_persona) {
        case "PF":
            tipo = "FISICA";
            sql = sql + " and tipo_persona  = '"+ tipo +"'";
            break;
        case "PM":
            tipo = "MORAL";
            sql = sql + " and tipo_persona  = '"+ tipo +"'";    
            break;
    
        default:
            break;
    }
    */
    if(parametrosBusqueda.nombre!="")
    {
        sql = sql + " and  nombre_completo LIKE '%" + parametrosBusqueda.nombre + "%'";
    }
    console.log(sqlP + sql);
    return sqlP + sql;
}
router.get('/mantenimiento/persona-moral/beneficiarios', isLoggedIn, async (req, res)=>{ 
    let parametrosBusqueda = req.session.consultaPMBeneficiarios;
    let resultReportes = {};
    let result_clientes = await CatalogosBD.Cat_clientes_pm(req);
    if(parametrosBusqueda != undefined){
        let sql = armaConsultaPerfilCte(parametrosBusqueda, req);
        resultReportes = await pool.query( sql);
    }
    res.render("persona-moral/busqueda-beneficiario",{ parametrosBusqueda, resultReportes, result_clientes});
});

router.get('/mantenimiento/persona-moral/beneficiarios-pm', isLoggedIn, async (req, res)=>{ 
    main :{
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break main;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }
        let dt = { cod_cliente_pm : req.session.cod_pm, action: "U" }
        
        
        let result_clientes = await pool.query( "Select * from vw_beneficiarios_by_clientes_pm where cod_empresa = ? and cod_subempresa = ?", [req.body.IdEmpresaCliente, cod_pm]);
        res.render("persona-moral/beneficiarios-by-cliente-pm",{result_clientes,dt});
    }
});


router.all('/mantenimiento/persona-moral/add-beneficiario', isLoggedIn, async (req, res)=>{ 

    principal :{
    if(!req.body.hfidnva){
        if(!req.session.cod_pm){
            req.flash("error_msg", "No existe el código de cliente a consultar");
            res.redirect("/mantenimiento/persona-moral");
            break principal;
        }else{
            cod_pm = req.session.cod_pm;
        }
    }else{
        cod_pm = req.body.hfidnva;
    }

    let cod_cliente="";
    let result_paisesNac = {};
    let resultIdentificaciones = {};
    let result_clientes = {};
    let result_entidades_financieras = {};
    let result_monedas = {};
    let dt = {
        accion : "I"
    };

    main:{
        result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
        resultIdentificaciones = await pool.query("Select * from vw_cliente_identificacion where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]); 
        result_clientes = await CatalogosBD.Cat_clientes_pm(req);  
        result_genero = await CatalogosBD.Cat_genero();
        result_entidades_financieras = await CatalogosBD.Cat_entidades_financieras(req);
        result_monedas = await CatalogosBD_PLD.ReportesReg_Cat_divisa();
        
    }
    data = {cod_subempresa : cod_pm}
    res.render("persona-moral/add-beneficiario",{result_paisesNac, result_monedas, result_entidades_financieras, dt, resultIdentificaciones, result_clientes, result_genero, data });
}
});

router.all('/mantenimiento/persona-moral/add-beneficiario-pm', isLoggedIn, async (req, res)=>{ 
    
principal :{
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break principal;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }

        let result_clientes = {};
        let catalogos = await GetCatalogosGenerales(req, 7);
        
        let data = {
            accion : "I",
            cod_subempresa: cod_pm
        };
        main:{
            result_clientes = await CatalogosBD.Cat_clientes_pm(req);  
        }
        let dt = {action : "U"}
        let catf = {catalogos,  data, result_clientes , dt};
        
        res.render("persona-moral/add-beneficiario-pm", catf);
    }
});

router.all('/mantenimiento/persona-moral/edit-beneficiario-pm', isLoggedIn, async (req, res)=>{ 
    let cod_pm = "";
    main :{
    if(!req.body.hfidva){
        if(!req.query.hfidva){
            req.flash("error_msg", "No existe el beneficiario a consultar");
            res.redirect("/mantenimiento/persona-moral/beneficiarios");
            break main;
        }else{
            cod_pm = req.query.hfidva;
        }
        }else{
            cod_pm = req.body.hfidva;
        }
    
    

    let r = await CatalogosBD.Get_pm_beneficiario_pm(req, cod_pm);
    
    let result_clientes = await CatalogosBD.Cat_clientes_pm(req);  
    
    if(r.length==0){
        req.flash("error_msg", "No existe información a consultar");
        res.redirect("/mantenimiento/persona-moral/beneficiarios");
        break main;
    } 
    //Datos Generales
    let tipoN="";
    let tipoI ="";
    if(r[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
    let data = {
        accion :"U",
        cod_subempresa : r[0].cod_subempresa,
        cod_cliente_pm : r[0].cod_beneficiario,
        nombreComercial : r[0].nombre_comercial,
        telefono : r[0].telefono,
        status : r[0].status,
        web : r[0].pagina_web,
        email : r[0].email,
        cod_actividad : r[0].cod_actividad,
        domicilio : {
            calle: r[0].calle,
            noint: r[0].no_int,
            noext: r[0].no_ext,
            ciudad: r[0].ciudad,
            cp: r[0].cp,
            tipoI: tipoI,
            tipoN: tipoN,
            cboColonia : r[0].cod_asentamiento,
            cboEstado : r[0].cod_estado,
            cboMuncipio : r[0].cod_municipio,
            txtColonia : r[0].asentamiento,
            txtEstado : r[0].estado,
            txtMunicipio : r[0].municipio,
            pais : r[0].cod_pais,
        },
        rfc : r[0].rfc,
        razonSocial : r[0].razon_social,
        fecha_constitucion : r[0].fecha_constitucion_formato,
        fecha_constitucion_base:"",
        fecha_inscripcion : r[0].fecha_inscripcion_formato,
        fecha_inscripcion_base : "",
        nacionalidad : r[0].cod_nacionalidad,
        datos_constitucion :{
            tipoConstitucion : r[0].tipo,
            pais : r[0].cod_pais_constitucion,
            cboEstado : r[0].cod_estado_constitucion,
            cboMunicipio : r[0].cod_municipio_constitucion,
            txtEstado : r[0].estado_constitucion,
            txtMunicipio : r[0].cod_municipio_constitucion
        }, 
        no_escritura : r[0].no_escritura,
        numero_empleados : r[0].no_empleados,
        folioMercantil : r[0].no_folio,
        descripcion1 : r[0].objeto_social,
        cod_banco : r[0].cod_entidad,
        direccionBanco : r[0].direccion,
        cod_divisaBanco : r[0].cod_moneda,
        cuentaBanco : r[0].num_cuenta,
        cuentaClabe : r[0].clabe,
        
    }
    



    let catalogos = await GetCatalogosGenerales(req, 7);
    let dt = {  action : "U"}
    let catf = {catalogos, dt, data , result_clientes};
    res.render("persona-moral/add-beneficiario-pm", catf);
}

})

router.all('/mantenimiento/persona-moral/edit-beneficiario', isLoggedIn, async (req, res)=>{ 
    let cod_cliente="";
    let result_paisesNac = {};
    let data = {};
    let dt = {};
    let resultIdentificaciones = {};
    let result_pais_nacimiento = {};
    let result_genero = {};
    let catalogos = {};
    let result_clientes = {};
    let result_monedas = {};
    main:{
        if(!req.body.hfidva){
            if(!req.query.hfidva){
              req.flash("error_msg", "No existe el beneficiario a consultar");
              res.redirect("/mantenimiento/persona-moral/beneficiarios-pm");
              break main;
            }else{
                cod_cliente = req.query.hfidva;
            }
          }else{
            cod_cliente = req.body.hfidva;
          }
      result_clientes = await CatalogosBD.Cat_clientes_pm(req);  
      result_pais_nacimiento = await CatalogosBD.Cat_paises();
      result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
      resultIdentificaciones = await pool.query("Select * from vw_cliente_identificacion where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);   
      resultdatos_bancarios = await pool.query("Select * from clientes_datos_bancarios where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);   
      result_genero = await CatalogosBD.Cat_genero();
      result_entidades_financieras = await CatalogosBD.Cat_entidades_financieras(req);
      result_monedas = await CatalogosBD_PLD.ReportesReg_Cat_divisa();
      let resultCliente = await pool.query("Select * from vw_clientes where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);
      catalogos = {result_pais_nacimiento};
      
      if (resultCliente.length>0){
          let tipoN =""; tipoI="";
          if(resultCliente[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
        dt = {
            accion : "U",
            action : "U"
        };
          data = {
            cod_cliente: resultCliente[0].cod_cliente, 
            nombre: resultCliente[0].nombre_cliente,
            apaterno: resultCliente[0].apaterno_cliente,
            amaterno: resultCliente[0].amaterno_cliente,
            telefono: resultCliente[0].telefono,
            lada: resultCliente[0].lada,
            fechanacimiento : resultCliente[0].fecha_nacimiento,
            pais_nacimiento : resultCliente[0].cod_pais_nacimiento,
            nacionalidad : resultCliente[0].cod_nacionalidad,
            calle: resultCliente[0].calle,
            noint: resultCliente[0].no_int,
            noext: resultCliente[0].no_ext,
            ciudad: resultCliente[0].ciudad,
            cp: resultCliente[0].cp,
            tipoI: tipoI,
            tipoN:tipoN,
            cboColonia : resultCliente[0].cod_asentamiento + "|" + resultCliente[0].cp,
            cboEstado : resultCliente[0].cod_estado,
            cboMuncipio : resultCliente[0].cod_municipio,
            txtColonia : resultCliente[0].asentamiento,
            txtEstado : resultCliente[0].estado,
            txtMunicipio :resultCliente[0].municipio,
            pais : resultCliente[0].cod_pais,
            status: resultCliente[0].status,
            status_descripcion: resultCliente[0].descripcion_status,
            nivel : resultCliente[0].nivel,
            color_nivel : resultCliente[0].color_nivel,
            cod_subempresa :resultCliente[0].cod_subempresa,
            curp : resultCliente[0].curp,
            genero : resultCliente[0].cod_genero,
            cod_banco : resultdatos_bancarios[0] == undefined ? "" :  resultdatos_bancarios[0].cod_entidad,
            cod_divisaBanco : resultdatos_bancarios[0] == undefined? "": resultdatos_bancarios[0].cod_moneda,
            cuentaBanco : resultdatos_bancarios[0] == undefined? "": resultdatos_bancarios[0].num_cuenta,
            cuentaClabe : resultdatos_bancarios[0] == undefined?"":resultdatos_bancarios[0].clabe,
          };
        }  
        res.render("persona-moral/add-beneficiario",{result_paisesNac,result_monedas, result_entidades_financieras, data, resultIdentificaciones, result_clientes , catalogos, result_genero, dt});
  }    
});

router.post('/mantenimiento/persona-moral/beneficiarios', isLoggedIn, async (req, res)=>{ 
    let resultReportes = {}
    let parametrosBusqueda = {}
    let result_clientes = await CatalogosBD.Cat_clientes_pm(req);
    main : {
        parametrosBusqueda = {
            cod_pm : req.body.cboPM.trim(),
            nombre : fn.CleanCadena(req.body.txtNombre.trim()),
            tipo_persona : ''
          };
        req.session.consultaPMBeneficiarios = parametrosBusqueda;
        if(parametrosBusqueda.cod_pm =="" && parametrosBusqueda.nombre=="" && parametrosBusqueda.tipo_persona==""){
            req.flash("alert_message", "Debes seleccionar un criterio de búsqueda");
            res.redirect('/mantenimiento/persona-moral/beneficiarios');
            break main;
        }
        let sqlf = armaConsultaPerfilCte(parametrosBusqueda,req);
        resultReportes = await pool.query( sqlf);
    }
    res.render("persona-moral/busqueda-beneficiario",{resultReportes, parametrosBusqueda, result_clientes});
});

router.post('/mantenimiento/persona-moral/beneficiarios-pm', isLoggedIn, async (req, res)=>{ 
    let resultReportes = {}
    let parametrosBusqueda = {}
    let dt = {}
    main : {

        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break main;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }
        dt = { cod_cliente_pm : req.session.cod_pm, action: "U" }

        parametrosBusqueda = {
            cod_pm : cod_pm,
            nombre : fn.CleanCadena(req.body.txtNombre.trim()),
            tipo_persona : ''
          };
        req.session.consultaPMBeneficiarios = parametrosBusqueda;
        if(parametrosBusqueda.cod_pm =="" && parametrosBusqueda.nombre=="" && parametrosBusqueda.tipo_persona==""){
            req.flash("alert_message", "Debes seleccionar un criterio de búsqueda");
            res.redirect('/mantenimiento/persona-moral/beneficiarios');
            break main;
        }
        let sqlf = armaConsultaPerfilCte(parametrosBusqueda,req);
        resultReportes = await pool.query( sqlf);
    }
    res.render("persona-moral/beneficiarios-by-cliente-pm",{resultReportes, parametrosBusqueda, dt});
});

router.all('/mantenimiento/persona-moral/carga-beneficiarios', isLoggedIn, async (req, res)=>{ 
    principal : {    
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break principal;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
        }
        let result_clientes = await CatalogosBD.Cat_clientes_pm(req);
        dt = {action: "U"}
        data = {cod_subempresa :cod_pm}
        res.render("persona-moral/beneficiarios", {result_clientes, dt, data}); 
    }
});


router.all('/mantenimiento/persona-moral/beneficiariosProcess', isLoggedIn, async (req, res)=>{ 
    let tipoI = "";
    let tipoN = "";
    let TipoDomicilio = "";
    let Cod_colonia = "";
    let data = {};
    let dt = {};
    let continua = 1;
    let result_paisesNac={};
    let result_clientes = {};
    let result_genero = {};
    let cod_cliente = "";
    let accion = req.body.txtAccion;
main:{

    if(!req.body.hfidnva){
        if(!req.session.cod_pm){
            req.flash("error_msg", "No existe el código de cliente a consultar");
            res.redirect("/mantenimiento/persona-moral");
            break main;
        }else{
            cod_pm = req.session.cod_pm;
        }
    }else{
        cod_pm = req.body.hfidnva;
    }

    if(accion =="U"){
        if(!req.body.hfidva){
            if(!req.query.hfidva){
                req.flash("error_msg", "No existe el beneficiario a consultar");
                res.redirect("/mantenimiento/persona-moral/beneficiarios-pm");
                break main;
            }else{
                cod_cliente = req.query.hfidva;
            }
        }else{
        cod_cliente = req.body.hfidva;
        }
    }
    try{
    
        if(req.body.cboColonia!="")
        {
            Cod_colonia = req.body.cboColonia.split("|")[0];
        }
        if(req.body.optTipoDom=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
        dt = {
            accion : accion,    
            action : accion
        }
        data = {
        status : fn.CleanValue(req.body.cboStatus.toUpperCase(),"GENERAL", false, ""),    
        cod_subempresa : cod_pm,
        cod_cliente : cod_cliente !=""? cod_cliente : "0",
        nombre: fn.CleanValue(req.body.txtNombreCte.toUpperCase(),"GENERAL", true, "- Nombre"),
        apaterno: fn.CleanValue(req.body.txtApaterno.toUpperCase(),"GENERAL", true, "- Apellido Paterno"),
        amaterno: fn.CleanValue(req.body.txtAmaterno.toUpperCase(),"GENERAL", false, ""),
        telefono: fn.CleanValue(req.body.txtTelefono,"GENERAL", true, "- Apellido Materno"),
        lada: fn.CleanValue(req.body.txtLada,"GENERAL", true, "- Lada"),
        fechanacimiento : fn.CleanValue(req.body.txtFechaNacimiento,"GENERAL", true, "- Fecha de Nacimiento"),
        fecha_NacimientoBase :  fn.CleanValue(req.body.txtFechaNacimiento,"FECHA_BASE", false, ""),
        calle: fn.CleanValue(req.body.txtCalle,"GENERAL", true, "- Calle"),
        noint: fn.CleanValue(req.body.txtNumInt,"GENERAL", false, "- Número Interior"),
        noext: fn.CleanValue(req.body.txtNumExt,"GENERAL", true, "- Número Exterior"),
        ciudad: fn.CleanValue(req.body.txtCiudad,"GENERAL", true, "- Ciudad"),
        cp: fn.CleanValue(req.body.txtCP,"GENERAL", true, "- CP"),
        tipoI: tipoI,
        tipoN: tipoN,
        cboColonia : fn.CleanValue(req.body.cboColonia,"GENERAL", TipoDomicilio == "N" ? true : false , "- Colonia"),
        cboEstado : fn.CleanValue(req.body.cboEstado,"GENERAL", TipoDomicilio == "N" ? true : false, "- Estado"),
        cboMuncipio : fn.CleanValue(req.body.cboMunicipio,"GENERAL", TipoDomicilio == "N" ? true : false, "- Municipio"),
        txtColonia : fn.CleanValue(req.body.txtColonia,"GENERAL",  TipoDomicilio == "I" ? true : false, "- Colonia"),
        txtEstado : fn.CleanValue(req.body.txtEstado,"GENERAL", TipoDomicilio == "I" ? true : false, "- Estado"),
        txtMunicipio : fn.CleanValue(req.body.txtMunicipio,"GENERAL", TipoDomicilio == "I" ? true : false, "- Municipio"),
        pais : fn.CleanValue(req.body.cboPais,"GENERAL", true, "- País"),
        pais_nacimiento : fn.CleanValue(req.body.cboPaisNacimiento,"GENERAL", true, "- Pais de Nacimiento"),
        nacionalidad : fn.CleanValue(req.body.cboNacionalidad,"GENERAL", true, "- Nacionalidad"),
        curp: fn.CleanValue(req.body.txtCURP,"GENERAL", true, "- CURP"),
        genero: fn.CleanValue(req.body.cboGenero,"GENERAL", true, "- Género"),
        cod_banco : fn.CleanValue(req.body.cboBanco,"GENERAL", false, "- Banco"),
        cod_divisaBanco : fn.CleanValue(req.body.cboDivisaBanco,"GENERAL", false, "- Divisa"),
        cuentaBanco : fn.CleanValue(req.body.txtCuentaBanco,"GENERAL", false, "- Cuenta"),
        cuentaClabe : fn.CleanValue(req.body.txtClabeBanco,"GENERAL", false, "- Clabe"),
        };
    }catch(e){
        req.flash("error_message", "Error al obtener los datos para modificar el registro del cliente"); 
    }
        sql = "call usp_gestiona_cliente_pm(?)";
        let params = [
            req.user.IdEmpresaCliente,
            data.cod_cliente,
            data.nombre,
            data.apaterno,
            data.amaterno,
            data.lada,
            data.telefono,
            TipoDomicilio,
            data.pais,
            data.cboEstado,
            data.cboMuncipio,
            Cod_colonia,
            data.ciudad, 
            data.cp,
            data.txtEstado, 
            data.txtMunicipio, 
            data.txtColonia,
            data.calle, 
            data.noext, 
            data.noint, 
            data.nacionalidad,
            data.pais_nacimiento,
            data.fecha_NacimientoBase,
            data.curp,
            data.cod_subempresa,
            req.user.IdUser,
            req.user.IdEmpresa,
            data.status,
            data.genero
        ];

        try {
            let result = await pool.query(sql, [params]); 
            let r =result[0];
            if(r[0].code=="00"){
                
                let params2 = [
                    req.user.IdEmpresaCliente,
                    r[0].cod_cliente,
                    data.cod_banco,
                    data.cod_divisaBanco,
                    data.cuentaBanco,
                    data.cuentaClabe,
                    req.user.IdUser,
                    req.user.IdEmpresa
                ];
                console.log(params2);
                try {
                    await pool.query("call usp_gestiona_cliente_datos_bancarios(?)", [params2]); 
                } catch (error) {
                    console.log(error);
                }
                try {
                await fn_pld.aplicacion_reglas_pld_out(req, 4, data.cod_cliente ); //Carga de identificacion
                        if (fn_pld.code == "00"){
                            Paso2 = true;
                        }else{
                            alert_message = fn_pld.msg;
                            console.log("mensaje:" + fn_pld.msg);
                            CtrlBusqueda = true;
                            res.render("remesas/new-remesa-paso2",{alert_message,data, CtrlBusqueda , result_paisesNac, result_genero});
                        }
                } catch (error) {
                    console.log(error);
                }


                let success_msg = r[0].msg;
                error_msg = "";
                continua = 1;
                let cod_generado = r[0].cod_cliente;
                req.flash("success_msg", success_msg);
                res.redirect(url.format({pathname: "/mantenimiento/persona-moral/edit-beneficiario",  query:{"hfidva": cod_generado }}));
            }else { 
                error_msg = r[0].msg;
                continua = 0;
            }
        } catch (error) {
            continua = 0;
            error_msg = "Error al tratar de almacenar la información: " + error;
        }

        if(continua == 0){
            result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
            result_clientes = await CatalogosBD.Cat_clientes_pm(req);
            resultIdentificaciones = await pool.query("Select * from vw_cliente_identificacion where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]); 
            result_pais_nacimiento = await CatalogosBD.Cat_paises();
            result_genero = await CatalogosBD.Cat_genero();
            let catf = {result_clientes,result_paisesNac, resultIdentificaciones, data, error_msg, dt, result_pais_nacimiento, result_genero };
            res.render("persona-moral/add-beneficiario", catf ); 
        };  
    }
});
router.all('/mantenimiento/persona-moral/add-identificacionProccess', isLoggedIn, async (req, res)=>{ 
    let error_msg = [];

    data = {
        accion :"U",
        cod_beneficiario : req.body.hfiben,
        datos_identificacion : {
            identificacion :fn.CleanValue(req.body.cboIdentificacion1,"GENERAL", true, "- Identificación"),
            NumeroIdentificacion: fn.CleanValue(req.body.txtNumeroIdentificacion1,"GENERAL", true, "- Número de Identificación"),
            fechaExpedicion: req.body.txtFechaExpedicion1,
            fechaExpedicion_base: req.body.txtFechaExpedicion1 == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaExpedicion1),
            AnioExpedicion:  req.body.txtAnioExpedicion1 == "" ? null : req.body.txtAnioExpedicion1,
            AnioExpiracion: req.body.txtAnioVigencia1 == "" ? null : req.body.txtAnioVigencia1,
            paisEmision: req.body.cboEmision1,
            fechaExpiracion:req.body.txtFechaVigencia1 == "" ? null : req.body.txtFechaVigencia1,
            fechaExpiracion_base:req.body.txtFechaVigencia1 == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaVigencia1),
        }
    }
    
    main :{
        let params = [
            req.user.IdEmpresaCliente,
            data.cod_beneficiario,
            data.datos_identificacion.identificacion,
            data.datos_identificacion.NumeroIdentificacion,
            data.datos_identificacion.fechaExpedicion_base,
            data.datos_identificacion.fechaExpiracion_base,
            data.datos_identificacion.AnioExpedicion,
            data.datos_identificacion.AnioExpiracion,
            data.datos_identificacion.paisEmision,
            req.user.IdUser
        ];
        
        try {
            let result = await pool.query("call usp_inserta_identificacion_pm(?)", [params]); 
            let r =result[0];
            if(r[0].code=="00"){
                let success_msg = r[0].msg;
                error_msg = "";
                req.flash("success_msg", success_msg);
                res.redirect(url.format({pathname: "/mantenimiento/persona-moral/edit-beneficiario",  query:{"hfidva": data.cod_beneficiario }}));
            }else { 
                error_msg = r[0].msg;
                req.flash("error_msg", error_msg);
                res.redirect(url.format({pathname: "/mantenimiento/persona-moral/edit-beneficiario",  query:{"hfidva": data.cod_beneficiario }}));
            }
        } catch (error) {
            continua = 0;
            error_msg = "Error al tratar de almacenar la información: " + error;
            req.flash("error_msg", error_msg);
            res.redirect(url.format({pathname: "/mantenimiento/persona-moral/edit-beneficiario",  query:{"hfidva": data.cod_beneficiario }}));
        }
    }
});



router.post('/mantenimiento/persona-moral/AddbeneficiarioPMProcess', isLoggedIn, async (req, res)=>{ 
    
 principal : {

  
    fn.errores = [];
    let catalogos = [];
    let error_msg = "";
    let TipoDomicilio = "";
    let Cod_colonia = "";
    let tipoN="";
    let tipoI ="";
    let success_msg = "";
    let continua = 1;
    let cod_pm = "";
    if(req.body.optTipoDom0=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}

    if(!req.body.hfidnva){
        if(!req.session.cod_pm){
            req.flash("error_msg", "No existe el código de cliente a consultar");
            res.redirect("/mantenimiento/persona-moral");
            break principal;
        }else{
            cod_pm = req.session.cod_pm;
        }
    }else{
        cod_pm = req.body.hfidnva;
    }

    let data = {
        accion : req.body.txtAccion,
        cod_subempresa : cod_pm,
        cod_cliente_pm : req.body.txtAccion=="I"? "" : fn.CleanValue(req.body.hfidsecc1,"GENERAL", true, "- Código PM inválido, debes dar de alta al cliente Persona Moral") ,
        nombreComercial : fn.CleanValue(req.body.txtNombreComercial,"GENERAL", true, "- Nombre comercial"),
        telefono : fn.CleanValue(req.body.txtTelefono,"GENERAL", true, "- Teléfono"),
        status : fn.CleanValue(req.body.cboStatus,"GENERAL", true, "- Status"),
        web : fn.CleanValue(req.body.txtWeb,"GENERAL", true, "- Página Web"),
        email : fn.CleanValue(req.body.txtEmail,"GENERAL", true, "- Correo electrónico"),
        cod_actividad : fn.CleanValue(req.body.cboActividad,"GENERAL", true, "- Actividad"),
        domicilio : {
            calle: fn.CleanValue(req.body.txtCalle0,"GENERAL", true, "- Calle"),
            noint: fn.CleanValue(req.body.txtNumInt0,"GENERAL", false, "- Número Interior"),
            noext: fn.CleanValue(req.body.txtNumExt0,"GENERAL", true, "- Número Exterior"),
            ciudad: fn.CleanValue(req.body.txtCiudad0,"GENERAL", true, "- Ciudad"),
            cp: fn.CleanValue(req.body.txtCP0,"GENERAL", true, "- CP"),
            tipoI: tipoI,
            tipoN: tipoN,
            cboColonia : fn.CleanValue(req.body.cboColonia0,"GENERAL", TipoDomicilio == "N" ? true : false , "- Colonia"),
            cboEstado : fn.CleanValue(req.body.cboEstado0,"GENERAL", TipoDomicilio == "N" ? true : false, "- Estado"),
            cboMuncipio : fn.CleanValue(req.body.cboMunicipio0,"GENERAL", TipoDomicilio == "N" ? true : false, "- Municipio"),
            txtColonia : fn.CleanValue(req.body.txtColonia0,"GENERAL",  TipoDomicilio == "I" ? true : false, "- Colonia"),
            txtEstado : fn.CleanValue(req.body.txtEstado0,"GENERAL", TipoDomicilio == "I" ? true : false, "- Estado"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipio0,"GENERAL", TipoDomicilio == "I" ? true : false, "- Municipio"),
            pais : fn.CleanValue(req.body.cboPais0,"GENERAL", true, "- País"),
        },
        rfc : fn.CleanValue(req.body.txtRFC,"GENERAL", true, "- RFC"),
        razonSocial : fn.CleanValue(req.body.txtRazonSocial,"GENERAL", true, "- Razón Social"),
        fecha_constitucion : fn.CleanValue(req.body.txtFechaConstitucion,"GENERAL", true, "- Fecha de Constitución"),
        fecha_constitucion_base : fn.CleanValue(req.body.txtFechaConstitucion,"FECHA_BASE", false, ""),
        fecha_inscripcion : fn.CleanValue(req.body.txtFechaInscripcion,"GENERAL", false, ""),
        fecha_inscripcion_base : fn.CleanValue(req.body.txtFechaInscripcion,"FECHA_BASE", false, ""),
        nacionalidad : fn.CleanValue(req.body.cboNacionalidad,"GENERAL", false, "- Nacionalidad"),
        datos_constitucion :{
            tipoConstitucion : fn.CleanValue(req.body.cboTipoCtrl1,"GENERAL", false, ""),
            pais : fn.CleanValue(req.body.cboPaisCtrl1,"GENERAL", true, "País de Constitución"),
            cboEstado : fn.CleanValue(req.body.cboEstadoCtrl1,"GENERAL", req.body.cboPaisCtrl1 == "N" ? true : false, "- Estado de Constitución"),
            cboMunicipio : fn.CleanValue(req.body.cboMunicipioCtrl1,"GENERAL", req.body.cboPaisCtrl1 == "N" ? true : false, "- Municipio de Constitución"),
            txtEstado : fn.CleanValue(req.body.txtEstadoCtrl,"GENERAL", req.body.cboPaisCtrl1 == "I" ? true : false, "- Estado de Constitución"),
            txtMunicipio : fn.CleanValue(req.body.txtMunicipioCtrl,"GENERAL", req.body.cboPaisCtrl1 == "I" ? true : false, "- Municipio de Constitución"),
        }, 
        no_escritura : fn.CleanValue(req.body.txtEscritura,"GENERAL", true, "- Escritura Constitutiva"),
        numero_empleados : fn.CleanValue(req.body.cboNoEmpleados,"GENERAL", true, "- No. de Empleados"),
        folioMercantil : fn.CleanValue(req.body.txtFolioMercantil,"GENERAL", true, "- Folio Mercantil"),
        descripcion1 : fn.CleanValue(req.body.txtDescription1,"GENERAL", true, "- Objeto"),
        cod_banco : fn.CleanValue(req.body.cboBanco,"GENERAL", true, "- Banco"),
        direccionBanco : fn.CleanValue(req.body.txtDireccionBanco,"GENERAL", true, "- Dirección"),
        cod_divisaBanco : fn.CleanValue(req.body.cboDivisaBanco,"GENERAL", true, "- Divisa"),
        cuentaBanco : fn.CleanValue(req.body.txtCuentaBanco,"GENERAL", true, "- Cuenta"),
        cuentaClabe : fn.CleanValue(req.body.txtClabeBanco,"GENERAL", true, "- Clabe"),
    }
    
    if(TipoDomicilio=="N"){
        Cod_colonia = data.domicilio.cboColonia.split("|")[0];
    }
    catalogos = await GetCatalogosGenerales(req, 7);
    main :{
        error_msg = fn.GetErrores();
        if(error_msg!=""){
            break main;
        }
        let params = [
            data.accion,
            req.user.IdEmpresaCliente,
            data.cod_cliente_pm,
            data.nombreComercial,
            data.telefono,
            data.status,
            data.web,
            data.email,
            data.cod_actividad,
            data.rfc,
            data.razonSocial,
            data.fecha_constitucion_base,
            data.fecha_inscripcion_base,
            data.nacionalidad,
            data.datos_constitucion.tipoConstitucion,
            data.datos_constitucion.pais,
            data.datos_constitucion.cboEstado,
            data.datos_constitucion.cboMunicipio,
            data.datos_constitucion.txtEstado,
            data.datos_constitucion.txtMunicipio,
            data.no_escritura,
            data.folioMercantil,
            data.descripcion1,
            data.numero_empleados,
            TipoDomicilio,
            data.domicilio.pais,
            data.domicilio.cboEstado,
            data.domicilio.cboMuncipio,
            Cod_colonia,
            data.domicilio.ciudad,
            data.domicilio.cp,
            data.domicilio.txtEstado,
            data.domicilio.txtMunicipio,
            data.domicilio.txtColonia,
            data.domicilio.calle,
            data.domicilio.noext,
            data.domicilio.noint,
            data.cod_banco,
            data.direccionBanco,
            data.cod_divisaBanco,
            data.cuentaBanco,
            data.cuentaClabe,
            req.user.IdUser,
            req.user.IdEmpresa,
            data.cod_subempresa
        ];

        try {
           let result = await pool.query("call usp_gestiona_pm_beneficiario(?)", [params]); 
           let r =result[0];
            if(r[0].code=="00"){
                data.accion = "U";
                data.cod_cliente_pm = r[0].cod_pm;
                success_msg = r[0].msg;
                error_msg = "";
                continua = 0;
           
                req.flash("success_msg", success_msg);
                res.redirect(url.format({pathname: "/mantenimiento/persona-moral/edit-beneficiario-pm",  query:{"hfidva": data.cod_cliente_pm }}));
            }else { 
                error_msg = r[0].msg;
            }
        } catch (error) {
            error_msg = "Error al tratar de almacenar la información: " + error;
        }
    }

       if(continua == 1){
            let result_clientes = await CatalogosBD.Cat_clientes_pm(req);  
            let dt = {  action : data.accion}
            let catf = {catalogos, data, error_msg, dt, success_msg, result_clientes };
            res.render("persona-moral/add-beneficiario-pm", catf ); 
        };
    }
});

var type = upload.single('flUpload');
router.post("/mantenimiento/persona-moral/cargaMasivaprocess", isLoggedIn, type, async(req, res)=>{
    let success_msg="";
    let error_msg="";
    let data = {
        cod_subempresa : ""
    };
    let RegistrosExitosos = [];
    req.session.RegistrosExistosos = [];
    let errores = [];
    let datosExcel = [];
    let result_clientes = {};
    let success_message = "";

    principal :{
    if(!req.body.hfidnva){
        if(!req.session.cod_pm){
            req.flash("error_msg", "No existe el código de cliente a consultar");
            res.redirect("/mantenimiento/persona-moral");
            break principal;
        }else{
            cod_pm = req.session.cod_pm;
        }
    }else{
        cod_pm = req.body.hfidnva;
    }

    main :{
            result_clientes = await CatalogosBD.Cat_clientes_pm(req);  
            if (req.file == undefined) {
                error_msg = "Por favor sube un archivo de excel";
                res.render("/mantenimiento/persona-moral/carga-beneficiarios",{error_msg});
                break main;
            }    
            let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
            data.cod_subempresa = cod_pm;
            let dtxls = await readXlsxFile(path);
                dtxls.shift();
                let contador = 1;
                dtxls.forEach((row) => {
                    let datos = {}
                    if(contador >= 0){
                        datos = {
                            cod_subempresa : fn.CleanValue(row[0],"GENERAL", false, ""),    
                            curp : fn.CleanValue(row[1],"GENERAL", false, ""),    
                            nombre : fn.CleanValue(row[2],"GENERAL", false, ""),    
                            apellido_paterno : fn.CleanValue(row[3],"GENERAL", false, ""),    
                            apellido_materno : fn.CleanValue(row[4],"GENERAL", false, ""),
                            fecha_nacimiento : fn.CleanValue(row[5],"GENERAL", false, ""),
                            lada : fn.CleanValue(row[6],"GENERAL", false, ""),        
                            telefono : fn.CleanValue(row[7],"GENERAL", false, ""),        
                            tipo_id : fn.CleanValue(row[8],"GENERAL", false, ""),        
                            num_id : fn.CleanValue(row[9],"GENERAL", false, ""),        
                            fecha_expedicion : fn.CleanValue(row[10],"GENERAL", false, ""),        
                            fecha_vigencia : fn.CleanValue(row[11],"GENERAL", false, ""),        
                            anio_expedicion : fn.CleanValue(row[12],"GENERAL", false, ""),        
                            anio_vigencia : fn.CleanValue(row[13],"GENERAL", false, ""),        
                        }
                        let resultado = ValidaRegistroBeneficiario(datos, data.cod_subempresa );
                        if(resultado.code != "00")
                        {
                            errores.push({
                                code : "01",
                                IDregistro: contador,
                                descripcion : resultado.descripcion,
                                columna : resultado.columna,
                                cod_beneficiario : "",
                                registro : datos
                            });            
                        }else{
                            datosExcel.push({
                                code : "00",
                                IDregistro: contador,
                                descripcion : resultado.descripcion,
                                columna : resultado.columna,
                                cod_beneficiario : "",
                                registro : datos
                            });            
                        }
                    }
                  contador ++;
                });
            if(datosExcel.length>0){
                for(let elem of datosExcel) {
                    try {
                        let params = armaParametrosBeneficiario(elem.registro, req, data);
                        let response = await pool.query("call usp_gestiona_cliente_pm(?)", [params]); 
                        let r = response[0];
                        if(r[0].code=="00"){
                            RegistrosExitosos.push(
                            {
                                    code : "00",
                                    IDregistro: elem.IDregistro,
                                    descripcion : elem.descripcion,
                                    columna : elem.columna,
                                    cod_beneficiario : r[0].cod_cliente,
                                    registro : elem.registro
                            });
                            let params2 = [
                                req.user.IdEmpresaCliente,
                                r[0].cod_cliente,
                                elem.registro.tipo_id,        
                                elem.registro.num_id,        
                                elem.registro.fecha_expedicion = elem.registro.fecha_expedicion ==""? null: elem.registro.fecha_expedicion,        
                                elem.registro.fecha_vigencia = elem.registro.fecha_vigencia ==""? null: elem.registro.fecha_vigencia,        
                                elem.registro.anio_expedicion = elem.registro.anio_expedicion ==""? null: elem.registro.anio_expedicion,                
                                elem.registro.anio_vigencia = elem.registro.anio_vigencia ==""? null: elem.registro.anio_vigencia,                
                                '',
                                req.user.IdUser
                            ];                            
                            try {
                                if(r[0].cod_cliente!=0){
                                    let inf = await pool.query("call usp_inserta_identificacion_pm(?)", [params2]); 
                                  }    
                            } catch (error) {
                                
                            }
                        }else{
                                errores.push(
                                {
                                    code : "01",
                                    IDregistro: elem.IDregistro,
                                    descripcion : elem.descripcion,
                                    columna : elem.columna,
                                    cod_beneficiario : 0,
                                    registro : elem.registro
                                });
                        }                    
                        } catch (error) {
                            errores.push(
                                {
                                    code : "01",
                                    IDregistro: elem.IDregistro,
                                    descripcion : elem.descripcion,
                                    columna : elem.columna,
                                    cod_beneficiario : 0,
                                    registro : elem.registro
                                });
                        }
                }
            }
            RegistrosExitosos = fn.filtraArrayPorElemento(RegistrosExitosos, "code", "00");

            if(RegistrosExitosos.length>0){
                success_message = "Se ha(n) guardado <b>"+ RegistrosExitosos.length + "</b> registro(s) correctamente"
            }

            if(errores.length>0){
                error_msg = "Algunos de los registros no fueron cargados correctamente";
            }else{
                if(RegistrosExitosos.length==0){
                    error_msg = "Hubo un error al guardar los registros de beneficiario en sistema, intena nuevamente."
                }
            }
            res.render("persona-moral/beneficiarios",{error_msg, success_message,RegistrosExitosos, datosExcel, errores,  data, result_clientes});   
    }
}
});


function ValidaRegistroBeneficiario(dato, empresa_seleccionada){
    let result = {
        code : "00",
        descripcion : "", 
        columna :0
    }
    if(dato.cod_subempresa == ""){
        result.code = "01";
        result.descripcion = "Código de Empresa incorrecto";
        result.columna = 0;
        return result;
    }
    if(dato.cod_subempresa != empresa_seleccionada){
        result.code = "01";
        result.descripcion = "La empresa seleccionada no coincide con la empresa capturada en el archivo excel";
        result.columna = 0;
        return result;
    }
    if(dato.curp == ""){
        result.code = "01";
        result.descripcion = "CURP vacío";
        result.columna = 1;
        return result;
    }
    if(dato.curp.length !=18){
        result.code = "01";
        result.descripcion = "Longitud de CURP no válida ";
        result.columna = 1;
        return result;
    }
    if(dato.nombre ==""){
        result.code = "01";
        result.descripcion = "Nombre del Beneficiario vacio";
        result.columna = 2;
        return result;
    }
    if(dato.apellido_paterno ==""){
        result.code = "01";
        result.descripcion = "Apellido Paterno del Beneficiario vacio";
        result.columna = 3;
        return result;
    }

    if(dato.fecha_nacimiento ==""){
        result.code = "01";
        result.descripcion = "Fecha de Nacimiento no válida";
        result.columna = 5;
        return result;
    }

    if(dato.fecha_nacimiento.length != 8){
        result.code = "01";
        result.descripcion = "Longitud de la Fecha de Nacimiento no válida";
        result.columna = 6;
        return result;
    }

    if(dato.lada !=""){
        if (isNaN(dato.lada)) {
            result.code = "01";
            result.descripcion = "Lada debe ser numérica";
            result.columna = 7;
            return result;
        }
        if(dato.lada.length !=2){
            result.code = "01";
            result.descripcion = "Lada debe ser de 2 dígitos";
            result.columna = 7;
            return result;
        }
    }
    if(dato.telefono !=""){
        if (isNaN(dato.telefono)) {
            result.code = "01";
            result.descripcion = "Teléfono debe ser numérico";
            result.columna = 8;
            return result;
        }
        if(dato.telefono.length <8){
            result.code = "01";
            result.descripcion = "El teléfono debe ser de 10 dígitos";
            result.columna = 8;
            return result;
        }
    }

    if(dato.tipo_id==""){
        result.code = "01";
        result.descripcion = "El tipo de Identificación es obligatorio";
        result.columna = 9;
        return result;
    }

    if(isNaN(dato.tipo_id)){
        result.code = "01";
        result.descripcion = "El tipo de Identificación debe ser numérico";
        result.columna = 9;
        return result;
    }
    if(dato.num_id==""){
        result.code = "01";
        result.descripcion = "El número de Identificación es obligatorio";
        result.columna = 10;
        return result;
    }
    return result;
}
function armaParametrosBeneficiario(dato, req, data){
    let params = [
        req.user.IdEmpresaCliente,
        0,
        dato.nombre,
        dato.apellido_paterno,
        dato.apellido_materno,
        dato.lada,
        dato.telefono,
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        dato.fecha_nacimiento,
        dato.curp,
        data.cod_subempresa,
        req.user.IdUser,
        req.user.IdEmpresa,
        1,
        ""
    ];
    console.log(params);
    return params
}

router.get('/persona-moral/envio-masivo', isLoggedIn, async (req, res)=>{ 
    let parametrosBusqueda = req.session.consultaPMBeneficiariosP;
    let resultReportes = {};
    let result_clientes = await CatalogosBD.Cat_clientes_pm(req);
    if(parametrosBusqueda != undefined){
        let sql = armaConsultaPlantillaCarga(parametrosBusqueda, req);
        resultReportes = await pool.query( sql);
    }
    res.render("persona-moral/envio-masivo",{ parametrosBusqueda, resultReportes, result_clientes});
});

function armaConsultaPlantillaCarga(parametrosBusqueda, req){
    var sql ="";
    var sqlP = "select * from vw_beneficiarios_pm_para_envios a where a.cod_empresa = '" + req.user.IdEmpresaCliente +"' and a.status = 1";
    sql = sql + (parametrosBusqueda.cod_pm !="" ? " and a.cod_subempresa = '"+ parametrosBusqueda.cod_pm + "'": "");
    return sqlP + sql;
}
router.post('/persona-moral/envio-masivo', isLoggedIn, async (req, res)=>{
    let resultReportes = {}
    let parametrosBusqueda = {}
    let result_clientes = await CatalogosBD.Cat_clientes_pm(req);
    main : {
        parametrosBusqueda = {
            cod_pm : req.body.cboPM.trim()
          };
        req.session.consultaPMBeneficiariosP = parametrosBusqueda;
        if(parametrosBusqueda.cod_pm =="" && parametrosBusqueda.nombre==""){
            req.flash("alert_message", "Debes seleccionar un criterio de búsqueda");
            res.redirect('/persona-moral/envio-masivo');
            break main;
        }
        let sqlf = armaConsultaPlantillaCarga(parametrosBusqueda,req);
        resultReportes = await pool.query( sqlf);
    }
    res.render("persona-moral/envio-masivo",{resultReportes, parametrosBusqueda, result_clientes});
});

router.all('/persona-moral/generacion-envios', isLoggedIn, async (req, res)=>{ 
    let result_clientes = await CatalogosBD.Cat_clientes_pm(req);
    let result_propositos = await CatalogosBD.Cat_propositos(req);
    let result_sucursales = await CatalogosBD.Cat_sucursales_empresa(req);
    let catf = {result_clientes, result_propositos, result_sucursales};
    res.render("persona-moral/generacion-envios", catf); 
});

router.all('/mantenimiento/persona-moral/tipo-beneficiario', isLoggedIn, async (req, res)=>{ 
    let tipopersona = req.body.cboTipoBeneficiario;
    var ruta = "";
    if(tipopersona=="PF"){
        ruta = "/mantenimiento/persona-moral/add-beneficiario";
    }else{
        ruta = "/mantenimiento/persona-moral/add-beneficiario-pm";
    }
    res.redirect(ruta);
});



router.post("/persona-moral/GeneracionMasivaprocess", isLoggedIn, type, async(req, res)=>{
    let data = {
        cod_subempresa : "",
        cod_proposito :"",
        cod_sucursal : "",
    };
    let RegistrosExitosos = [];
    req.session.RegistrosExistosos = [];
    let errores = [];
    let datosExcel = [];
    let result_clientes = {};
    let result_propositos = {};
    let result_sucursales = {};
    main :{
            result_clientes = await CatalogosBD.Cat_clientes_pm(req);  
            result_propositos = await CatalogosBD.Cat_propositos(req);
            result_sucursales = await CatalogosBD.Cat_sucursales_empresa(req);
            if (req.file == undefined) {
                error_msg = "Por favor sube un archivo de excel";
                res.render("/persona-moral/generacion-envios",{error_msg});
                break main;
            }    
            let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
            data.cod_subempresa = req.body.cboPM;
            data.cod_proposito = req.body.cboProposito;
            data.cod_sucursal = req.body.cboSucursal;
            let dtxls = await readXlsxFile(path);
                dtxls.shift();
                let contador = 1;
                dtxls.forEach((row) => {
                    let datos = {}
                    if(contador >= 0){
                        console.log(row);
                        datos = {
                            cod_subempresa : fn.CleanValue(row[0],"GENERAL", false, ""),    
                            cod_beneficiario : fn.CleanValue(row[1],"GENERAL", false, ""),    
                            nombre : fn.CleanValue(row[2],"GENERAL", false, ""),    
                            importe : fn.CleanValue(row[3],"GENERAL", false, ""),    
                            curp : fn.CleanValue(row[4],"GENERAL", false, ""),
                            cod_proposito : data.cod_proposito,
                            cod_sucursal : data.cod_sucursal
                        }
                        console.log(datos);
                        console.log(data.cod_subempresa);
                        let resultado = ValidaRegistroBeneficiarioEnvio(datos, data.cod_subempresa);
                        if(resultado.code != "00")
                        {
                            errores.push({
                                code : "01",
                                IDregistro: contador,
                                descripcion : resultado.descripcion,
                                columna : resultado.columna,
                                registro : datos
                            });            
                        }else{
                            datosExcel.push({
                                code : "00",
                                IDregistro: contador,
                                descripcion : resultado.descripcion,
                                columna : resultado.columna,
                                registro : datos
                            });            
                        }
                    }
                  contador ++;
                });

            if(datosExcel.length>0){
                for(let elem of datosExcel) {
                    try {
                        let params = armaParametrosRemesa(elem.registro, req);
                        let response = await pool.query("call usp_genera_remesa_pm(?)", [params]); 
                        let r = response[0];
                        
                        if(r[0].code=="00"){
                            RegistrosExitosos.push(
                            {
                                code : "00",
                                IDregistro: elem.IDregistro,
                                descripcion : elem.descripcion,
                                columna : elem.columna,
                                cod_remesa : r[0].claveCobro,
                                registro : elem.registro
                            });
                        }else{
                                errores.push(
                                {
                                    code : "01",
                                    IDregistro: elem.IDregistro,
                                    descripcion : r[0].msg,
                                    columna : elem.columna,
                                    cod_beneficiario : 0,
                                    registro : elem.registro
                                });
                        }                    
                        } catch (error) {
                            errores.push(
                                {
                                    code : "01",
                                    IDregistro: elem.IDregistro,
                                    descripcion : error,
                                    columna : elem.columna,
                                    cod_beneficiario : 0,
                                    registro : elem.registro
                                });
                        }
                }
            }
            RegistrosExitosos = fn.filtraArrayPorElemento(RegistrosExitosos, "code", "00");
            
            let message = "";
            let success_message = "";
            let alert_message = "";
            
            if((RegistrosExitosos.length == 0)&&(errores.length == 0)){
                message = "Error al procesar el archivo, intente de nuevo";                
            }else if((RegistrosExitosos.length == 0)&&(errores.length > 0)){
                message = "No se pudo generar ninguna remesa, favor de verificar la información ingresada";
            }else if((RegistrosExitosos.length > 0)&&(errores.length == 0)){
                success_message = "Envío(s) creado(s) exitósamente!"
            }else{
                alert_message = "No se ha generado la remesa  para algunos clientes, ver el detalle de errores en la tabla indicada.<br> Remesas generadas correctamente: "+ RegistrosExitosos.length ; 
            }

            res.render("persona-moral/generacion-envios",{ message, alert_message, success_message, RegistrosExitosos, datosExcel, errores,  data, result_clientes, result_propositos, result_sucursales});   
    }
});

function ValidaRegistroBeneficiarioEnvio(dato, empresa_seleccionada){
    let result = {
        code : "00",
        descripcion : "", 
        columna :0
    }
    if(dato.cod_subempresa == ""){
        result.code = "01";
        result.descripcion = "Código de Empresa incorrecto";
        result.columna = 0;
        return result;
    }
    
    if(dato.cod_subempresa != empresa_seleccionada){
        result.code = "01";
        result.descripcion = "La empresa seleccionada no coincide con la empresa capturada en el archivo excel";
        result.columna = 0;
        return result;
    }
    if(dato.curp == ""){
        result.code = "01";
        result.descripcion = "CURP vacío";
        result.columna = 1;
        return result;
    }
    if(dato.curp.length !=18){
        result.code = "01";
        result.descripcion = "Longitud de CURP no válida ";
        result.columna = 1;
        return result;
    }

    if(dato.importe ==""){
        result.code = "01";
        result.descripcion = "Importe vacío";
        result.columna = 1;
        return result;
    }
    if(dato.cod_beneficiario ==""){
        result.code = "01";
        result.descripcion = "Código de beneficiario vacio";
        result.columna = 1;
        return result;
    }
    
    
    return result;
}

function armaParametrosRemesa(registro, req){
    let params = [
    req.user.IdEmpresaCliente,
    registro.cod_subempresa,
    registro.cod_beneficiario,
    registro.importe,
    registro.curp,
    registro.cod_proposito,
    registro.cod_sucursal,
    req.user.IdUser,
    req.user.IdEmpresa,
    ];
    return params;
}

router.get('/mantenimiento/persona-moral/movimimientos', isLoggedIn, async(req, res)=>{ 
    principal : {
        if(!req.body.hfidnva){
            if(!req.session.cod_pm){
                req.flash("error_msg", "No existe el código de cliente a consultar");
                res.redirect("/mantenimiento/persona-moral");
                break principal;
            }else{
                cod_pm = req.session.cod_pm;
            }
        }else{
            cod_pm = req.body.hfidnva;
            req.session.cod_pm = cod_pm;
        }   
        let niveles = await pool.query("Select * from vw_plantilla_empresa where cod_empresa = ?", [req.user.IdEmpresaCliente]);
        dt = {action:"U"}
        let resultados = await loadRemesas(req.user.IdEmpresaCliente, cod_pm, 'PM', niveles); 
        res.render("persona-moral/movimientos",{dt, resultados});
    }
});

async function loadRemesas(cod_empresa, cod_pm, tipoPersona, niveles)
{
    let resultados = {};
  let result_envios_nacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
  let result_envios_internacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};

  let params = [cod_empresa, tipoPersona, cod_pm];
  let p02 = await pool.query("Select * from vw_remesas_out_calificacion_riesgo where cod_empresa = ? and tipo_remesa = ? and cod_cliente_remitente = ?", params);
  

  var  lq2 =  Enumerable.from(p02)
        .groupBy(z=>z.tipo_producto)
        .select(z=>(
        {
            tipo_producto:z.key(), 
            remesas:z.getSource(),
            porcentaje_riesgo : fn.roundToTwo(Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.porcentaje_riesgo)})),
            totalRemesas : Enumerable.from(z.getSource()).count(),
            valor_riesgo : Enumerable.from(z.getSource()).sum(function(item){return parseInt(item.calificacion)}),
            nivel_descripcion : "",
            nivel_color :""
        }))
        .toArray();

        lq2.forEach(element => {
            element.totalRemesas = element.totalRemesas ==""? 0 : element.totalRemesas;
            element.porcentaje_riesgo = fn.roundToTwo(element.totalRemesas == 0 ? 0 : element.porcentaje_riesgo/element.totalRemesas); 
            element.valor_riesgo = Math.round(element.totalRemesas == 0 ? 0 : (element.valor_riesgo = element.valor_riesgo==""? 0 : element.valor_riesgo)/element.totalRemesas); 
            
            if ( element.valor_riesgo!=0){
                niveles.forEach(item => {
                    if(item.id_nivel == element.valor_riesgo){
                        element.nivel_color = item.color;
                        element.nivel_descripcion = item.nombre;
                    }
                });
            }   
            switch(element.tipo_producto){
                case "EN":
                    result_envios_nacionales = element;
                    break;
                case "EI":
                    result_envios_internacionales = element;
                    break;
            }

        });

        resultados = {
           // result_pagos_nacionales : result_pagos_nacionales,
           // result_pagos_internacionales : result_pagos_internacionales,
            result_envios_nacionales : result_envios_nacionales,
            result_envios_internacionales : result_envios_internacionales
        }

        console.log(resultados);
        
        return resultados;
}

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-persona-moral.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-remesadores.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const fs = require('fs');
const path = require("path");
const { userInfo } = require("os");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const fn_db = require("../lib/catalogosBD");
const url = require('url');

router.get('/mantenimiento/remesadores', isLoggedIn, async (req, res)=>{ 
  let sql = "select cod_remesador, nombre, limite_max,  divisa_limite_max, case when status  = 1 then 'ACTIVO' else 'INACTIVO' end as descripcion_status from empresa_remesadores where cod_empresa = ?";
  
  const result = await pool.query(sql, [req.user.IdEmpresaCliente]);
 
    res.render("catalogos/remesadores", {result});
  });

  router.get('/mantenimiento/remesador/add',isLoggedIn, async (req, res)=>
{
  var sql2 = "select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?"
  const plantilla = await pool.query(sql2, req.user.IdEmpresaCliente);  
  const result = await pool.query("Select cod_pais, pais FROM cat_paises order by pais");
  let dt = { id : 0, action : "A"}
  res.render("catalogos/add-remesador",{dt, plantilla, result});
});

router.all('/mantenimiento/remesadores/edit', isLoggedIn,async (req, res)=>
{

  let cod_remesador="";
  if(!req.body.hfidnva){
    if(!req.query.hfidnva){
      res.redirect("/mantenimiento/remesadores");
    }else{
      cod_remesador = req.query.hfidnva;
    }
  }else{
    cod_remesador = req.body.hfidnva;
  }
  let idEmpresa  = req.user.IdEmpresaCliente;

  const plantilla = await pool.query("select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?", req.user.IdEmpresaCliente);     
  const resultPais = await fn_db.Cat_paises();
  const resultadoPaises = await fn_db.Get_paises_transmisor(req,cod_remesador);
  const resultadoBusqueda = await pool.query('select * from empresa_remesadores where cod_empresa = ? and cod_remesador = ?', [idEmpresa, cod_remesador]);
  const result_plantillas_recibos = await fn_db.Cat_recibos_plantilla(req.user.IdEmpresaCliente);
  let result_recibos = await fn_db.Get_recibos_por_remesador(req, cod_remesador);

  let data = {};
  if (resultadoBusqueda.length>0){
    data = {
      nombre: resultadoBusqueda[0].nombre,
      limite_max: resultadoBusqueda[0].limite_max,
      divisa_limite_max: resultadoBusqueda[0].divisa_limite_max,
      status : resultadoBusqueda[0].status,
      id_nivel: resultadoBusqueda[0].nivel_riesgo,
      comision: resultadoBusqueda[0].comision,
      divisa_comision: resultadoBusqueda[0].divisa_comision,
      cod_remesador_externo : resultadoBusqueda[0].cod_remesador_externo
    };
  }  
  let dt = { id : cod_remesador, action : "C"}
  
  let arreglos_paises = [] 
  let result = [];

  if(resultadoPaises.length>0){
    resultadoPaises.forEach(element => {
      let arreglo = element.paises.split("|");
      arreglos_paises.push({tipo_operacion: element.tipo_operacion, paises : arreglo});
    });
  };

  resultPais.forEach(element => {
    let chp = 0;
    let che = 0;

    if(arreglos_paises.length>0){
      if (arreglos_paises.find(item => item.tipo_operacion === "E" && item.paises.includes(element.cod_pais))) {che = 1;}
      if (arreglos_paises.find(item => item.tipo_operacion === "P" && item.paises.includes(element.cod_pais))) {chp = 1;}
   }
    objeto = {cod_pais : element.cod_pais, pais : element.pais, seleccionado_envios: che, seleccionado_pagos: chp };
    result.push(objeto);
  });
 
   res.render("catalogos/add-remesador", {data, dt, plantilla, result, result_plantillas_recibos, result_recibos});
});

router.post('/mantenimiento/agentes/addRemesadorProcess',isLoggedIn,async function (req, res, next) {
  
 const data = {
    nombre: fn.CleanCadena(req.body.txtNombreRemesador),
    limite_max: req.body.txtImporteMax,
    divisa_limite_max:req.body.cboDivisaProducto,
    status: req.body.cboStatus,
    id_nivel: req.body.cboPlantillaAdd,
    comision: req.body.txtComision,
    divisa_comision: req.body.cboDivisaComision,
    cod_remesador_externo : req.body.txtExterno
  };
  let sql;
  let registro = [];
  let success_msg="";
  let error_msg="";
  let action = "";
  const plantilla = await pool.query("select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?", req.user.IdEmpresaCliente);     

  if(req.body.hdActivaPanel=="A")  // INSERT
  {
    action = 'A';
     sql = 'CALL usp_inserta_remesador_relacionado(?)';
     success_msg = "El remesador ha registrado correctamente";
     error_msg = "El remesador que estas registrando ya existe en sistema";
     registro = [req.user.IdEmpresaCliente, data.nombre, data.limite_max, data.divisa_limite_max, data.status, data.id_nivel, req.user.IdUser, data.comision, data.divisa_comision, data.cod_remesador_externo];
     
  }else{
     action = 'C';
     sql = 'CALL usp_actualiza_remesador_relacionado(?)';
     success_msg = "El agente relacionado se ha actualizado correctamente";
     error_msg = "Error al tratar de actualizar los datos del agente relacionado";
     registro = [req.user.IdEmpresaCliente, req.body.hfidnva,  data.nombre, data.limite_max, data.divisa_limite_max, data.status, data.id_nivel, req.user.IdUser, data.comision, data.divisa_comision, data.cod_remesador_externo];  
  }
  
  let dt = { action: req.body.hdActivaPanel,   id: req.body.hfidnva }
  var sql2 = "select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?"

  const resultPais = await fn_db.Cat_paises();
  const resultadoPaises = await fn_db.Get_paises_transmisor(req,dt.id);
  const result_plantillas_recibos = await fn_db.Cat_recibos_plantilla(req.user.IdEmpresaCliente);
  let result_recibos = await fn_db.Get_recibos_por_remesador(req, data.cod_remesador);
  let arreglos_paises = [] 
  let result = [];

  if(resultadoPaises.length>0){
      resultadoPaises.forEach(element => {
        let arreglo = element.paises.split("|");
        arreglos_paises.push({tipo_operacion: element.tipo_operacion, paises : arreglo});
      });
  };

  resultPais.forEach(element => {
    let chp = 0;
    let che = 0;

    if(arreglos_paises.length>0){
      if(arreglos_paises.find(element => element.tipo_operacion === "E" && element.paises.includes(element.cod_pais))){che = 1}
      if(arreglos_paises.find(element => element.tipo_operacion === "P" && element.paises.includes(element.cod_pais))){chp = 1}
    }
    objeto = {cod_pais : element.cod_pais, pais : element.pais, seleccionado_envios: che, seleccionado_pagos: chp };
    result.push(objeto);
  });
  console.log("PAISES:")
  console.log(result);
  await pool.query(sql, [registro])
    .then(function(resultadoObtenido) {
          let r =resultadoObtenido[0];
          if((r[0]).cod=="00"){
           
            if(action =="A") { dt = { action: "C",   id: r[0].cod_remesador }; }
            req.flash("success_msg", success_msg);
            res.redirect(url.format({pathname: "/mantenimiento/remesadores/edit", query:{"hfidnva": dt.id}}));
          }else { 
              res.render("catalogos/add-remesador",{error_msg, data, dt, plantilla, result, result_plantillas_recibos, result_recibos });
          }
    }).catch(function(err){
      error_msg = err;
      res.render("catalogos/add-remesador",{error_msg, data, dt , plantilla, result, result_plantillas_recibos, result_recibos });
    });
  });

  
   
    router.get('/mantenimiento/remesadores/delplantillaProcess',isLoggedIn,async function (req, res, next) {
      const data = {
        cod_plantilla : req.query.id == undefined ? null : req.query.id,
        id : req.query.idrem,
        cod_empresa : req.user.IdEmpresaCliente 
      };
    
      let sql;
      let registro = [];
      let success_msg="";
      let error_msg="";
      
         sql = "CALL usp_delete_plantilla_asociada(?)";
         success_msg = "registro eliminado correctamente";
         error_msg = "Error al tratar de eliminar el registro";
         registro = [data.cod_empresa, data.id, data.cod_plantilla, "T"];
        
        console.log(registro);
    
      await pool.query(sql, [registro])
        .then(function(resultadoObtenido) {
              let r =resultadoObtenido[0];
              if((r[0]).code=="00"){
               req.flash("success_msg", success_msg);
              }else { 
                error_msg = r[0].msg;
                req.flash("error_msg", error_msg);
                
              }
              res.redirect(url.format({pathname: "/mantenimiento/remesadores/edit", query:{"hfidnva": data.id}}));
        }).catch(function(err){
          error_msg = err;
          req.flash("error_msg", error_msg);
          res.redirect(url.format({pathname: "/mantenimiento/remesadores/edit", query:{"hfidnva": data.id}}));
        });
      });
  
    router.post('/mantenimiento/remesadores/asignaplantillaProcess',isLoggedIn,async function (req, res, next) {
      const data = {
        cod_plantilla : req.body.cboPlantillaRecibo == undefined ? null : req.body.cboPlantillaRecibo,
        id : req.body.hfidnva 
      };
    
      let sql;
      let registro = [];
      let success_msg="";
      let error_msg="";
      let action = "";
    
         action = 'C';
         sql = 'CALL usp_asigna_recibo_remesador(?)';
         success_msg = "El recibo se ha asignado correctamente";
         error_msg = "Error al tratar de asignar el recibo al remesador";
         registro = [req.user.IdEmpresaCliente, req.body.hfidnva, data.cod_plantilla];
        
        console.log(registro);
    
      await pool.query(sql, [registro])
        .then(function(resultadoObtenido) {
              let r =resultadoObtenido[0];
              console.log(r);
              if((r[0]).code=="00"){
               req.flash("success_msg", success_msg);
              }else { 
                req.flash("error_msg", error_msg);
                error_msg = r[0].msg;
              }
              res.redirect(url.format({pathname: "/mantenimiento/remesadores/edit", query:{"hfidnva": data.id}}));
        }).catch(function(err){
          error_msg = err;
          req.flash("error_msg", error_msg);
          res.redirect(url.format({pathname: "/mantenimiento/remesadores/edit", query:{"hfidnva": data.id}}));
        });
      });

  
router.post('/mantenimiento/findRemesadores',isLoggedIn, async (req, res)=>{
  let nombre = req.body.txtNombreBusqueda.toUpperCase();
  let status = req.body.optStatus;
  let conditions= "";
   if(nombre!="")
   {
    conditions += " and  nombre LIKE '%" + nombre + "%'";
   }
   if(status!="")
   {
      conditions += " and status =" + status 
   }
   
   let sql = "select cod_remesador, nombre, limite_max,  divisa_limite_max, case when status  = 1 then 'ACTIVO' else 'INACTIVO' end as descripcion_status, comision, divisa_comision from empresa_remesadores where cod_empresa = ? " + conditions +";"
  
   const result = await pool.query(sql, [req.user.IdEmpresaCliente]);
  
   res.render("catalogos/remesadores", {result, nombre, status});
});

router.post('/mantenimiento/ajx/remesadores/updPaises',isLoggedIn,  async (req, res)=>{ 
  let data = [req.user.IdEmpresaCliente, req.body.codigo, req.body.paises_envios, req.body.paises_pagos];
  console.log(data);
  await pool.query("Call usp_gestiona_remesadoresPaises (?)", [data]).then(function(result){
    res.send("OK");
  }).catch(function(err){
    res.send(err);
  });
});


  module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-remesadores.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-sucursales.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const multer = require("multer");
const fs = require('fs');
const path = require("path");
const { userInfo } = require("os");
const { isLoggedIn } = require("../lib/auth");
const fn_bd = require("../lib/catalogosBD");
const fn_utils = require("../lib/catalogosFunctions");
const url = require('url');
const Handlebars = require("handlebars");
const { fn } = require("moment");

router.get('/mantenimiento/sucursales', isLoggedIn, async(req, res)=>{ 
    var sql2 = "select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? "
    const result_agentes = await pool.query(sql2, req.user.IdEmpresaCliente);  
    res.render("catalogos/sucursales",{result_agentes});
});
router.get('/mantenimiento/sucursales/add',isLoggedIn, async (req, res)=>
{
  var sql2 = "select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? "
  const result_actividad = await fn_bd.Cat_actividad_sucursal();
  const result_agentes = await pool.query(sql2, req.user.IdEmpresaCliente);  
  let dt = { id : 0, action : "A"}
  res.render("catalogos/add-sucursal",{dt, result_agentes,result_actividad });
});

router.post('/mantenimiento/sucursales/addSucursalProcess',isLoggedIn,async function (req, res, next) {

  let tipoI = "";
  let tipoN = "";
  let TipoDomicilio = "";
  let Cod_colonia = "";
  let tipo_servicio_agente = req.body.hftiposervicioAg;
  if(tipo_servicio_agente=="02"){
  if(req.body.cboColonia!="")
    {
      Cod_colonia = req.body.cboColonia.split("|")[0];
    }
  }
  if(req.body.optTipoDom=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
  const data = {
    cod_agente : req.body.cboAgente == undefined ? req.body.hfidcoda : req.body.cboAgente,
    nombre: req.body.txtNombreSucursal.toUpperCase(),
    telefono: tipo_servicio_agente !="02" ? "0000000000" : req.body.txtTelefono,
    calle: tipo_servicio_agente !="02" ? "" : req.body.txtCalle.toUpperCase(),
    noint: tipo_servicio_agente !="02" ? "" : req.body.txtNumInt.toUpperCase(),
    noext: tipo_servicio_agente !="02" ? "" : req.body.txtNumExt.toUpperCase(),
    ciudad: tipo_servicio_agente !="02" ? "" : req.body.txtCiudad.toUpperCase(),
    cp: tipo_servicio_agente !="02" ? "" : req.body.txtCP,
    tipoI: tipo_servicio_agente !="02" ? "" : tipoI,
    tipoN: tipo_servicio_agente !="02" ? "" : tipoN,
    cboColonia : tipo_servicio_agente !="02" ? "" : req.body.cboColonia,
    cboEstado : tipo_servicio_agente !="02" ? "" : req.body.cboEstado,
    cboMuncipio : tipo_servicio_agente !="02" ? "" : req.body.cboMunicipio,
    txtColonia : tipo_servicio_agente !="02" ? "" : req.body.txtColonia,
    txtEstado : tipo_servicio_agente !="02" ? "" : req.body.txtEstado,
    txtMunicipio :tipo_servicio_agente !="02" ? "" :  req.body.txtMunicipio,
    pais : tipo_servicio_agente !="02" ? "" : req.body.cboPais,
    status : req.body.cboStatus == undefined ? 1 : req.body.cboStatus,
    tipo_sucursal : req.body.cboTipo,
    horario : req.body.txtHorario,
    latitud : req.body.txtLatitud,
    longitud : req.body.txtLongitud,
    actividad : req.body.cboActividad,
    zona_fronteriza : req.body.cboZona == undefined ? 0 : req.body.cboZona,
    cod_sucursal_externo : req.body.txtExterno,
    fecha_baja: req.body.txtFechaBaja,
    fecha_baja_formato: req.body.txtFechaBaja == undefined ? "" :  req.body.txtFechaBaja

  };

  let fecha_baja_Base = data.fecha_baja_formato == ""  ? null : fn_utils.ConvierteFechaFormatoBase(req.body.txtFechaBaja);
  let sql;
  let registro = [];
  let success_msg="";
  let error_msg="";
  let action = "";
  if(req.body.hdActivaPanel=="A")  // INSERT
  {
    action = 'A';
     sql = 'CALL usp_inserta_agente_sucursales(?)';
     success_msg = "La sucursal se ha registrado correctamente";
     error_msg = "La sucursal que estas registrando ya existe en sistema";
     registro = [req.user.IdEmpresaCliente, data.cod_agente, data.nombre, data.telefono, TipoDomicilio,data.pais,data.cboEstado, data.cboMuncipio, Cod_colonia,data.ciudad, data.cp, data.txtEstado, data.txtMunicipio, data.txtColonia,data.calle, data.noext, data.noint ,data.status, req.body.cboTipo, data.horario, req.user.IdUser, data.latitud, data.longitud, data.actividad, data.cod_sucursal_externo, fecha_baja_Base, data.zona_fronteriza];
     
  }else{
     action = 'C';
     sql = 'CALL usp_actualiza_agente_sucursales(?)';
     success_msg = "La sucursal se ha actualizado correctamente";
     error_msg = "Error al tratar de actualizar los datos de la sucursal";
     registro = [req.user.IdEmpresaCliente, data.cod_agente, req.body.hfidnva, data.nombre, data.telefono, TipoDomicilio,data.pais,data.cboEstado, data.cboMuncipio, Cod_colonia,data.ciudad, data.cp, data.txtEstado, data.txtMunicipio, data.txtColonia,data.calle, data.noext, data.noint ,data.status, req.body.cboTipo, data.horario, req.user.IdUser, data.latitud, data.longitud, data.actividad, data.cod_sucursal_externo, fecha_baja_Base, data.zona_fronteriza];
    
  }

  var sql2 = "select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? "
  const result_agentes = await pool.query(sql2, req.user.IdEmpresaCliente);
  const result_actividad = await fn_bd.Cat_actividad_sucursal();
  const result_plantillas_recibos = await fn_bd.Cat_recibos_plantilla(req.user.IdEmpresaCliente);


  let dt = { action: req.body.hdActivaPanel,   id: req.body.hfidnva }
  let result_recibos = await fn_bd.Get_recibos_por_sucursal(req, data.cod_agente, dt.id);
  

  let reciboEnvio = {};
  let reciboPago = {};
  const re = await pool.query("Select tipo, recibo from agente_recibos where cod_empresa = ? and cod_agente = ? and cod_sucursal = ?",[req.user.IdEmpresaCliente, data.cod_agente, dt.id])
  if (re.length>0){
    re.forEach(element => {
      if(element.tipo == "E"){  reciboEnvio = { recibo : element.recibo }; }
      if(element.tipo == "P"){  reciboPago = { recibo : element.recibo }; }
    });
  }

  await pool.query(sql, [registro])
    .then(function(resultadoObtenido) {
          let r =resultadoObtenido[0];
          if((r[0]).cod=="00"){
           if(action =="A") { dt = { action: "C",   id: r[0].cod_sucursal }; }
           req.flash("success_msg", success_msg);
            res.redirect(url.format({pathname: "/mantenimiento/sucursales/edit", query:{"hfidnva": dt.id}}));
            //res.render("catalogos/add-sucursal",{success_msg, data, dt, result_agentes, result_recibos, reciboEnvio, reciboPago, result_actividad });
          }else { 
            error_msg = r[0].msg;
            res.render("catalogos/add-sucursal",{error_msg, data, dt, result_plantillas_recibos, result_agentes,result_recibos, reciboEnvio, reciboPago, result_actividad});
          }
    }).catch(function(err){
      error_msg = err;
      res.render("catalogos/add-sucursal",{error_msg, data, dt, result_agentes, result_plantillas_recibos, result_recibos, reciboEnvio, reciboPago, result_actividad});
    });
  });


 
  router.get('/mantenimiento/sucursales/delplantillaProcess',isLoggedIn,async function (req, res, next) {
    const data = {
      cod_plantilla : req.query.id == undefined ? null : req.query.id,
      id : req.query.idsuc,
      cod_empresa : req.user.IdEmpresaCliente 
    };
  
    let sql;
    let registro = [];
    let success_msg="";
    let error_msg="";
    
       sql = "CALL usp_delete_plantilla_asociada(?)";
       success_msg = "registro eliminado correctamente";
       error_msg = "Error al tratar de eliminar el registro";
       registro = [data.cod_empresa, data.id, data.cod_plantilla, "S"];
      
      console.log(registro);
  
    await pool.query(sql, [registro])
      .then(function(resultadoObtenido) {
            let r =resultadoObtenido[0];
            if((r[0]).code=="00"){
             req.flash("success_msg", success_msg);
            }else { 
              error_msg = r[0].msg;
              req.flash("error_msg", error_msg);
              
            }
            res.redirect(url.format({pathname: "/mantenimiento/sucursales/edit", query:{"hfidnva": data.id}}));
      }).catch(function(err){
        error_msg = err;
        req.flash("error_msg", error_msg);
        res.redirect(url.format({pathname: "/mantenimiento/sucursales/edit", query:{"hfidnva": data.id}}));
      });
    });

  router.post('/mantenimiento/sucursales/asignaplantillaProcess',isLoggedIn,async function (req, res, next) {
    const data = {
      cod_plantilla : req.body.cboPlantillaRecibo == undefined ? null : req.body.cboPlantillaRecibo,
      id : req.body.hfidnva 
    };
  
    let sql;
    let registro = [];
    let success_msg="";
    let error_msg="";
    let action = "";
  
       action = 'C';
       sql = 'CALL usp_asigna_recibo_sucursal(?)';
       success_msg = "El recibo se ha asignado correctamente";
       error_msg = "Error al tratar de asignar el recibo a la sucursal";
       registro = [req.user.IdEmpresaCliente, req.body.hfidnva, data.cod_plantilla];
      
      console.log(registro);
  
    await pool.query(sql, [registro])
      .then(function(resultadoObtenido) {
            let r =resultadoObtenido[0];
            if((r[0]).code=="00"){
             req.flash("success_msg", success_msg);
            }else { 
              req.flash("error_msg", error_msg);
              error_msg = r[0].msg;
            }
            res.redirect(url.format({pathname: "/mantenimiento/sucursales/edit", query:{"hfidnva": data.id}}));
      }).catch(function(err){
        error_msg = err;
        req.flash("error_msg", error_msg);
        res.redirect(url.format({pathname: "/mantenimiento/sucursales/edit", query:{"hfidnva": data.id}}));
      });
    });


  
router.post('/mantenimiento/findSucursales',isLoggedIn, async (req, res)=>{
  let nombre = req.body.txtNombreBusqueda.toUpperCase();
  let status = req.body.optStatus;
  let cod_agente = req.body.cboAgente;
  let cp = req.body.txtCPBusqueda;
  let conditions= "";

    var sql2 = "select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? "
    const result_agentes = await pool.query(sql2, req.user.IdEmpresaCliente);  

   if(cod_agente!="")
   {
      conditions += " and cod_agente ='" + cod_agente + "'"
   }
   if(nombre!="")
   {
     conditions += " and  nombre LIKE '%" + nombre + "%'";
   }
   if(status!="")
   {
      conditions += " and status =" + status 
   }

   if(cp!="")
   {
      conditions += " and cp =" + cp 
   }
   
   let sql = "select * from vw_agentes_sucursales where cod_empresa = ? " + conditions +";"
   console.log(sql);
   const result = await pool.query(sql, [req.user.IdEmpresaCliente]);
  
   res.render("catalogos/sucursales", {result, nombre, status, cod_agente, cp, result_agentes});
});

router.all('/mantenimiento/sucursales/edit', isLoggedIn,async (req, res)=>
{
  let cod_sucursal="";
  if(!req.body.hfidnva){
    if(!req.query.hfidnva){
      res.redirect("/mantenimiento/sucursales");
    }else{
      cod_sucursal = req.query.hfidnva;
    }
  }else{
    cod_sucursal = req.body.hfidnva;
  }
  let idEmpresa  = req.user.IdEmpresaCliente;
  

  var sql2 = "select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? "
  const result_agentes = await pool.query(sql2, req.user.IdEmpresaCliente);  
  const result_actividad = await fn_bd.Cat_actividad_sucursal();
  const resultadoBusqueda = await pool.query("select *,date_format(fecha_baja,'%d/%m/%Y') as fecha_baja_formato from agentes_sucursales where cod_empresa = ? and cod_sucursal = ?", [idEmpresa, cod_sucursal]);
  const result_plantillas_recibos = await fn_bd.Cat_recibos_plantilla(req.user.IdEmpresaCliente);
  let tipoN="";
  let tipoI ="";
  let data = {};
  if (resultadoBusqueda.length>0){
    if(resultadoBusqueda[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
    data = {
      nombre: resultadoBusqueda[0].nombre,
      cod_agente: resultadoBusqueda[0].cod_agente,
      telefono: resultadoBusqueda[0].telefono,
      calle: resultadoBusqueda[0].calle,
      noint: resultadoBusqueda[0].no_int,
      noext: resultadoBusqueda[0].no_ext,
      ciudad: resultadoBusqueda[0].ciudad,
      cp: resultadoBusqueda[0].cp,
      tipoI: tipoI,
      tipoN:tipoN,
      cboColonia : resultadoBusqueda[0].cod_asentamiento,
      cboEstado : resultadoBusqueda[0].cod_estado,
      cboMuncipio : resultadoBusqueda[0].cod_municipio,
      txtColonia : resultadoBusqueda[0].asentamiento,
      txtEstado : resultadoBusqueda[0].estado,
      txtMunicipio :resultadoBusqueda[0].municipio,
      pais : resultadoBusqueda[0].cod_pais,
      status : resultadoBusqueda[0].status,
      tipo_sucursal :  resultadoBusqueda[0].tipo,
      horario :  resultadoBusqueda[0].horario,
      latitud : resultadoBusqueda[0].latitud,
      longitud : resultadoBusqueda[0].longitud,
      actividad : resultadoBusqueda[0].cod_actividad,
      zona_fronteriza : resultadoBusqueda[0].zona_fronteriza,
      cod_sucursal_externo:  resultadoBusqueda[0].cod_sucursal_externo,
      fecha_baja_formato:  resultadoBusqueda[0].fecha_baja_formato,
    };
  }  
  let dt = { id : cod_sucursal, action : "C"}
  let reciboEnvio = {};
  let reciboPago = {};
  let result_recibos = await fn_bd.Get_recibos_por_sucursal(req, data.cod_agente, dt.id);
  const re = await pool.query("Select tipo, recibo from agente_recibos where cod_empresa = ? and cod_agente = ? and cod_sucursal = ?",[req.user.IdEmpresaCliente, data.cod_agente, cod_sucursal])
  if (re.length>0){
    re.forEach(element => {
      if(element.tipo == "E"){  reciboEnvio = { recibo : element.recibo }; }
      if(element.tipo == "P"){  reciboPago = { recibo : element.recibo }; }
    });
    
    //var templateScript = Handlebars.compile(re[0].recibo);
    //var context = { "nombre" : "Miranda Transfers", "beneficiario" : "Benjamin Resendiz Salazar" };
    //var html = templateScript(context);
  }
   res.render("catalogos/add-sucursal", {data, dt, result_plantillas_recibos, result_agentes, reciboEnvio, reciboPago, result_actividad, result_recibos });
});

router.post('/manetmimiento/sucursales/ajx/updRecibos',  async (req, res)=>{ 
  
      let datos = [req.user.IdEmpresaCliente, req.body.cod_agente, req.body.cod_sucursal, req.body.tipo, req.body.recibo];
      await pool.query("Call usp_gestiona_recibos (?)", [datos]).then(function(result){
              res.send("OK"); 
      }).catch(function(err){  
              res.send(err);   
      });
});



router.get('/mantenimiento/sucursales', isLoggedIn, async(req, res)=>{ 
  var sql2 = "select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? "
  const result_agentes = await pool.query(sql2, req.user.IdEmpresaCliente);  
  res.render("catalogos/sucursales",{result_agentes});
});



module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\catalogos-sucursales.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\configuraciones-generales.js ---

const express = require("express");
const { session } = require("passport");
const router = express.Router();
const pool = require("../database");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const url = require('url');
const CatalogosBD = require("../lib/catalogosBD");
var Enumerable = require('linq');
const fn_pld = require("../lib/reglas_pld_in");
const catalogosBD = require("../lib/catalogosBD");



router.get('/configuraciones/recibos', isLoggedIn, async(req, res)=>{ 
    var sql2 = "select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? "
    const result_tipo = await catalogosBD.Cat_tipo_recibo();
    const result_recibos = await catalogosBD.Cat_plantillas_recibo(req);
    res.render("configuraciones/plantillas-listado",{result_recibos, result_tipo});
});

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\configuraciones-generales.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\dashboard.js ---

const express = require("express");
const router = express.Router();
const {  isNotLoggedIn, isLoggedIn } = require("../lib/auth");



router.get('/dashboard/comerciales',isLoggedIn,  function(req, res) {
   let render ="dashboard/dashboard";
    res.render(render);
}); 

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\dashboard.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\document-manager.js ---

const express = require('express');
const multer = require('multer');
const  googleDrive = require('../lib/googleDrive');
const pool = require("../database");
const { isLoggedIn } = require("../lib/auth");
const catalogosBD = require('../lib/catalogosBD');
const uploadRouter = express.Router();
const upload = multer();

uploadRouter.post('/upload-document', isLoggedIn, upload.single('filedocument'), async (req, res,next) => {
    try {
     // let idTipodocumento = req.body.idTipoDocumento;
      let idTipodocumento = req.body.cboDocumento;
      let documentos = req.file;
        
        console.log(documentos);

        
        let cod_empresa             = req.user.IdEmpresaCliente;      
        let id_modulo               = req.body.idMod; 
        
        let id_carga_tipo_documento = idTipodocumento;
        let idCliente = req.body.hfidCliente;
        let tipoCliente = req.body.hftipoCliente;
        
        
        //********/

        let GoogleKeyAccountClient = {};

        let lparams = [
            cod_empresa,
            id_modulo
        ];
        await pool.query("call usp_getGCredenciales (?)", [lparams])
            .then((result) => {
                // Ruta donde se encuentran los ServiceAccount.json
                let keyfile = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/" + result[0][0].ServiceAccountJsonPath;
                
                // Obteniendo los datos de la empresa, para generar keys
                GoogleKeyAccountClient = {
                    keyFilePath: keyfile,
                    scopes: [result[0][0].scopes],
                    version: 'v3',
                    parents: [result[0][0].gFolder],
                    fields: 'id, name'
                };

            }).catch(function (err) {
                console.log(err);
            });

           
           
     //   for (let f = 0; f < documentos.length; f += 1) {
            const gRes = await googleDrive.uploadFile(documentos, GoogleKeyAccountClient);

            let lParSave=[
                cod_empresa,
                id_modulo,
                id_carga_tipo_documento,
                gRes.fileId,
                gRes.filename,
                gRes.ViewLink,
                gRes.DownloadLink,
                idCliente,
                tipoCliente,
                req.user.IdEmpresa,
                req.user.IdUser
            ];
            await pool.query('call usp_inserta_documento (?)', [lParSave]);

     //   }
        res.status(200).send('Documento cargado');


    } catch (f) {
        console.log(f.message);
        res.send(f.message);
    }
});

uploadRouter.post('/ajx/upload/validaAccesoRepositorio', isLoggedIn, async (req, res) => {
    let lparams = [req.user.IdEmpresaCliente,1];
    let result_crendenciales = await pool.query("call usp_getGCredenciales (?)", [lparams]);
    let credenciales = result_crendenciales[0];
    if(credenciales[0]==undefined){
        res.send("0");
    }else{
        res.send("1");
    }
});

uploadRouter.post('/ajx/upload/getDocumentos', isLoggedIn, async (req, res) => {
    let id = req.body.mod;
    let cod_cliente = req.body.cod_cliente;
    let tipo_cliente = req.body.tipo_cliente;
    let result_documents = await catalogosBD.Get_Documentos_cargados(req, id, cod_cliente, tipo_cliente);
    console.log(result_documents);
    res.send(result_documents);
});

uploadRouter.post('/ajx/upload/gettipoDocumento', isLoggedIn, async (req, res) => {
    let result_documents = await catalogosBD.Get_Tipo_Documento();
    res.send(result_documents);
});

uploadRouter.post('/ajx/empresa/cargaCarpetas', isLoggedIn, async (req, res) => {
   

   let respuesta = await CreateModulosFaltantes(req.body.cod_empresa);
   
   res.send(respuesta);
});

uploadRouter.post('/ajx/empresa/eliminaDocumento', isLoggedIn, async (req, res) => {
   
   let respuesta = await BorraArchivo(req.user.IdEmpresaCliente, req.body.ids, req.body.id, req.body.motivo, req.user.IdUser, req.user.IdEmpresa);
   
   res.send(respuesta);
});


async function CreateModulosFaltantes(cod_empresa){
   
    let GoogleKeyAccountClient = {};
    let respuesta = {};
    try {
        let result = await pool.query("select a.id from cat_modulos a where id not in (Select id_modulo from modulos_empresa where cod_empresa = ?) and a.id <> 1", cod_empresa);

        if(result.length > 0) {
            
            let lparams = [cod_empresa,1];
            
            let result_crendenciales = await pool.query("call usp_getGCredenciales (?)", [lparams]);
            
            let credenciales = result_crendenciales[0];
            
            let keyfile = './src/public/ConfigClientes/' + cod_empresa + "/" + credenciales[0].ServiceAccountJsonPath;
            GoogleKeyAccountClient = {
                keyFilePath: keyfile,
                scopes: [credenciales[0].scopes],
                version: 'v3',
                parents: [credenciales[0].gFolder],
                fields: 'id, name'
            };
            
            
            result.forEach(async element => {
                
                let modulo = element.id;
                const idFolder = await googleDrive.createFolder(modulo, GoogleKeyAccountClient);
                let paramsI = [cod_empresa, modulo,idFolder];
                let resultCarga = await pool.query("call usp_insertGModulo (?)", [paramsI]);
            });    
            respuesta = {
                code : "00",
                msg : "Creación de carpetas en repositorio correcta"
            };
        }
       
    } catch (error) {
        respuesta = {
            code : 99,
            msg : error
        }
    }
    return respuesta;
}


async function BorraArchivo(cod_empresa,idArchivos, idArchivo, motivo, usuario, empresa_registro){
    
    let GoogleKeyAccountClient = {};
    let respuesta = {};
    try {
        
            let lparams = [cod_empresa, 1 ];
            let result_crendenciales = await pool.query("call usp_getGCredenciales (?)", [lparams]);
            
            let credenciales = result_crendenciales[0];
            
            let keyfile = './src/public/ConfigClientes/' + cod_empresa + "/" + credenciales[0].ServiceAccountJsonPath;
            GoogleKeyAccountClient = {
                keyFilePath: keyfile,
                scopes: [credenciales[0].scopes],
                version: 'v3',
                parents: [credenciales[0].gFolder],
                fields: 'id, name'
            };

            await googleDrive.deleteFile(idArchivo, GoogleKeyAccountClient);
            let paramsI = [idArchivos,usuario, empresa_registro, motivo];
            
            let resultCarga = await pool.query("call usp_documento_baja (?)", [paramsI]);
            respuesta = {
                code : "00",
                msg : "Archivo eliminado correctamente"
            };
    } catch (error) {
        respuesta = {
            code : 99,
            msg : error
        }
    }
    return respuesta;
}

module.exports = uploadRouter;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\document-manager.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\index.js ---

const express = require("express");
const router = express.Router();
const {  isNotLoggedIn, isLoggedIn } = require("../lib/auth");
const funciones = require("../lib/catalogosFunctions");

router.get('/keep-alive', (req, res) => {
  res.sendStatus(200);
});

router.get('/menu',isLoggedIn,  function(req, res) {
console.log("menu");
 /* var importe_origen_letra = funciones.numeroALetras(3500.00, {
    plural: "PESOS",
    singular: "PESO"

  
});*/
 var render = "principal";
 if(req.user.IdPerfil == 0 || req.user.IdPerfil == 1){
   render ="main";
 }
  res.render(render);
 
}); 

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\index.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\logs.js ---

const express = require("express");
const router = express.Router();
const { isLoggedIn } = require("../lib/auth");
const CatalogosBD_GRAL = require("../lib/catalogosBD");
const format = require('xml-formatter');

router.get('/logs/logs-remesadores', isLoggedIn, async(req, res)=>{ 
    let result_transmisores = await CatalogosBD_GRAL.Get_tansmisores_logs(req);
    res.render("logs/logs-remesadores",{result_transmisores});
});

router.post('/logs/consulta-remesa', isLoggedIn, async(req, res)=>{ 
    let result_transmisores = await CatalogosBD_GRAL.Get_tansmisores_logs(req);
    let cod_transmisor = req.body.cboTransmisor;
    let cve_cobro = req.body.txtRemesa;

    let data = {
        cod_transmisor : cod_transmisor,
        cve_cobro : cve_cobro
    }
    let resultados =[];
    try {
        resultado =  await CatalogosBD_GRAL.Get_logs_by_transmisor(req, cve_cobro);   
        resultado = resultado.map(log => {
        return {
            id: log.id,
            endpoint: log.endpoint,
            tipo: log.tipo,
            soapxml: (() => {
                try {
                return format(log.soapxml || '', {
                    indentation: '  ',
                    collapseContent: true,
                    lineSeparator: '\n'
                });
                } catch (e) {
                console.error('Error formateando XML:', e);
                return '[XML inválido]';
                }
            })()
            };
        });
    } catch (error) {
        
    }
    res.render("logs/logs-remesadores",{result_transmisores, resultado, data});
});

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\logs.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\miscelaneos.js ---

const express = require("express");
const pool = require("../database");
const multer = require("multer");
const fs = require('fs');
const path = require("path");
const { userInfo } = require("os");
const { isLoggedIn } = require("../lib/auth");
const { session } = require("passport");
const excelController = require("../lib/excell-controller");
const { response } = require("express");
const fn = require("../lib/catalogosFunctions");
const catalogos = require("../lib/catalogosBD");
const router = express.Router();
const hdlFimpe = require("../lib/Apis/fimpe");
const configAcceso = require("../lib/config_gral");
const pdfreport =require("../lib/reportesPDF_Remesas");

router.get('/misc/capturatc', isLoggedIn, async(req, res)=>{ 
    result = await pool.query("Select tc, DATE_FORMAT(fec_insert, '%d/%m/%Y %T') as fec_insert from tc_empresa where cod_empresa = ? ", req.user.IdEmpresaCliente);
    let dato = {};
    
    if (result.length>0){
        let fecha = result[0].fec_insert;
        dato = {
            tc_vigente : result[0].tc,
            FechaCaptura : fecha
        }
    }
   
    res.render("miscelaneos/captura-tc", {dato});
});

router.post('/misc/capturatc', isLoggedIn, async(req, res)=>{ 
    resultado = await pool.query("Select tc, DATE_FORMAT(fec_insert, '%d/%m/%Y %T') as fec_insert from tc_empresa where cod_empresa = ? ", req.user.IdEmpresaCliente);
    let dato = {};
    if(resultado.length>0){
        let fecha = resultado[0].fec_insert == undefined ? '' : resultado[0].fec_insert ;
        let tc = resultado[0].tc == undefined ? '0' : resultado[0].tc ;
        dato = {
            tc_vigente : tc,
            FechaCaptura : fecha
        }
    }
    let fechaInicio = fn.ConvierteFechaFormatoBase(req.body.hfstartDate);
    let fechaFin = fn.ConvierteFechaFormatoBase(req.body.hfendDate);
    let result = await pool.query("Select * from vw_historico_tc where cod_empresa = ? and DATE(fec_insert) between ? and ? order by fec_insert desc", [req.user.IdEmpresaCliente, fechaInicio, fechaFin ]);
    res.render("miscelaneos/captura-tc", {dato, result});
});

router.post('/misc/ajx/updTC',isLoggedIn,  async (req, res)=>{ 
    let data = [req.user.IdEmpresaCliente, req.body.tc, req.user.IdUser, req.user.IdEmpresa];
    let r = {};
    await pool.query("Call usp_gestiona_tc (?)", [data]).then(function(result){
        if(result.length==2){
            let dt = result[0];
            r = { code : dt[0].code, msg: dt[0].msg, fecha : dt[0].fecha } ;
            res.send(r);
        }else{
            r = { code : "99", msg: "Error al tratar de actualizar el TC", fecha : "" } ;
            res.send(r);
        }
    }).catch(function(err){
        r = { code : "99", msg: "Error al tratar de actualizar el TC", fecha : "" } ;
        res.send(r);
    });
  });


router.get('/misc/consulta-curp', isLoggedIn, async(req, res)=>{ 
    let acceso = await configAcceso.Get_acceso_servicios(req , 42);
    console.log("acceso:"+ acceso);
    if(acceso!=1){
        req.flash("alert_message", "Sin acceso a este módulo, por favor contacta al administrador");
        res.redirect('/menu');
    }


    let resultados_entidades = await catalogos.Cat_entidades_nacimiento_curp(); 
    res.render("miscelaneos/consulta-curp",{resultados_entidades});
});


router.get('/misc/consulta-ine', isLoggedIn, async(req, res)=>{ 

    let acceso = await configAcceso.Get_acceso_servicios(req , 43);
    if(acceso!=1){
        req.flash("alert_message", "Sin acceso a este módulo, por favor contacta al administrador");
        res.redirect('/menu');
    }


    res.render("miscelaneos/consulta-ine");
});

router.post('/misc/ajx/getcurp', isLoggedIn, async(req, res)=>{ 
    let resultados = [];
    let arregloDatos = JSON.parse(req.body.arregloDatos);
    console.log(arregloDatos);
    let sp = new hdlFimpe.HandlerFimpe(req.user.IdEmpresaCliente);
    let result = await sp.consultaCURP(arregloDatos);
    req.session.resultadosConsultaCurp = result;
    console.log(result);
    res.send(result);
});



router.post('/misc/ajx/validaIne', isLoggedIn, async(req, res)=>{ 
    let resultados = [];
    let arregloDatos = JSON.parse(req.body.arregloDatos);
    console.log(arregloDatos);
    let sp = new hdlFimpe.HandlerFimpe(req.user.IdEmpresaCliente);
    let result = await sp.ValidaINE(arregloDatos);
    req.session.resultadosConsultaIne = result;
    console.log(result);
    res.send(result);
});


router.all('/misc/curp/exportPDF',isLoggedIn, async (req, res)=>{ 
    var str = "";
    if(req.session.resultadosConsultaCurp!=null){
    
        let consulta = req.session.resultadosConsultaCurp;
        let datos = consulta.result.datos.CURPStatus.resultCURPS;
    
        let headers = ["CURP","Nombre","Apellido Paterno", "Apellido Materno", "Género", "Fecha de Nacimiento", "Nacionalidad","Clave de Entidad de Nacimiento", "Año de Registro", "Acta", "Foja", "Tomo", "Libro",
        "Estatus", "Entidad de Registro", "Municipio de Registro" ];
        let items = [ datos.CURP, datos.nombres, datos.apellidoPaterno, datos.apellidoMaterno, datos.sexo, datos.fechNac, datos.nacionalidad, datos.cveEntidadNac,
        datos.anioReg, datos.numActa, datos.foja, datos.tomo, datos.libro, datos.statusCurp, datos.numEntidadReg, datos.cveMunicipioReg
        ];
        
        str = str + "<div style='text-align:center; width:100%'><div style='background-color:#0480be; height:50px; color:white; font-family:verdana;font-size:25px;'>&nbsp;&nbsp; Clave Única de Registro de Población</div><br><br><br><br><br><br><center><table style='font-size:17px; font-family:Arial; cellpadding:10px' width='80%'>";
        for (let i = 0; i < headers.length; i++) {
        var width = "";
        var background = "";    
        if(i==0){width = ";width='50%'"; background = ";background-color: #eee;"}
        if(i % 2 === 0 ){background = ";background-color: #eee;"}
        str = str + "<tr style='"+ background +"'><td style='text-align:right;"+  width  + "' >"+ headers[i] +"&nbsp;&nbsp;&nbsp;</td><th style='cellpadding:10px;text-align:left' "+  width +">"+ items[i] +"</th></tr>";    
        }
        str = str + "</table></center>";
        let html = str;
        console.log(html);

        pdfreport.GeneraPDF_ListasNegras(html, res);

    }

});


router.all('/misc/ine/exportPDF',isLoggedIn, async (req, res)=>{ 
    var str = "";
    if(req.session.resultadosConsultaIne!=null){
    
        let consulta = req.session.resultadosConsultaIne;
        let datos = consulta.result.data;
    
        let headers = ["Detalle","Clave de Elector","OCR","CIC","Número de Emisión","Año de Registro", "Año de Emisión", "Vigencia", "Distrito Federal"];
        let items = [ datos.mensaje, datos.claveElector, datos.ocr,datos.cic,datos.numeroEmision,datos.anioRegistro, datos.anioEmision, datos.vigencia, datos.distritoFederal];
        
        str = str + "<div style='text-align:center; width:100%'><div style='background-color:#0480be; height:50px; color:white; font-family:verdana;font-size:25px;'>&nbsp;&nbsp; Validación de INE</div><br><br><br><br><br><br><center><table style='font-size:17px; font-family:Arial; cellpadding:10px' width='80%'>";
        for (let i = 0; i < headers.length; i++) {
        var width = "";
        var background = "";    
        if(i==0){width = ";width='50%'"; background = ";background-color: #eee;"}
        if(i % 2 === 0 ){background = ";background-color: #eee;"}
        str = str + "<tr style='"+ background +"'><td style='text-align:right;"+  width  + "' >"+ headers[i] +"&nbsp;&nbsp;&nbsp;</td><th style='cellpadding:10px;text-align:left' "+  width +">"+ items[i] +"</th></tr>";    
        }
        str = str + "</table></center>";
        let html = str;
        console.log(html);

        pdfreport.GeneraPDF_ListasNegras(html, res);

    }

});


module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\miscelaneos.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\operaciones-buzon.js ---


--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\perfiles.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\persona-moral.js ---

const express = require("express");
const { session } = require("passport");
const router = express.Router();
const pool = require("../database");
const { isLoggedIn } = require("../lib/auth");


router.get('/pld/config-campos-obl-PM', isLoggedIn, async(req, res)=>{ 
    var sql2 = "Select * from pm_secciones_persona order by id asc";
    let plantilla_secciones = await pool.query(sql2); 
    let resulset = [];
    for (let index = 0; index < plantilla_secciones.length; index++) {    
        let element = plantilla_secciones[index];
        var sql = "call usp_getCamposRequeridos_personaPM(?,'B',?);"    
        let rs = await pool.query(sql, [req.user.IdEmpresaCliente, element.id]);
        let seccion  = {
            id_seccion : element.id,
            descripcion : element.descripcion,
            campos :rs[0]
        }
        resulset.push(seccion);
    };
    res.render("pld/config-campos-obligatorios-persona-pm",{resulset});
});
router.post('/pld/ajx/updCamposRequeridosCtePM',isLoggedIn,  async (req, res)=>{ 
    let campos =  JSON.parse(req.body.campos);
    //Eliminamos los registros 
    var sql = "delete from empresa_campos_requeridos_alta_personaPM where cod_empresa = ?"
    let resultado = await pool.query(sql, [req.user.IdEmpresaCliente]);    
    for (let index = 0; index < campos.length; index++) {    
        let arreglo = campos[index].split("|");
        var tabla ="";
        arreglo.forEach( async function(item){ 
            var registro = item.split("_");
            var a = registro[0];
            var b = registro[1];
            tabla ="insert into empresa_campos_requeridos_alta_personaPM (cod_empresa,id_campo) values(?,?)";
            let params = [req.user.IdEmpresaCliente, b];
            await pool.query(tabla, params);
        });
    }
    res.send("OK");
  });


  router.get('/pld/config-campos-obl-TR', isLoggedIn, async(req, res)=>{ 
    var sql2 = "select id_nivel, descripcion from niveles_monto where nivel_grupo = 2 order by id_nivel";
    let plantilla_niveles = await pool.query(sql2); 

    var sqlDatosEfectivo = "call usp_getCamposRequeridos(?,'EPM','PM',2);"
    
    let rs1 = await pool.query(sqlDatosEfectivo, [req.user.IdEmpresaCliente]);

    let reusltEfectivo = rs1[0];
    

    res.render("pld/config-campos-obligatorios-transacciones-pm",{reusltEfectivo, plantilla_niveles});
});





module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\persona-moral.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\pld-pm.js ---

const express = require("express");
const { session } = require("passport");

const router = express.Router();
const pool = require("../database");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const url = require('url');
const CatalogosBD = require("../lib/catalogosBD_pld");
const CatBD = require("../lib/catalogosBD");
var Enumerable = require('linq');
const fn_pld = require("../lib/reglas_pld_in");
const pdfreport =require("../lib/reportesPDF_Remesas");
const restNotificacion =require("../lib/Apis/api_notificaciones");
const { response } = require("express");
const { reset } = require("nodemon");
const readXlsxFile = require("read-excel-file/node");
const upload = require("../lib/upload-excel");
const fn_provedores_listas_negras = require("../lib/Apis/Listas");

router.get('/pld/bloqueos-cliente-pm', isLoggedIn, async (req, res)=>{ 
    var resultStatus  =  await CatalogosBD.Cat_StatusPLD();
    res.render("pld/bloqueos-clientes-pm", {resultStatus});
});

router.post('/pld/bloqueos-cliente-pm', isLoggedIn, async (req, res)=>{ 
    let resultReportes = {}
    let parametrosBusqueda = {}
    
    main : {
        parametrosBusqueda = {
            statuspld : req.body.cboStatusPLD,
            nombre_cliente : req.body.txtRemesa.trim(),
            fechaInicio : req.body.hfstartDate != "" ? fn.ConvierteFechaFormatoBase(req.body.hfstartDate) : "",
            fechaFin : req.body.hfendDate !="" ? fn.ConvierteFechaFormatoBase(req.body.hfendDate) : "",
            fechaInicio_st : req.body.hfstartDate != "" ? req.body.hfstartDate : "",
            fechaFin_st : req.body.hfendDate !="" ? req.body.hfendDate : ""
          };
        
        var sql ="";
        var sqlP = "Select * from vw_clientes_bloqueados_pm where cod_empresa = '" + req.user.IdEmpresaCliente +"'";
        sql = sql + (parametrosBusqueda.statuspld !="--" ? " and status_bloqueo = '"+ parametrosBusqueda.statuspld + "'": "");
        sql = sql + (parametrosBusqueda.cve_cobro !="" ? " and nombre_cliente like '%"+ parametrosBusqueda.nombre_cliente + "%'": "");
        sql = sql + (parametrosBusqueda.fechaInicio !="" && parametrosBusqueda.fechaFin ? " and DATE(fec_insert) between '"+ parametrosBusqueda.fechaInicio +"' and '"+ parametrosBusqueda.fechaFin + "'" : "");
        console.log(sqlP + sql);
        resultReportes = await pool.query( sqlP + sql);
        var resultStatus  = await CatalogosBD.Cat_StatusPLD();
    }
    res.render("pld/bloqueos-clientes-pm",{resultStatus,resultReportes, parametrosBusqueda});
});

router.all('/pld/bloqueo/detalle-cliente-pm', isLoggedIn, async (req, res)=>{ 
    let result_Motivos = {};
    let result_statusPLD = {};
    let detalleRegistro = [];
    let mensajeSalida ="";
    let tipomensaje ="";
    let showMensaje = false;
    let idMov = "";
    let resultados = [];
    
    let casos_cumplimiento = [];

    let data = {
        cod_registro :idMov
    }
    main : {
        if(!req.body.hfidnva){
            if(!req.query.hfidnva){
                req.flash("error_msg", "Debes seleccionar el cliente PM a revisar");
                res.redirect("/pld/bloqueos-cliente-pm");
                break main;
            }else{
                idMov = req.query.hfidnva;
            }
        }else{
            idMov = req.body.hfidnva;
        }
    
        if(idMov == ""){
            req.flash("error_msg", "Debes seleccionar el cliente PM a revisar");
            res.redirect("/pld/bloqueos-cliente-pm");
            break main;
        }
        let accion = req.body.hfacccion;
        if(accion == undefined){
            accion = req.body.hfaccion2;
        }
        data.cod_registro = idMov;
        let obs = "";
        let pstatus = "";
        let Params = [];
        
        switch (accion) {
            case "actualiza":
                obs = req.body.txtObservaciones;
                pstatus = req.body.cboStatusP;
                Params = [idMov, pstatus, obs, req.user.IdUser, req.user.IdEmpresa ];
                console.log(Params);
                var resultC = await pool.query("call usp_gestionaClienteBloqueadoPM (?)", [Params]);
                let rc =resultC[0];
                if((rc[0]).code=="00"){
                    tipomensaje = "success_msg";
                    mensajeSalida = rc[0].msg;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = rc[0].msg;
                   
                };
                showMensaje = true;
                break main;
        
            default:
                break;
        }

        
        // Cargamos detalle del cliente bloqueado
        
        const remesa_bloqueada = await pool.query("select * from vw_clientes_bloqueados_reglas_pm where cod_registro = ?", [idMov]);
        const rs0 = await pool.query("select * from vw_clientes_bloqueados_pm where id_movimiento = ?", [idMov]);
        const rs1 = await pool.query("select * from vw_clientes_compliance_pm where cod_registro = ?", [idMov]);
        
        detalleRegistro = rs0[0];
        let rgcompliance = rs1;
        
        if(remesa_bloqueada.length > 0){
            var grouped = Enumerable.from(remesa_bloqueada)
                .groupBy(x => x.seccion)
                .select(x => ({
                    seccion: x.key(),
                    registros: x.getSource()
                }))
                .toArray();

            grouped.forEach(element => {
                // Crear un nuevo objeto 'secciones' en cada iteración
                var secciones = { seccion : "", registros : [] };
            
                secciones.seccion = element.seccion;

                element.registros.forEach( item => {
                    let registros = { cod_registro : "", status_bloqueo: "", num_regla: "", cod_accionista: "",
                                      cod_propietario: "", descripcion_regla: "", id_movimiento: "", parametro_1: "",
                                      fecha_registro: "", tipo_regla: "", fecha_bloqueo: "", casos_cumplimiento: []
                    }

                    registros.cod_registro = item.cod_registro,
                    registros.status_bloqueo= item.status_bloqueo,
                    registros.num_regla = item.num_regla,
                    registros.cod_accionista = item.cod_accionista,
                    registros.cod_propietario = item.cod_propietario,
                    registros.descripcion_regla = item.descripcion_regla,
                    registros.id_movimiento = item.id_movimiento,
                    registros.parametro_1 = item.parametro_1,
                    registros.fecha_registro = item.fecha_registro,
                    registros.tipo_regla = item.tipo_regla,
                    registros.fecha_bloqueo = item.fecha_bloqueo
                    
                    if(rgcompliance.length>0){
                            let resultC =  fn.filtraArrayPorElemento(rgcompliance, "id_caso", item.id_movimiento);
                            if(resultC.length>0){
                                registros.casos_cumplimiento = resultC;            
                            }   
                    }
                    
                    secciones.registros.push(registros);
                });
                resultados.push(secciones);
            });
            result_Motivos = await CatalogosBD.Cat_MotivosCancelacion();

                        

        }
        result_statusPLD = await CatalogosBD.Cat_StatusPLD();
    }
    if(showMensaje==true){
        req.flash(tipomensaje, mensajeSalida);
        res.redirect(url.format({pathname: "/pld/bloqueo/detalle-cliente-pm", query:{"hfidnva": idMov }}));
    }
    else{
        
        res.render("pld/cliente-detalle-pm", {result_statusPLD, result_Motivos, resultados, data, detalleRegistro });
    }
});

router.get('/pld/bloqueos-remesas-pm', isLoggedIn, async (req, res)=>{ 
    var resultStatus  =  await CatalogosBD.Cat_StatusPLD();
    
    res.render("pld/bloqueos-listado-pm", {resultStatus});
});

router.post('/pld/bloqueos-remesas-pm', isLoggedIn, async (req, res)=>{ 
    let resultReportes = {}
    let parametrosBusqueda = {}
    main : {
        parametrosBusqueda = {
            statuspld : req.body.cboStatusPLD,
            cve_cobro : req.body.txtRemesa.trim(),
            fechaInicio : req.body.hfstartDate != "" ? fn.ConvierteFechaFormatoBase(req.body.hfstartDate) : "",
            fechaFin : req.body.hfendDate !="" ? fn.ConvierteFechaFormatoBase(req.body.hfendDate) : "",
            fechaInicio_st : req.body.hfstartDate != "" ? req.body.hfstartDate : "",
            fechaFin_st : req.body.hfendDate !="" ? req.body.hfendDate : ""
          };
        
       /* if(parametrosBusqueda.cod_cliente=="" && parametrosBusqueda.nombre=="" && parametrosBusqueda.fechaInicio_st=="" && parametrosBusqueda.fechaFin_st==""){
            req.flash("alert_message", "Debes seleccionar un criterio de búsqueda");
            res.redirect('/pld/bloqueos');
            break main;
        }*/
        var sql ="";
        var sqlP = "Select * from vw_remesas_en_pld_pm where cod_empresa = '" + req.user.IdEmpresaCliente +"' and tipo_remesa = 'PM' ";
        sql = sql + (parametrosBusqueda.statuspld !="--" ? " and status_pld = '"+ parametrosBusqueda.statuspld + "'": "");
        sql = sql + (parametrosBusqueda.cve_cobro !="" ? " and cve_cobro = '"+ parametrosBusqueda.cve_cobro + "'": "");
        sql = sql + (parametrosBusqueda.fechaInicio !="" && parametrosBusqueda.fechaFin ? " and DATE(fec_insert) between '"+ parametrosBusqueda.fechaInicio +"' and '"+ parametrosBusqueda.fechaFin + "'" : "");
        
        resultReportes = await pool.query( sqlP + sql);
        var resultStatus  = await CatalogosBD.Cat_StatusPLD();
    }
    res.render("pld/bloqueos-listado-pm",{resultStatus,resultReportes, parametrosBusqueda});
});

router.all('/pld/bloqueo/detalle-pm', isLoggedIn, async (req, res)=>{ 
    let detalleRemesa = {};
    let result_Motivos = {};
    let detalleRemesaB = {};
    let detalleReglaA = {};
    let result_statusPLD = {};
    let detallelistasNegras = {};
    let mensajeSalida ="";
    let tipomensaje ="";
    let showMensaje = false;
    let idMov = "";
    let esPEPConfirmado = "NO";
    main : {
        if(!req.body.hfidnva){
            if(!req.query.hfidnva){
                req.flash("error_msg", "Debes seleccionar la remesa a revisar");
                res.redirect("/pld/bloqueos-remesas-pm");
                break main;
            }else{
                idMov = req.query.hfidnva;
            }
        }else{
            idMov = req.body.hfidnva;
        }
        


        if(idMov == ""){
            req.flash("error_msg", "Debes seleccionar la remesa a revisar");
            res.redirect("/pld/bloqueos-remesas-pm");
            break main;
        }

        let accion = req.body.hfacccion;
        if(accion == undefined){
            accion = req.body.hfaccion2;
        }
        let obs = "";
        let pstatus = "";
        let espep = "";
        let Params = [];
        switch (accion) {
            case "cancelar":
                obs = req.body.txtMotivo;
                pstatus = req.body.cboTipoC;
                let cod_corresponsal = req.body.hfcorr;
                let cod_transmisor = req.body.hftrans;
                let cve_cobro = req.body.hfcvecobro;
                Params = [req.user.IdEmpresaCliente, cod_transmisor, cod_corresponsal, cve_cobro, pstatus, obs, req.user.IdUser, req.user.IdEmpresa ];
                console.log(Params);
                var result = await pool.query("call usp_cancelaRemesa_in (?,?,?,?,?,?,?,?)", Params);
                let r =result[0];
                if((r[0]).code=="00"){
                    // Se notifica al Transmisor si este trabaja con notificaciones online
                    await restNotificacion.CancelPaymemt(req, cod_transmisor, cod_corresponsal,  cve_cobro);
                    tipomensaje = "success_msg";
                    mensajeSalida = r[0].msg;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = r[0].msg;
                   
                };
                showMensaje = true;
                break;
        
            case "actualiza":
                obs = req.body.txtObservaciones;
                console.log(req.body.cboStatusP);
                pstatus = req.body.cboStatusP;
                espep = req.body.cboEsPEP;
                Params = [req.user.IdEmpresaCliente, idMov, pstatus, obs, req.user.IdUser, req.user.IdEmpresa, espep];
                console.log(Params);
                var resultC = await pool.query("call usp_gestionaRemesaBloqueadaPM (?)", [Params]);
                console.log(result);
                let rc =resultC[0];
                if((rc[0]).code=="00"){
                    tipomensaje = "success_msg";
                    mensajeSalida = rc[0].msg;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = rc[0].msg;
                };
                showMensaje = true;
                break;
        
            default:
                break;
        }


        // Cargamos detalle de la remesa bloqueada
        let cod_cliente_asociado = 0;
        const remesa_bloqueada = await pool.query("select * from vw_remesas_en_pld_pm where tipo_remesa = 'PM' and id_movimiento = ? and cod_empresa = ?", [idMov, req.user.IdEmpresaCliente]);
        if(remesa_bloqueada.length > 0){
            detalleRemesaB = remesa_bloqueada[0];
            let cod_transmisor = remesa_bloqueada[0].cod_transmisor;
            let cod_corresponsal = remesa_bloqueada[0].cod_corresponsal;
            let cve_cobro = remesa_bloqueada[0].cve_cobro;
            cod_cliente_asociado = remesa_bloqueada[0].cod_cliente;
            let detalle = await CatalogosBD.Get_Remesa_out(req, cod_transmisor, cod_corresponsal, cve_cobro);
            let ReglaAplicada = await CatalogosBD.Get_ReglaPLD(req, remesa_bloqueada[0].id_regla_aplicada);
            result_Motivos = await CatalogosBD.Cat_MotivosCancelacion();
            detalleReglaA = ReglaAplicada[0];
            detalleRemesa = detalle[0]; 

            // let sqlcte = "Select esPepconfirmado from clientes where cod_empresa = ? and cod_cliente = ?;";
            esPEPConfirmado = "";  
            /*let resultcte = await pool.query(sqlcte,[req.user.IdEmpresaCliente, cod_cliente_asociado]);
            if(resultcte.length > 0){
                let rsc = resultcte[0];
                if(rsc.esPepconfirmado==1){
                    esPEPConfirmado = "SI";
                }
            }*/

            if(remesa_bloqueada[0].num_regla == 5 || remesa_bloqueada[0].num_regla == 36){
                detallelistasNegras = await CatalogosBD.Get_RegistroListasNegrasPM(req, idMov, "E");
            }
        }
        result_statusPLD = await CatalogosBD.Cat_StatusPLD();
    }
    if(showMensaje==true){
        req.flash(tipomensaje, mensajeSalida);
        res.redirect(url.format({pathname: "/pld/bloqueo/detalle-pm", query:{"hfidnva": idMov }}));
    }
    else{
        let cod_esq = "E";
        res.render("pld/remesa-detalle-pm", {detalleRemesa, detalleRemesaB, detalleReglaA, result_statusPLD, result_Motivos, detallelistasNegras, cod_esq, esPEPConfirmado });
    }
});

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\pld-pm.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\pld.js ---

const express = require("express");
const { session } = require("passport");

const router = express.Router();
const pool = require("../database");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const url = require('url');
const CatalogosBD = require("../lib/catalogosBD_pld");
const CatBD = require("../lib/catalogosBD");

var Enumerable = require('linq');
const fn_pld = require("../lib/reglas_pld_in");
const pdfreport =require("../lib/reportesPDF_Remesas");
const restNotificacion =require("../lib/Apis/api_notificaciones");
const { response } = require("express");
const { reset } = require("nodemon");
const readXlsxFile = require("read-excel-file/node");
const upload = require("../lib/upload-excel");
const fn_provedores_listas_negras = require("../lib/Apis/Listas");



router.get('/pld/bloqueos', isLoggedIn, async (req, res)=>{ 
    var resultStatus  =  await CatalogosBD.Cat_StatusPLD();
    
    res.render("pld/bloqueos-listado", {resultStatus});
});

router.get('/pld/bloqueos-cliente', isLoggedIn, async (req, res)=>{ 
    var resultStatus  =  await CatalogosBD.Cat_StatusPLD();
    
    res.render("pld/bloqueos-clientes", {resultStatus});
});

router.post('/pld/bloqueos', isLoggedIn, async (req, res)=>{ 
    let resultReportes = {}
    let parametrosBusqueda = {}
    main : {
        parametrosBusqueda = {
            statuspld : req.body.cboStatusPLD,
            cve_cobro : req.body.txtRemesa.trim(),
            fechaInicio : req.body.hfstartDate != "" ? fn.ConvierteFechaFormatoBase(req.body.hfstartDate) : "",
            fechaFin : req.body.hfendDate !="" ? fn.ConvierteFechaFormatoBase(req.body.hfendDate) : "",
            fechaInicio_st : req.body.hfstartDate != "" ? req.body.hfstartDate : "",
            fechaFin_st : req.body.hfendDate !="" ? req.body.hfendDate : ""
          };
        
       /* if(parametrosBusqueda.cod_cliente=="" && parametrosBusqueda.nombre=="" && parametrosBusqueda.fechaInicio_st=="" && parametrosBusqueda.fechaFin_st==""){
            req.flash("alert_message", "Debes seleccionar un criterio de búsqueda");
            res.redirect('/pld/bloqueos');
            break main;
        }*/
        var sql ="";
        var sqlP = "Select * from vw_remesas_en_pld where cod_empresa = '" + req.user.IdEmpresaCliente +"'";
        sql = sql + (parametrosBusqueda.statuspld !="--" ? " and status_pld = '"+ parametrosBusqueda.statuspld + "'": "");
        sql = sql + (parametrosBusqueda.cve_cobro !="" ? " and cve_cobro = '"+ parametrosBusqueda.cve_cobro + "'": "");
        sql = sql + (parametrosBusqueda.fechaInicio !="" && parametrosBusqueda.fechaFin ? " and DATE(fec_insert) between '"+ parametrosBusqueda.fechaInicio +"' and '"+ parametrosBusqueda.fechaFin + "'" : "");
        console.log(sqlP + sql);
        resultReportes = await pool.query( sqlP + sql);
        var resultStatus  = await CatalogosBD.Cat_StatusPLD();
    }
    res.render("pld/bloqueos-listado",{resultStatus,resultReportes, parametrosBusqueda});
});

router.post('/pld/bloqueos-cliente', isLoggedIn, async (req, res)=>{ 
    let resultReportes = {}
    let parametrosBusqueda = {}
    main : {
        parametrosBusqueda = {
            statuspld : req.body.cboStatusPLD,
            nombre_cliente : req.body.txtRemesa.trim(),
            fechaInicio : req.body.hfstartDate != "" ? fn.ConvierteFechaFormatoBase(req.body.hfstartDate) : "",
            fechaFin : req.body.hfendDate !="" ? fn.ConvierteFechaFormatoBase(req.body.hfendDate) : "",
            fechaInicio_st : req.body.hfstartDate != "" ? req.body.hfstartDate : "",
            fechaFin_st : req.body.hfendDate !="" ? req.body.hfendDate : ""
          };
        
        var sql ="";
        var sqlP = "Select * from vw_clientes_bloqueados where cod_empresa = '" + req.user.IdEmpresaCliente +"'";
        sql = sql + (parametrosBusqueda.statuspld !="--" ? " and status_bloqueo = '"+ parametrosBusqueda.statuspld + "'": "");
        sql = sql + (parametrosBusqueda.cve_cobro !="" ? " and nombre_cliente like '%"+ parametrosBusqueda.nombre_cliente + "%'": "");
        sql = sql + (parametrosBusqueda.fechaInicio !="" && parametrosBusqueda.fechaFin ? " and DATE(fec_insert) between '"+ parametrosBusqueda.fechaInicio +"' and '"+ parametrosBusqueda.fechaFin + "'" : "");
        console.log(sqlP + sql);
        resultReportes = await pool.query( sqlP + sql);
        var resultStatus  = await CatalogosBD.Cat_StatusPLD();
    }
    res.render("pld/bloqueos-clientes",{resultStatus,resultReportes, parametrosBusqueda});
});

router.get('/pld/configuracion', isLoggedIn, async (req, res)=>{ 
    main : {
        let reglas = await pool.query("Select count(*) as total from empresas_reglas_pld where cod_empresa = ? ", [req.user.IdEmpresaCliente]);
        if(reglas[0].total == 0){
            let ShowLoadReglas = true;
            res.render("pld/listado-reglas", {ShowLoadReglas});
            break main;
        }
        let ShowBusqueda = true;
        let result_tipoRegla = await pool.query("Select idtipoRegla as id, descripcion from cat_tipo_regla_pld");
        let result_status = await pool.query("Select idStatus as id, descripcion from cat_status_pld");
        let data={};
        let resultReglas = {};
        
        
        if(req.session.consultareglas){
            let sql = "Select *,case aplica_bloqueo when 1 then 'SI' else 'NO' end as aplica_bloqueo_des from vw_listado_reglaspld where cod_empresa = '"+ req.user.IdEmpresaCliente +"'"
            data = req.session.consultareglas;
            sql = sql + (data.tipo_operacion !="" ? " and cod_esquema = '"+ data.tipo_operacion + "'": "");
            sql = sql + (data.tipo_regla !="" ? " and idTipoRegla = '"+ data.tipo_regla + "'": "");
            sql = sql + (data.status !="" ? " and idStatus = '"+ data.status + "'": "");
            sql = sql + (data.momento !="" ? " and idMomento = '"+ data.momento + "'": "");
            sql = sql + (data.descripcionRegla !="" ? " and descripcion_regla  like '%"+ data.descripcionRegla + "%'": "");
            sql = sql + " order by idRegla asc";
            console.log (sql);
            resultReglas = await pool.query(sql);
           
            res.render("pld/listado-reglas",{ShowBusqueda,result_tipoRegla,result_status, resultReglas, data});
            delete req.session.consultareglas;
            break main;
        }
        res.render("pld/listado-reglas",{ShowBusqueda,result_tipoRegla,result_status, data});
    }
});

router.post('/pld/configuracion', isLoggedIn, async (req, res)=>{ 
    main : {
        let data = {
            tipo_operacion : req.body.cboTipoOperacion,
            tipo_regla : req.body.cboTipoRegla,
            status : req.body.cboStatus,
            momento : req.body.cboMomento,
            cod_tipo_persona : req.body.cboTipoPersona,
            descripcionRegla : fn.CleanCadena(req.body.txtDescripcion)
        };
        req.session.consultareglas = data;
        let sql = "Select *, case aplica_bloqueo when 1 then 'SI' else 'NO' end as aplica_bloqueo_des from vw_listado_reglaspld where cod_empresa = '"+ req.user.IdEmpresaCliente +"'"
        sql = sql + (data.tipo_operacion !="" ? " and cod_esquema = '"+ data.tipo_operacion + "'": "");
        sql = sql + (data.tipo_regla !="" ? " and idTipoRegla = '"+ data.tipo_regla + "'": "");
        sql = sql + (data.status !="" ? " and idStatus = '"+ data.status + "'": "");
        sql = sql + (data.momento !="" ? " and idMomento = '"+ data.momento + "'": "");
        sql = sql + (data.cod_tipo_persona !="" ? " and cod_tipo_persona = '"+ data.cod_tipo_persona + "'": "");
        sql = sql + (data.descripcionRegla !="" ? " and descripcion_regla  like '%"+ data.descripcionRegla + "%'": "");
        sql = sql + " order by idRegla asc";
        
        let resultReglas = await pool.query(sql);
        let ShowBusqueda = true;
        let result_tipoRegla = await pool.query("Select idtipoRegla as id, descripcion from cat_tipo_regla_pld");
        let result_status = await pool.query("Select idStatus as id, descripcion from cat_status_pld");
        
      
        res.render("pld/listado-reglas",{ShowBusqueda,result_tipoRegla,result_status, resultReglas, data});
    }
});

router.post('/pld/loadReglas', isLoggedIn, async (req, res)=>{ 
    main : {
        pool.query("call usp_cargaReglas_preconfiguradas (?)", [req.user.IdEmpresaCliente]).then( async function(resultadoObtenido){
            req.flash("success_msg", "Reglas cargadas correctamente");
            res.redirect("/pld/configuracion");
        }).catch(function(err){
            error_msg = err;
            req.flash("error_msg", error_msg);
            res.redirect("/pld/configuracion");
        });;
    }
});


router.all('/pld/bloqueo/CompliancePDF',isLoggedIn, async (req, res)=>{ 
    let hfmovreg = req.query.hfmovreg;
    let hfmov = req.query.hfmov;
    let detallelistasNegras = [];
    if(hfmovreg=="adm"){
        detallelistasNegras =  req.session.resultadosListas;
    }else{
        detallelistasNegras = await CatalogosBD.Get_RegistroListasNegras(req, hfmovreg, hfmov);
    } 
    let html = pdfreport.Get_templateListasNegras(detallelistasNegras, req);
    pdfreport.GeneraPDF_ListasNegras(html, res);

});


router.all('/pld/bloqueo/detalle', isLoggedIn, async (req, res)=>{ 
    let detalleRemesa = {};
    let result_Motivos = {};
    let detalleRemesaB = {};
    let detalleReglaA = {};
    let result_statusPLD = {};
    let detallelistasNegras = {};
    let mensajeSalida ="";
    let tipomensaje ="";
    let showMensaje = false;
    let idMov = "";
    let esPEPConfirmado = "NO";
    main : {
        if(!req.body.hfidnva){
            if(!req.query.hfidnva){
                req.flash("error_msg", "Debes seleccionar la remesa a revisar");
                res.redirect("/pld/bloqueos");
                break main;
            }else{
                idMov = req.query.hfidnva;
            }
        }else{
            idMov = req.body.hfidnva;
        }
        


        if(idMov == ""){
            req.flash("error_msg", "Debes seleccionar la remesa a revisar");
            res.redirect("/pld/bloqueos");
            break main;
        }

        let accion = req.body.hfacccion;
        if(accion == undefined){
            accion = req.body.hfaccion2;
        }
        let obs = "";
        let pstatus = "";
        let espep = "";
        let Params = [];
        switch (accion) {
            case "cancelar":
                obs = req.body.txtMotivo;
                pstatus = req.body.cboTipoC;
                let cod_corresponsal = req.body.hfcorr;
                let cod_transmisor = req.body.hftrans;
                let cve_cobro = req.body.hfcvecobro;
                Params = [req.user.IdEmpresaCliente, cod_transmisor, cod_corresponsal, cve_cobro, pstatus, obs, req.user.IdUser, req.user.IdEmpresa ];
                console.log(Params);
                var result = await pool.query("call usp_cancelaRemesa_in (?,?,?,?,?,?,?,?)", Params);
                let r =result[0];
                if((r[0]).code=="00"){
                    // Se notifica al Transmisor si este trabaja con notificaciones online
                    await restNotificacion.CancelPaymemt(req, cod_transmisor, cod_corresponsal,  cve_cobro);
                    tipomensaje = "success_msg";
                    mensajeSalida = r[0].msg;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = r[0].msg;
                   
                };
                showMensaje = true;
                break;
        
            case "actualiza":
                obs = req.body.txtObservaciones;
                console.log(req.body.cboStatusP);
                pstatus = req.body.cboStatusP;
                espep = req.body.cboEsPEP;
                Params = [req.user.IdEmpresaCliente, idMov, pstatus, obs, req.user.IdUser, req.user.IdEmpresa, espep];
                console.log(Params);
                var resultC = await pool.query("call usp_gestionaRemesaBloqueada (?)", [Params]);
                console.log(result);
                let rc =resultC[0];
                if((rc[0]).code=="00"){
                    tipomensaje = "success_msg";
                    mensajeSalida = rc[0].msg;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = rc[0].msg;
                   
                };
                showMensaje = true;
                break;
        
            default:
                break;
        }


        // Cargamos detalle de la remesa bloqueada
        let cod_cliente_asociado = 0;
        const remesa_bloqueada = await pool.query("select * from vw_remesas_en_pld where id_movimiento = ? and cod_empresa = ?", [idMov, req.user.IdEmpresaCliente]);
        if(remesa_bloqueada.length > 0){
            detalleRemesaB = remesa_bloqueada[0];
            let cod_transmisor = remesa_bloqueada[0].cod_transmisor;
            let cod_corresponsal = remesa_bloqueada[0].cod_corresponsal;
            let cve_cobro = remesa_bloqueada[0].cve_cobro;
            cod_cliente_asociado = remesa_bloqueada[0].cod_cliente;
            let detalle = await CatalogosBD.Get_Remesa(req, cod_transmisor, cod_corresponsal, cve_cobro);
            let ReglaAplicada = await CatalogosBD.Get_ReglaPLD(req, remesa_bloqueada[0].id_regla_aplicada);
            result_Motivos = await CatalogosBD.Cat_MotivosCancelacion();
            detalleReglaA = ReglaAplicada[0];
            detalleRemesa = detalle[0]; 

            let sqlcte = "Select esPepconfirmado from clientes where cod_empresa = ? and cod_cliente = ?;";
            
            let resultcte = await pool.query(sqlcte,[req.user.IdEmpresaCliente, cod_cliente_asociado]);
            if(resultcte.length > 0){
                let rsc = resultcte[0];
                if(rsc.esPepconfirmado==1){
                    esPEPConfirmado = "SI";
                }
            }

            if(remesa_bloqueada[0].num_regla == 5 || remesa_bloqueada[0].num_regla == 36){
                detallelistasNegras = await CatalogosBD.Get_RegistroListasNegras(req, idMov, "P");
            }
        }
        result_statusPLD = await CatalogosBD.Cat_StatusPLD();
    }
    if(showMensaje==true){
        req.flash(tipomensaje, mensajeSalida);
        res.redirect(url.format({pathname: "/pld/bloqueo/detalle", query:{"hfidnva": idMov }}));
    }
    else{
        let cod_esq = "P";
        res.render("pld/remesa-detalle", {detalleRemesa, detalleRemesaB, detalleReglaA, result_statusPLD, result_Motivos, detallelistasNegras, cod_esq, esPEPConfirmado });
    }
});

router.all('/pld/bloqueo/detalle-cliente', isLoggedIn, async (req, res)=>{ 
    let detalleRemesa = {};
    let result_Motivos = {};
    let detalleRemesaB = {};
    let detalleReglaA = {};
    let result_statusPLD = {};
    let detallelistasNegras = {};
    let mensajeSalida ="";
    let tipomensaje ="";
    let showMensaje = false;
    let idMov = "";
    main : {
        if(!req.body.hfidnva){
            if(!req.query.hfidnva){
                req.flash("error_msg", "Debes seleccionar el cliente a revisar");
                res.redirect("/pld/bloqueos-cliente");
                break main;
            }else{
                idMov = req.query.hfidnva;
            }
        }else{
            idMov = req.body.hfidnva;
        }
        

        if(idMov == ""){
            req.flash("error_msg", "Debes seleccionar el cliente a revisar");
            res.redirect("/pld/bloqueos-cliente");
            break main;
        }

        let accion = req.body.hfacccion;
        if(accion == undefined){
            accion = req.body.hfaccion2;
        }
        let obs = "";
        let pstatus = "";
        let Params = [];
        switch (accion) {
            case "cancelar":
                obs = req.body.txtMotivo;
                pstatus = req.body.cboTipoC;
                let cod_corresponsal = req.body.hfcorr;
                let cod_transmisor = req.body.hftrans;
                let cve_cobro = req.body.hfcvecobro;
                Params = [req.user.IdEmpresaCliente, cod_transmisor, cod_corresponsal, cve_cobro, pstatus, obs, req.user.IdUser, req.user.IdEmpresa ];
                console.log(Params);
                var result = await pool.query("call usp_cancelaRemesa_in (?,?,?,?,?,?,?,?)", Params);
                let r =result[0];
                if((r[0]).code=="00"){
                    // Se notifica al Transmisor si este trabaja con notificaciones online
                    await restNotificacion.CancelPaymemt(req, cod_transmisor, cod_corresponsal,  cve_cobro);
                    tipomensaje = "success_msg";
                    mensajeSalida = r[0].msg;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = r[0].msg;
                   
                };
                showMensaje = true;
                break;
        
            case "actualiza":
                obs = req.body.txtObservaciones;
                console.log(req.body.cboStatusP);
                pstatus = req.body.cboStatusP;
                Params = [req.user.IdEmpresaCliente, idMov, pstatus, obs, req.user.IdUser, req.user.IdEmpresa ];
                console.log(Params);
                var resultC = await pool.query("call usp_gestionaClienteBloqueado (?)", [Params]);
                let rc =resultC[0];
                if((rc[0]).code=="00"){
                    tipomensaje = "success_msg";
                    mensajeSalida = rc[0].msg;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = rc[0].msg;
                   
                };
                showMensaje = true;
                break;
        
            default:
                break;
        }


        // Cargamos detalle de la remesa bloqueada
        
        const remesa_bloqueada = await pool.query("select * from vw_clientes_bloqueados where id_movimiento = ? and cod_empresa = ?", [idMov, req.user.IdEmpresaCliente]);
        if(remesa_bloqueada.length > 0){
            detalleRemesaB = remesa_bloqueada[0];
            let ReglaAplicada = await CatalogosBD.Get_ReglaPLD(req, remesa_bloqueada[0].id_regla_aplicada);
            
            result_Motivos = await CatalogosBD.Cat_MotivosCancelacion();
            detalleReglaA = ReglaAplicada[0];
            

            if(remesa_bloqueada[0].num_regla == 5){
                detallelistasNegras = await CatalogosBD.Get_RegistroListasNegras(req, idMov, "E");
            }
        }
        result_statusPLD = await CatalogosBD.Cat_StatusPLD();
    }
    if(showMensaje==true){
        req.flash(tipomensaje, mensajeSalida);
        res.redirect(url.format({pathname: "/pld/bloqueo/detalle-cliente", query:{"hfidnva": idMov }}));
    }
    else{
        let cod_esq = "E"
        res.render("pld/cliente-detalle", {detalleRemesaB, detalleReglaA, result_statusPLD, result_Motivos, detallelistasNegras, cod_esq });
    }
});


router.all('/pld/detalleRemitente', isLoggedIn, async (req, res)=>{ 
    let cod_cliente="";
    let result_paisesNac = {};
    let data = {};
    let mov = {}
    let result_pagos_nacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0 ,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible" };
    let result_pagos_internacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0 , valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
    let result_envios_nacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
    let result_envios_internacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
    let  resultados = {};
    let resultIdentificaciones = {};
    let pagina_back ="detalle-cliente";
    if(!req.body.cod){
      if(!req.query.cod){
        res.redirect("/pld/bloqueo/detalle-cliente?hfidnva=" + req.query.mov);
        mov = req.query.mov;
      }else{
          cod_cliente = req.query.cod;
          mov = req.query.mov;
      }
    }else{
      cod_cliente = req.body.cod;
    }
    main:{
      result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
      result_genero = await CatBD.Cat_genero();
      result_ltAnios = CatBD.Get_anios();
      var anioActual = new Date().getFullYear();
      let resultCliente = await pool.query("Select * from vw_clientes where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);
      if (resultCliente.length>0){
          let tipoN =""; tipoI="";
          if(resultCliente[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
          data = {
            cod_cliente : cod_cliente,
            nombre: resultCliente[0].nombre_cliente,
            apaterno: resultCliente[0].apaterno_cliente,
            amaterno: resultCliente[0].amaterno_cliente,
            telefono: resultCliente[0].telefono,
            lada: resultCliente[0].lada,
            fechanacimiento : resultCliente[0].fecha_nacimiento,
            paisNacimiento : resultCliente[0].cod_pais_nacimiento,
            nacionalidad : resultCliente[0].cod_nacionalidad,
            calle: resultCliente[0].calle,
            noint: resultCliente[0].no_int,
            noext: resultCliente[0].no_ext,
            ciudad: resultCliente[0].ciudad,
            cp: resultCliente[0].cp,
            tipoI: tipoI,
            tipoN:tipoN,
            cboColonia : resultCliente[0].cod_asentamiento + "|" + resultCliente[0].cp,
            cboEstado : resultCliente[0].cod_estado,
            cboMuncipio : resultCliente[0].cod_municipio,
            txtColonia : resultCliente[0].asentamiento,
            txtEstado : resultCliente[0].estado,
            txtMunicipio :resultCliente[0].municipio,
            pais : resultCliente[0].cod_pais,
            status: resultCliente[0].status,
            status_descripcion: resultCliente[0].descripcion_status,
            nivel : resultCliente[0].nivel,
            color_nivel : resultCliente[0].color_nivel,
            genero : resultCliente[0].cod_genero,
            rfc: resultCliente[0].rfc,
            curp: resultCliente[0].curp,
            email: resultCliente[0].email
          };
  
          //Remesas Pagos Nacionales
          let p01 = await pool.query("Select * from vw_remesas_in_calificiacion_riesgo where cod_empresa = ? and cod_cliente_beneficiario = ?", [req.user.IdEmpresaCliente, cod_cliente]);
          
          let niveles = await pool.query("Select * from vw_plantilla_empresa where cod_empresa = ?", [req.user.IdEmpresaCliente]);
         
          var  lq =  Enumerable.from(p01)
          .groupBy(z=>z.tipo_producto)
          .select(z=>(
          {
              tipo_producto:z.key(), 
              remesas:z.getSource(),
              porcentaje_riesgo : Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.porcentaje_riesgo)}),
              totalRemesas : Enumerable.from(z.getSource()).count(),
              valor_riesgo : Enumerable.from(z.getSource()).sum(function(item){return parseInt(item.calificacion)}),
              nivel_descripcion : "",
              nivel_color :""
          }))
          .toArray();
          lq.forEach(element => {
              element.totalRemesas = element.totalRemesas ==""? 0 : element.totalRemesas;
              element.porcentaje_riesgo = element.totalRemesas == 0 ? 0 : element.porcentaje_riesgo/element.totalRemesas; 
              element.valor_riesgo = Math.round(element.totalRemesas == 0 ? 0 : (element.valor_riesgo = element.valor_riesgo==""? 0 : element.valor_riesgo)/element.totalRemesas); 
              
              if ( element.valor_riesgo!=0){
                  niveles.forEach(item => {
                      if(item.id_nivel == element.valor_riesgo){
                          element.nivel_color = item.color;
                          element.nivel_descripcion = item.nombre;
                      }
                  });
              }   
              switch(element.tipo_producto){
                  case "PN":
                      result_pagos_nacionales = element;
                      break;
                  case "PI":
                      result_pagos_internacionales = element;
                      break;
                  case "EN":
                      result_envios_nacionales = element;
                      break;
                  case "EI":
                      result_envios_internacionales = element;
                      break;
              }
  
          });
          
          resultados = {
              result_pagos_nacionales : result_pagos_nacionales,
              result_pagos_internacionales : result_pagos_internacionales,
              result_envios_nacionales : result_envios_nacionales,
              result_envios_internacionales : result_envios_internacionales
          }
  
          resultIdentificaciones = await pool.query("Select * from vw_cliente_identificacion where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);
  
  
        }  
  }
    res.render("cliente/detalle-cliente",{mov,result_paisesNac, data, resultados, resultIdentificaciones, pagina_back,result_genero, result_ltAnios, anioActual });
  });

  router.all('/pld/detalleBeneficiario', isLoggedIn, async (req, res)=>{ 
    let cod_cliente="";
    let result_paisesNac = {};
    let data = {};
    let mov = {}
    let result_pagos_nacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0 ,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible" };
    let result_pagos_internacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0 , valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
    let result_envios_nacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
    let result_envios_internacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
    let  resultados = {};
    let resultIdentificaciones = {};
    let pagina_back ="detalle";
    if(!req.body.cod){
      if(!req.query.cod){
        res.redirect("/pld/bloqueo/detalle?hfidnva=" + req.query.mov);
        mov = req.query.mov;
      }else{
          cod_cliente = req.query.cod;
          mov = req.query.mov;
      }
    }else{
      cod_cliente = req.body.cod;
    }
    main:{
        result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
        result_genero = await CatBD.Cat_genero();
        result_ltAnios = CatBD.Get_anios();
        var anioActual = new Date().getFullYear();
        let resultCliente = await pool.query("Select * from vw_clientes where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);
        if (resultCliente.length>0){
            let tipoN =""; tipoI="";
            if(resultCliente[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
            data = {
              cod_cliente : cod_cliente,
              nombre: resultCliente[0].nombre_cliente,
              apaterno: resultCliente[0].apaterno_cliente,
              amaterno: resultCliente[0].amaterno_cliente,
              telefono: resultCliente[0].telefono,
              lada: resultCliente[0].lada,
              fechanacimiento : resultCliente[0].fecha_nacimiento,
              paisNacimiento : resultCliente[0].cod_pais_nacimiento,
              nacionalidad : resultCliente[0].cod_nacionalidad,
              calle: resultCliente[0].calle,
              noint: resultCliente[0].no_int,
              noext: resultCliente[0].no_ext,
              ciudad: resultCliente[0].ciudad,
              cp: resultCliente[0].cp,
              tipoI: tipoI,
              tipoN:tipoN,
              cboColonia : resultCliente[0].cod_asentamiento + "|" + resultCliente[0].cp,
              cboEstado : resultCliente[0].cod_estado,
              cboMuncipio : resultCliente[0].cod_municipio,
              txtColonia : resultCliente[0].asentamiento,
              txtEstado : resultCliente[0].estado,
              txtMunicipio :resultCliente[0].municipio,
              pais : resultCliente[0].cod_pais,
              status: resultCliente[0].status,
              status_descripcion: resultCliente[0].descripcion_status,
              nivel : resultCliente[0].nivel,
              color_nivel : resultCliente[0].color_nivel,
              genero : resultCliente[0].cod_genero,
              esPepConfirmado :  resultCliente[0].esPepconfirmado,
              rfc: resultCliente[0].rfc,
              curp: resultCliente[0].curp,
              email: resultCliente[0].email
            };
    
            //Remesas Pagos Nacionales
            let p01 = await pool.query("Select * from vw_remesas_in_calificiacion_riesgo where cod_empresa = ? and cod_cliente_beneficiario = ?", [req.user.IdEmpresaCliente, cod_cliente]);
            let p02 = await pool.query("Select * from vw_remesas_out_calificacion_riesgo where cod_empresa = ? and cod_cliente_beneficiario = ?", [req.user.IdEmpresaCliente, cod_cliente]);
            
            let niveles = await pool.query("Select * from vw_plantilla_empresa where cod_empresa = ?", [req.user.IdEmpresaCliente]);
           console.log(niveles);
            var  lq =  Enumerable.from(p01)
            .groupBy(z=>z.tipo_producto)
            .select(z=>(
            {
                tipo_producto:z.key(), 
                remesas:z.getSource(),
                porcentaje_riesgo : fn.roundToTwo(Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.porcentaje_riesgo)})),
                totalRemesas : Enumerable.from(z.getSource()).count(),
                valor_riesgo : Enumerable.from(z.getSource()).sum(function(item){return parseInt(item.calificacion)}),
                nivel_descripcion : "",
                nivel_color :""
            }))
            .toArray();
            /*
            var lq = Enumerable.from(p01)
            .groupBy(z => z.tipo_producto)
            .select(z => ({
                tipo_producto: z.key(),
                sub_grupos: Enumerable.from(z.getSource())
                    .groupBy(y => y.anio)
                    .select(y => ({
                        anio: y.key(),
                        meses: Enumerable.from(y.getSource())
                            .groupBy(x => x.mes)
                            .select(x => ({
                                mes: x.key(),
                                remesas: x.getSource(), // Las remesas se asignan aquí
                                porcentaje_riesgo: fn.roundToTwo(
                                    Enumerable.from(x.getSource()).sum(item => parseFloat(item.porcentaje_riesgo))
                                ),
                                totalRemesas: Enumerable.from(x.getSource()).count(),
                                valor_riesgo: Enumerable.from(x.getSource()).sum(item => parseInt(item.calificacion)),
                            }))
                            .toArray(),
                    }))
                    .toArray(),
                    porcentaje_riesgo: fn.roundToTwo(
                    Enumerable.from(z.getSource()).sum(item => parseFloat(item.porcentaje_riesgo))
                ),
                totalRemesas: Enumerable.from(z.getSource()).count(),
                valor_riesgo: Enumerable.from(z.getSource()).sum(item => parseInt(item.calificacion)),
                nivel_descripcion: "",
                nivel_color: "",
            }))
            .toArray();
*/

            var  lq2 =  Enumerable.from(p02)
            .groupBy(z=>z.tipo_producto)
            .select(z=>(
            {
                tipo_producto:z.key(), 
                remesas:z.getSource(),
                porcentaje_riesgo : fn.roundToTwo(Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.porcentaje_riesgo)})),
                totalRemesas : Enumerable.from(z.getSource()).count(),
                valor_riesgo : Enumerable.from(z.getSource()).sum(function(item){return parseInt(item.calificacion)}),
                nivel_descripcion : "",
                nivel_color :""
            }))
            .toArray();
            /*
            var lq2 = Enumerable.from(p02)
            .groupBy(z => z.tipo_producto)
            .select(z => ({
                tipo_producto: z.key(),
                sub_grupos: Enumerable.from(z.getSource())
                    .groupBy(y => y.anio)
                    .select(y => ({
                        anio: y.key(),
                        meses: Enumerable.from(y.getSource())
                            .groupBy(x => x.mes)
                            .select(x => ({
                                mes: x.key(),
                                remesas: x.getSource(), // Las remesas se asignan aquí
                                porcentaje_riesgo: fn.roundToTwo(
                                    Enumerable.from(x.getSource()).sum(item => parseFloat(item.porcentaje_riesgo))
                                ),
                                totalRemesas: Enumerable.from(x.getSource()).count(),
                                valor_riesgo: Enumerable.from(x.getSource()).sum(item => parseInt(item.calificacion)),
                            }))
                            .toArray(),
                    }))
                    .toArray(),
                porcentaje_riesgo: fn.roundToTwo(
                    Enumerable.from(z.getSource()).sum(item => parseFloat(item.porcentaje_riesgo))
                ),
                totalRemesas: Enumerable.from(z.getSource()).count(),
                valor_riesgo: Enumerable.from(z.getSource()).sum(item => parseInt(item.calificacion)),
                nivel_descripcion: "",
                nivel_color: "",
            }))
            .toArray();
*/
            lq.forEach(element => {
                element.totalRemesas = element.totalRemesas ==""? 0 : element.totalRemesas;
                element.porcentaje_riesgo = fn.roundToTwo(element.totalRemesas == 0 ? 0 : element.porcentaje_riesgo/element.totalRemesas); 
                element.valor_riesgo = Math.round(element.totalRemesas == 0 ? 0 : (element.valor_riesgo = element.valor_riesgo==""? 0 : element.valor_riesgo)/element.totalRemesas); 
                
                if ( element.valor_riesgo!=0){
                    niveles.forEach(item => {
                        if(item.id_nivel == element.valor_riesgo){
                            element.nivel_color = item.color;
                            element.nivel_descripcion = item.nombre;
                        }
                    });
                }   
                switch(element.tipo_producto){
                    case "PN":
                        result_pagos_nacionales = element;
                        break;
                    case "PI":
                        result_pagos_internacionales = element;
                        break;
                }

            });
    
            lq2.forEach(element => {
                element.totalRemesas = element.totalRemesas ==""? 0 : element.totalRemesas;
                element.porcentaje_riesgo = fn.roundToTwo(element.totalRemesas == 0 ? 0 : element.porcentaje_riesgo/element.totalRemesas); 
                element.valor_riesgo = Math.round(element.totalRemesas == 0 ? 0 : (element.valor_riesgo = element.valor_riesgo==""? 0 : element.valor_riesgo)/element.totalRemesas); 
                
                if ( element.valor_riesgo!=0){
                    niveles.forEach(item => {
                        if(item.id_nivel == element.valor_riesgo){
                            element.nivel_color = item.color;
                            element.nivel_descripcion = item.nombre;
                        }
                    });
                }   
                switch(element.tipo_producto){
                    case "EN":
                        result_envios_nacionales = element;
                        break;
                    case "EI":
                        result_envios_internacionales = element;
                        break;
                }
    
            });
            
            resultados = {
                result_pagos_nacionales : result_pagos_nacionales,
                result_pagos_internacionales : result_pagos_internacionales,
                result_envios_nacionales : result_envios_nacionales,
                result_envios_internacionales : result_envios_internacionales
            }
    
            resultIdentificaciones = await pool.query("Select * from vw_cliente_identificacion where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);
    
    
          }  
    }
    res.render("cliente/detalle-cliente",{mov,result_paisesNac, data, resultados, resultIdentificaciones, pagina_back,result_genero, result_ltAnios, anioActual });
  });

router.all('/pld/regla/edit', isLoggedIn, async (req, res)=>{ 
    main : {
        let IdRegla = "";
        let result_chk = [];
        let data = {};
        let data2 = {
            datos_generales:0,
            apoderado_legal:0,
            accionistapf:0,
            accionistapm:0,
            propietario_real:0
        }

      
        if(!req.body.hfidnva){
            if(!req.query.hfidnva){
                req.flash("error_msg", "Debes seleccionar una regla para su modificación");
                res.redirect("/pld/configuracion");
                break main;
            }else{
                IdRegla = req.query.hfidnva;

            }
        }else{
            IdRegla = req.body.hfidnva;
        }
        

        if(IdRegla == ""){
            req.flash("error_msg", "Debes seleccionar una regla para su modificación");
            res.redirect("/pld/configuracion");
            break main;
        }

        let result = await pool.query("select a.*, b.descripcion_regla, b.tipo_parametro, b.cod_esquema, case b.cod_esquema when 'P' then 'PAGO REMESAS' when 'C' then 'ALTA DE CLIENTE PM' else 'ENVIO REMESAS' end as descripcion_esquema, num_regla, aplica_bloqueo from empresas_reglas_pld a inner join cat_reglas_pld b on (a.idRegla = b.idRegla) where a.cod_empresa = ? and a.idRegla = ?",[req.user.IdEmpresaCliente, IdRegla]);  
        if (result.length==0){
            req.flash("error_msg", "Regla no encontrada, intenta de nuevo");
            res.redirect("/pld/configuracion");
            break main;
        }
       let tipoValor = "";
       let tipoValor2 = "";
       let mascara = "";
       let result_catalogo;
       let resultadoCatalogo = {};
       switch (result[0].tipo_parametro){
            case "INT": 
                tipoValor="Cantidad";
                mascara = "0";
                break;
            case "DOUBLE":
                tipoValor="Importe";
                mascara = "00.00";
                break;
            case "VARCHAR":
                tipoValor="Valor";
                mascara = "Valor";
                break;
            case "MULT_CAT_DOUBLE":
                let r = await pool.query("call usp_getCatalogosParaReglas(?)", [IdRegla]);
                detalle = await pool.query("call usp_getDetalleParametrosParaReglas(?,?)", [req.user.IdEmpresaCliente, IdRegla]); 
                result_catalogo = r[0];
                resultadoCatalogo = detalle[0];
                break;    
            case "MULT_INT":
                let params2 = [req.user.IdEmpresaCliente, IdRegla];
                detalle = await pool.query("call usp_getDetalleParametrosParaReglas(?,?)", params2);
                
                resultadoCatalogo = detalle[0];
                break;
            case "MULT_DOUBLE":    
                let params = [req.user.IdEmpresaCliente, IdRegla];
                detalle = await pool.query("call usp_getDetalleParametrosParaReglas(?,?)", params);
                
                resultadoCatalogo = detalle[0];
                break;
            case "IND_DOUBLE_DOUBLE":    
                tipoValor="Importe Individual";
                tipoValor2="Importe Acumulado";
                mascara = "00.00";
                break;
       };
       
        data = {
            idRegla : IdRegla, 
            num_regla : result[0].num_regla,
            cod_esquema : result[0].cod_esquema,
            descripcion_esquema : result[0].descripcion_esquema,
            tipo_regla : result[0].idTipoRegla,
            status : result[0].idStatus,
            momento : result[0].idMomento,
            mensaje : result[0].mensaje_usuario,
            descripcionRegla : result[0].descripcion_regla,
            parametro : result[0].parametroValidacion,
            parametro2 : result[0].parametroValidacion2,
            tipoParametro : result[0].tipo_parametro,
            tipoValor :tipoValor,
            tipoValor2 :tipoValor2,
            mascara : mascara,
            aplicaBloqueo : result[0].aplica_bloqueo,
            notificaCorreo : result[0].notifica_correo
        };
        
        const result_tipoRegla = await pool.query("Select idtipoRegla as id, descripcion from cat_tipo_regla_pld");
        const result_status = await pool.query("Select idStatus as id, descripcion from cat_status_pld");
        const result_momento = await CatalogosBD.Cat_momento_validacion(data.cod_esquema);

        if(data.cod_esquema == "C"){
            result_chk = await pool.query("select * from pm_reglas_by_seccion_persona where cod_empresa = ? and id_regla = ?", [req.user.IdEmpresaCliente, data.idRegla]);
            if(result_chk.length>0){
                
                    data2.datos_generales = fn.filtraArrayPorElemento(result_chk, "id_seccion", "1").length > 0 ? 1: 0;
                    data2.apoderado_legal = fn.filtraArrayPorElemento(result_chk, "id_seccion", "2").length > 0 ? 1: 0;
                    data2.accionistapf = fn.filtraArrayPorElemento(result_chk, "id_seccion", "3").length > 0 ? 1: 0;
                    data2.accionistapm = fn.filtraArrayPorElemento(result_chk, "id_seccion", "4").length > 0 ? 1: 0;
                    data2.propietario_real = fn.filtraArrayPorElemento(result_chk, "id_seccion", "5").length > 0 ? 1: 0;            
            }
            console.log(data2);
        }
        res.render("pld/modificacion-regla",{ data,data2, result_tipoRegla,result_status,result_momento, result_catalogo, resultadoCatalogo});
       
    }


});

router.all('/pld/regla/edit-success', isLoggedIn, async (req, res)=>{ 
    main : {
        let data = {
            idRegla : req.body.hfidnva,
            tipo_regla : req.body.cboTipoRegla,
            status : req.body.cboStatus,
            momento : req.body.cboMomento,
            mensaje : fn.CleanCadena(req.body.txtDescripcion),
            parametro : req.body.txtParametro == undefined ? "": fn.CleanCadena(req.body.txtParametro),
            parametro2 : req.body.txtParametro2 == undefined ? "": fn.CleanCadena(req.body.txtParametro2),
            tipoParametro : req.body.hfTipoParametro,
            aplicaBloqueo : req.body.cboAplica,
            notificaCorreo : req.body.cboNotificaEmail
        };


        let Params = [req.user.IdEmpresaCliente, data.idRegla, data.tipo_regla, data.status, data.momento, data.mensaje, data.parametro, data.aplicaBloqueo, data.notificaCorreo, data.parametro2];

        pool.query("call usp_actualiza_regla (?)", [Params]).then(async function(result){
            let r =result[0];
            
                  if((r[0]).code=="00"){

                    let data2 = [];
                    data2.push({ id_seccion: 1, valor: req.body.Chk1 == undefined ? null : 1});
                    data2.push({ id_seccion: 2, valor: req.body.Chk2 == undefined ? null : 1});
                    data2.push({ id_seccion: 3, valor: req.body.Chk3 == undefined ? null : 1});
                    data2.push({ id_seccion: 4, valor: req.body.Chk4 == undefined ? null : 1});
                    data2.push({ id_seccion: 5, valor: req.body.Chk5 == undefined ? null : 1});
            
                    await pool.query("delete from pm_reglas_by_seccion_persona where cod_empresa = ? and id_regla = ?", [req.user.IdEmpresaCliente,data.idRegla]);
            
                    for (let index = 0; index < data2.length; index++) {
                        const element = data2[index];
                        if(element.valor==1){
                            let paramsINsercion = [req.user.IdEmpresaCliente,data.idRegla,element.id_seccion];
                            await pool.query("insert into pm_reglas_by_seccion_persona values(?);", [paramsINsercion]);
                        }
                    }
            


                    req.flash("success_msg",r[0].msg);
                    res.redirect(url.format({pathname: "/pld/regla/edit", query:{"hfidnva": data.idRegla  }}));
                  }else{
                    error_msg = r[0].msg;
                    req.flash("error_msg", error_msg);
                    res.redirect(url.format({pathname: "/pld/regla/edit", query:{"hfidnva": data.idRegla}}));
                  };
          }).catch(function(err){
            req.flash("error_msg", err);
            res.redirect(url.format({pathname: "/pld/regla/edit", query:{"hfidnva": data.idRegla }}));
          });
    }
});

router.post('/pld/ajax/addParametros', isLoggedIn, async (req, res)=>{ 
    let code ="";
    let msg ="";
    let tipoParam = req.body.tparam;
    let idRegla = req.body.id;
    let datoCatalogo = tipoParam=="MULT_CAT_DOUBLE"? req.body.cod : "" ;
    let dato_txt = req.body.descripcion;
    let data = [req.user.IdEmpresaCliente, idRegla, dato_txt, datoCatalogo];
  
    let r = {};
    await pool.query("Call usp_gestionaReglaParametros(?,?,?,?);", data).then(function(result){
        console.log(result.length);
        if(result.length==2){
            let dt = result[0];
            r = { code : dt[0].code, msg: dt[0].msg } ;
            res.send(r);
        }else{
            r = { code : "98", msg: "Error al tratar de registrar los datos para la regla"} ;
            res.send(r);
        }
    }).catch(function(err){
        r = { code : "99", msg: err + "Error al tratar de registrar los datos para esta regla" } ;
        res.send(r);
    });

});

router.post('/pld/ajax/DeleteParametros', isLoggedIn, async (req, res)=>{ 
    let tipoParam = req.body.tparam;
    let idRegla = req.body.id;
    let idregistro = req.body.idF;
    let data = [req.user.IdEmpresaCliente, idRegla, tipoParam, idregistro];
    let r = {};
    await pool.query("Call usp_DeleteReglaParametros(?,?,?,?);", data).then(function(result){
        console.log(result.length);
        if(result.length==2){
            let dt = result[0];
            r = { code : dt[0].code, msg: dt[0].msg } ;
            res.send(r);
        }else{
            r = { code : "98", msg: "Error al tratar de eliminar el registro"};
            res.send(r);
        }
    }).catch(function(err){
        r = { code : "99", msg: err + "Error al tratar de registrar los datos para esta regla" } ;
        res.send(r);
    });

});

router.get('/pld/consulta-manual', isLoggedIn, async (req, res)=>{ 
   
    res.render("pld/consulta-manual");
});


router.post('/pld/consulta-manual', isLoggedIn, async (req, res)=>{ 
    let rfc = "";
    let resultados = {}
    let parametrosBusqueda = {}
    main : {
        parametrosBusqueda = {
            busqueda: "MANUAL",
            tipo_persona : req.body.cboTipoPersona,
            nombre :  req.body.txtNombre == undefined? "" : req.body.txtNombre.toUpperCase(),
            apaterno : req.body.txtApaterno == undefined? "" : req.body.txtApaterno.toUpperCase(),
            amaterno : req.body.txtAmaterno == undefined? "" : req.body.txtAmaterno.toUpperCase(),
            fechanacimientoCon : req.body.txtFechaNacimiento == "" ? "" : fn.ConvierteFechaFormatoBase(req.body.txtFechaNacimiento),
            fechanacimientoyyyyMMdd : req.body.txtFechaNacimiento == "" ? "" : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaNacimiento),
            fechanacimiento : req.body.txtFechaNacimiento,
            rfc : req.body.txtRFC == undefined? "" :  req.body.txtRFC.toUpperCase(),
            curp : req.body.txtCURP == undefined? "": req.body.txtCURP.toUpperCase(),
            rfcPM : req.body.txtRFCPM == undefined? "" :  req.body.txtRFCPM.toUpperCase(),
            nombrePM : req.body.txtNombrePM == undefined? "" :  req.body.txtNombrePM.toUpperCase()
          };

          let RFCcal = "";
         if(parametrosBusqueda.fechanacimientoCon!=""){ 
            RFCcal = fn.obtenRFC(parametrosBusqueda.nombre, parametrosBusqueda.apaterno, parametrosBusqueda.amaterno,parametrosBusqueda.fechanacimientoyyyyMMdd);
         }
        if(parametrosBusqueda.rfc.length!=""){
            if(parametrosBusqueda.rfc.length<10){
                error_msg = "El RFC debe ser mayor a 10 dígitos";
                res.render("pld/consulta-manual",{error_msg});
                break main;
            } 
            if(RFCcal!= parametrosBusqueda.rfc.substr(0,10)){
                error_msg = "El RFC captutado no coincide con la fecha de Nacimiento";
                res.render("pld/consulta-manual",{error_msg});
                break main;
            }
        }else{
            rfc = RFCcal;
        }
      
       // resultados =  await fn_pld.listas_negras(req,apellido, parametrosBusqueda.nombre, rfc);
        
        blcklists = await fn_provedores_listas_negras.validaListasNegras(parametrosBusqueda, req.user.IdEmpresaCliente,0);
        console.log("codigo de respuesta:" + blcklists.code );
        code = blcklists.code;
        msg = blcklists.msg;
        req.session.resultadosListas = blcklists.data.datos;
        resultados = blcklists.data.datos;
    }
    res.render("pld/consulta-manual", {parametrosBusqueda, resultados, code, msg});
});

router.get('/pld/localizador-agencias', isLoggedIn, async (req, res)=>{ 
    res.render("pld/localizador-agencias");
});


router.get('/pld/reporte-regulatorio', isLoggedIn, async (req, res)=>{ 
    let reporteGenerado  = {};
    let data = {};
    let result_tipo_reporte = await CatalogosBD.ReportesReg_Cat_tipo_reporte();
    data = req.session.parametros_reporte;
    if(data!=null){
        reporteGenerado = await CatalogosBD.Get_Reporte_regulatorio_filtros(req, data);
    }
    res.render("pld/reporte-regulatorio", {result_tipo_reporte, reporteGenerado, data});
});

router.post('/pld/reporte-regulatorio', isLoggedIn, async (req, res)=>{ 
    let result_tipo_reporte = await CatalogosBD.ReportesReg_Cat_tipo_reporte();
    let data = {
        tipo_reporte : req.body.cboTipoReporte,
        status : req.body.cboStatus,
        nombre : req.body.txtNombre
    }
    req.session.parametros_reporte = data;
    let reporteGenerado = await CatalogosBD.Get_Reporte_regulatorio_filtros(req, data);
    console.log(reporteGenerado);
    res.render("pld/reporte-regulatorio", {result_tipo_reporte,reporteGenerado, data});
});

router.get('/pld/reporte-regulatorio/detalle', isLoggedIn, async (req, res)=>{ 
    var id = req.query.hfidnva;
    let reporteGenerado = await CatalogosBD.Get_Reporte_regulatorio(req, id);
    let registrosReporte = await CatalogosBD.Get_Registos_reporte_regulatorio(req, id);
    var cod_status ="";
    let data = {};

    main : {

        reporteGenerado.forEach(element => {
            cod_status = element.cod_status;
            data = element;
        });
        if(cod_status == ""){
            req.flash("alert_message", "No existe el reporte seleccionado");
            res.redirect("/pld/reporte-regulatorio");
            break main;
        };

    };


    res.render("pld/reporte-regulatorio-detalle", {data, registrosReporte});
});

router.get('/pld/reporte-regulatorio/add', isLoggedIn, async (req, res)=>{ 
    let data = {};
    let result_tipo_reporte = await CatalogosBD.ReportesReg_Cat_tipo_reporte();
    let result_tipo_operacion = await CatalogosBD.ReportesReg_Cat_tipo_operacion();
    let result_periodo = await CatalogosBD.ReportesReg_Cat_periodo();
    let result_organo = await CatalogosBD.ReportesReg_Cat_organo_supervisor();
    let result_empresa = await CatalogosBD.ReportesReg_Cat_empresa(req);
    result_empresa.forEach(element => {
        no_registro = element.no_registro;
    });
        data = {
            no_registro : no_registro
        }
    let catalogos = {
        result_tipo_reporte, 
        result_periodo,
        result_organo, 
        result_tipo_operacion,
        data
    };
    res.render("pld/add-reporte-regulatorio", catalogos);
    });



    
    router.get('/pld/reporte-regulatorio/delreg', isLoggedIn, async (req, res)=>{ 
        let datos = {
            cod_reporte : req.query.hfidnva,
            cod_registro: req.query.hfidsda
        };
       
        let params = [
            req.user.IdEmpresaCliente,
            datos.cod_reporte,
            datos.cod_registro,
            req.user.IdUser,
            req.user.IdEmpresa
        ];


        main : {
            try {
                var result = await pool.query("call usp_elimina_reporte_regulatorio_registro (?,?,?,?,?)", params);
                let r =result[0];
                if((r[0]).code=="00"){
                    mensajeSalida = r[0].msg;
                    req.flash("success_msg", mensajeSalida);
                    res.redirect("/pld/reporte-regulatorio/detalle?hfidnva=" + datos.cod_reporte);
                    
                    break main;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = r[0].msg;
                };
            
            } catch (error) {
                tipomensaje = "error_msg";
                mensajeSalida = "Error al tratar de eliminar el registro";
            }
            req.flash(tipomensaje, mensajeSalida);
            res.redirect("/pld/reporte-regulatorio/detalle?hfidnva=" + datos.cod_reporte);
        };
    });

    router.get('/pld/reporte-regulatorio/closereport', isLoggedIn, async (req, res)=>{ 
        let datos = {
            cod_reporte : req.query.hfidnva
        };
       
        let params = [
            req.user.IdEmpresaCliente,
            datos.cod_reporte,
            req.user.IdUser,
            req.user.IdEmpresa
        ];


        main : {
            try {
                var result = await pool.query("call usp_cierra_reporte_regulatorio (?,?,?,?)", params);
                let r =result[0];
                if((r[0]).code=="00"){
                    mensajeSalida = r[0].msg;
                    req.flash("success_msg", mensajeSalida);
                    res.redirect("/pld/reporte-regulatorio/detalle?hfidnva=" + datos.cod_reporte);
                    
                    break main;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = r[0].msg;
                };
            
            } catch (error) {
                tipomensaje = "error_msg";
                mensajeSalida = "Error al tratar de cerrar el reporte";
            }
            req.flash(tipomensaje, mensajeSalida);
            res.redirect("/pld/reporte-regulatorio/detalle?hfidnva=" + datos.cod_reporte);
        };
    });


    router.post('/pld/reporte-regulatorio/delete', isLoggedIn, async (req, res)=>{ 
        let datos = {
            cod_reporte : req.body.hfnoreporte
        };
       
        let params = [
            req.user.IdEmpresaCliente,
            datos.cod_reporte,
            req.user.IdUser,
            req.user.IdEmpresa
        ];
        console.log(params);

        main : {
            try {
                var result = await pool.query("call usp_elimina_reporte_regulatorio (?,?,?,?)", params);
                let r =result[0];
                if((r[0]).code=="00"){
                    mensajeSalida = r[0].msg;
                    req.flash("success_msg", mensajeSalida);
                    res.redirect("/pld/reporte-regulatorio");
                    
                    break main;
                }else{
                    tipomensaje = "error_msg";
                    mensajeSalida = r[0].msg;
                };
            
            } catch (error) {
                tipomensaje = "error_msg";
                mensajeSalida = "Error al tratar de eliminar el reporte";
            }
            req.flash(tipomensaje, mensajeSalida);
            res.redirect("/pld/reporte-regulatorio/detalle?hfidnva=" + datos.cod_reporte);
        };
    });


    router.all('/pld/reporte-regulatorio/addProcess', isLoggedIn, async (req, res)=>{ 
    let data = {};
    let error_msg = "";
    let success_msg = "";

    data = {
        tipo_reporte : req.body.cboTipoReporte,
        PeriodoAnio: req.body.txtPeriodoAnio == undefined ? '': req.body.txtPeriodoAnio,
        periodo_mes: req.body.cboPeriodoMes == undefined ? '': req.body.cboPeriodoMes,
        periodo: req.body.txtPeriodo == undefined ? '': req.body.txtPeriodo,
        organo: req.body.cboOrgano,
        no_registro: req.body.txtClave
    };
    var periodo = "";
    if(data.tipo_reporte == "1"){
        periodo = data.PeriodoAnio + data.periodo_mes;
    }else{
        periodo = fn.ConvierteFechaFormato_yyyyMMdd(data.periodo);
    }
    let params = [
        req.user.IdEmpresaCliente,
        data.tipo_reporte,
        periodo,
        data.organo,
        data.no_registro,
        req.user.IdUser,
        req.user.IdEmpresa
    ];
    console.log("generando reporte:");
    console.log(params);
    var reporteGenerado = {};
    main :{
        try {
            var result = await pool.query("call usp_inserta_reporte_regulatorio (?,?,?,?,?,?,?)", params);
            
            var codeReport = "";
            let r =result[0];
            if((r[0]).code=="00"){
                // Se notifica al Transmisor si este trabaja con notificaciones online
                tipomensaje = "success_msg";
                mensajeSalida = "Reporte guardado correctamente";
                codeReport = r[0].codReporte;
                console.log("CODIGO DE REPORTE:");
                console.log(codeReport);
                req.flash(tipomensaje, mensajeSalida);
                res.redirect("/pld/reporte-regulatorio/detalle?hfidnva=" + codeReport);
                break main;
            }else{
                tipomensaje = "error_msg";
                mensajeSalida = r[0].msg;
                error_msg = mensajeSalida;
            };
        
        } catch (error) {
            tipomensaje = "error_msg";
            mensajeSalida = "Error al tratar de guardar el reporte";
            error_msg = mensajeSalida;
        }
        
        let result_tipo_reporte = await CatalogosBD.ReportesReg_Cat_tipo_reporte();
        let result_tipo_operacion = await CatalogosBD.ReportesReg_Cat_tipo_operacion();
        let result_periodo = await CatalogosBD.ReportesReg_Cat_periodo();
        let result_organo = await CatalogosBD.ReportesReg_Cat_organo_supervisor();
        console.log(reporteGenerado);
        let catalogos = {
            error_msg,
            success_msg,
            result_tipo_reporte, 
            result_periodo,
            result_organo, 
            result_tipo_operacion,
            reporteGenerado,
            data
        };
        res.render("pld/add-reporte-regulatorio", catalogos);
    }
});

router.get('/pld/reporte-regulatorio/newreg', isLoggedIn, async (req, res)=>{ 

    var id = req.query.hfidnva;
    var cod_status ="";
   
let reporteGenerado = await CatalogosBD.Get_Reporte_regulatorio(req, id);
let datos_reporte = {}
let catalogos = {}
let accionEjecutar = "I";
    main : {

        reporteGenerado.forEach(element => {
            cod_status = element.cod_status;
            datos_reporte = element;
        });
        if(cod_status != "C"){
            req.flash("alert_message", "No existe el reporte seleccionado ó el reporte ya está generado");
            res.redirect("/pld/reporte-regulatorio");
            break main;
        };
    
        let data = {};
        let result_tipo_operacion = await CatalogosBD.ReportesReg_Cat_tipo_operacion();
        let result_sucursales = await CatalogosBD.ReportesReg_Cat_sucursales(req);
        let result_instrumento = await CatalogosBD.ReportesReg_Cat_instrumento();
        let result_monedas = await CatalogosBD.ReportesReg_Cat_divisa();
        let result_tipo_nacionalidad = await CatalogosBD.ReportesReg_Cat_tipo_nacionalidad();
        let result_tipo_persona = await CatalogosBD.ReportesReg_Cat_tipo_persona();
        let result_actividad = await CatalogosBD.ReportesReg_Cat_actividad_economica();
        let result_estados = await CatBD.Cat_estados();
        
        
        reporteGenerado.forEach(element => {
            datos_reporte = element;
        });

        if (datos_reporte.cod_tipo_reporte == 1){
            result_tipo_operacion =  result_tipo_operacion.filter(item => item.id !== '00');
            result_instrumento =  result_instrumento.filter(item => item.id !== '00');
        }

        catalogos = {
            result_sucursales, 
            result_tipo_operacion,
            result_instrumento,
            result_monedas,
            result_tipo_nacionalidad,
            result_tipo_persona,
            result_estados,
            result_actividad,
            datos_reporte,
            data,
            accionEjecutar
        };
    };
    res.render("pld/add-registro-reporteregulatorio", catalogos);
});



router.get('/pld/reporte-regulatorio/editreg', isLoggedIn, async (req, res)=>{ 

    var id = req.query.hfidnva;
    var idRegistro = req.query.hfidsda;
    var cod_status ="";
    let accionEjecutar = "U";
   
let reporteGenerado = await CatalogosBD.Get_Reporte_regulatorio(req, id);

let datos_reporte = {}
let catalogos = {}
    main : {

        reporteGenerado.forEach(element => {
            cod_status = element.cod_status;
            datos_reporte = element;
        });
        if(cod_status != "C"){
            req.flash("alert_message", "No existe el reporte seleccionado ó el reporte ya está generado");
            res.redirect("/pld/reporte-regulatorio");
            break main;
        };


        let registroEditar = await CatalogosBD.Get_Registro_reporte_regulatorio(req, id, idRegistro);
        let registro = {}
        registroEditar.forEach(element => {
            registro = element;
        });

        let data = {};
        data = fn_getdata_reporte_registro_BD(registro, datos_reporte);
        
        let result_tipo_operacion = await CatalogosBD.ReportesReg_Cat_tipo_operacion();
        let result_sucursales = await CatalogosBD.ReportesReg_Cat_sucursales(req);
        let result_instrumento = await CatalogosBD.ReportesReg_Cat_instrumento();
        let result_monedas = await CatalogosBD.ReportesReg_Cat_divisa();
        let result_tipo_nacionalidad = await CatalogosBD.ReportesReg_Cat_tipo_nacionalidad();
        let result_tipo_persona = await CatalogosBD.ReportesReg_Cat_tipo_persona();
        let result_actividad = await CatalogosBD.ReportesReg_Cat_actividad_economica();
        let result_estados = await CatBD.Cat_estados();
        reporteGenerado.forEach(element => {
            datos_reporte = element;
        });

        
        if (datos_reporte.cod_tipo_reporte == 1){
            result_tipo_operacion =  result_tipo_operacion.filter(item => item.id !== '00');
            result_instrumento =  result_instrumento.filter(item => item.id !== '00');
        }

        catalogos = {
            result_sucursales, 
            result_tipo_operacion,
            result_instrumento,
            result_monedas,
            result_tipo_nacionalidad,
            result_tipo_persona,
            result_estados,
            result_actividad,
            datos_reporte,
            data,
            accionEjecutar
        };
    };
    res.render("pld/add-registro-reporteregulatorio", catalogos);
});

router.post('/pld/reporte-regulatorio/newreg/process', isLoggedIn, async (req, res)=>{ 
    let data = fn_getdata_reporte_registro(req);
    let accionEjecutar = req.body.hftiacc;
    let params = fn_set_parametros_registro(req,data, accionEjecutar);
    
    let error_msg = "";
    let mensajeSalida = "";
    let tipomensaje = "";
    main :{
        try {
            var result = await pool.query("call usp_gestiona_reporte_regulatorio_registro (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", params);
            let r =result[0];
            if((r[0]).code=="00"){
                tipomensaje = "success_msg";
                mensajeSalida = r[0].msg;
                req.flash(tipomensaje, mensajeSalida);
                res.redirect("/pld/reporte-regulatorio/detalle?hfidnva=" + data.cod_reporte);
                break main;
            }else{
                tipomensaje = "error_msg";
                mensajeSalida = r[0].msg;
                error_msg = mensajeSalida;
            };
        
        } catch (error) {
            tipomensaje = "error_msg";
            mensajeSalida = "Error al tratar de guardar el reporte - " + error;
            error_msg = mensajeSalida;
        }


    }

    let datos_reporte = {}
    let reporteGenerado = await CatalogosBD.Get_Reporte_regulatorio(req, data.cod_reporte);
    let result_tipo_operacion = await CatalogosBD.ReportesReg_Cat_tipo_operacion();
    let result_sucursales = await CatalogosBD.ReportesReg_Cat_sucursales(req);
    let result_instrumento = await CatalogosBD.ReportesReg_Cat_instrumento();
    let result_monedas = await CatalogosBD.ReportesReg_Cat_divisa();
    let result_tipo_nacionalidad = await CatalogosBD.ReportesReg_Cat_tipo_nacionalidad();
    let result_tipo_persona = await CatalogosBD.ReportesReg_Cat_tipo_persona();
    let result_actividad = await CatalogosBD.ReportesReg_Cat_actividad_economica();
    let result_estados = await CatBD.Cat_estados();
    reporteGenerado.forEach(element => {
        datos_reporte = element;
    });
    catalogos = {
        error_msg,
        result_sucursales, 
        result_tipo_operacion,
        result_instrumento,
        result_monedas,
        result_tipo_nacionalidad,
        result_tipo_persona,
        result_estados,
        result_actividad,
        datos_reporte,
        data,
        accionEjecutar
    };
    res.render("pld/add-registro-reporteregulatorio", catalogos);
});

router.post('/pld/reporte-regulatorio/valDatosRelevante', isLoggedIn, async (req, res)=>{ 
    let cod_reporte = req.body.p1;
    let importe = req.body.p2;
    let resultado = {
        code : "00",
        msg  : "validacion correcta"
    }
    res.send(resultado);
});



function fn_getdata_reporte_registro_BD(registro, reporte){
    let data = {
        cod_reporte : registro.cod_reporte,
        cod_sucursal : registro.campo7,
        tipo_operacion : registro.campo8,
        cod_instrumento : registro.campo9,
        cod_sucursal : registro.campo7sucursal,
        cnbv : registro.campo6,
        cp : registro.campo7,
        cve_cobro : registro.campo10,
        monto : registro.campo11,
        cod_divisa : registro.campo12,
        fecha_operacion_formato : fn.ConvierteFechaFormato_yyyyMMdd_to_spanishDate(registro.campo13),
        fecha_operacion_base : registro.campo13,
        fecha_deteccion_formato : fn.ConvierteFechaFormato_yyyyMMdd_to_spanishDate(registro.campo14),
        fecha_deteccion_base : registro.campo14,
        tipo_nacionalidad : registro.campo15,
        tipo_persona : registro.campo16,
        razon_social : registro.campo17,
        nombre : registro.campo18,
        apaterno : registro.campo19,
        amaterno : registro.campo20,
        rfc : registro.campo21,
        curp : registro.campo22,
        fechaNacimiento_formato : fn.ConvierteFechaFormato_yyyyMMdd_to_spanishDate(registro.campo23),
        fechaNacimiento_base : registro.campo23,
        domicilio : registro.campo24,
        colonia : registro.campo25,
        cod_estado : registro.campo26Estado,
        municipio : registro.campo26,
        telefono : registro.campo27,
        actividad : registro.campo28,
        cuentaconAgentes : registro.pregunta1,
        tipo_personaAgente : registro.tipoPersonaAgente,
        nombreAgente : registro.campo29,
        apaternoAgente : registro.campo30,
        amaternoAgente : registro.campo31,
        rfcAgente : registro.campo32,
        curpAgente : registro.campo33,
        relacionacuentas : registro.pregunta2,
        consecutivo : registro.campo34,
        numeroenvios : registro.campo35,
        nombreRelacion : registro.campo37,
        apaternoRelacion :registro.campo38,
        amaternoRelacion : registro.campo39,
        descripcion1 : registro.campo40,
        descripcion2: registro.campo41,
        clave2 : registro.campo36,
        folio : registro.campo3
        };
        return data;
}

function fn_getdata_reporte_registro(req){
    let data = {
        cod_reporte : req.body.hfcodrep,
        cod_sucursal : req.body.cboSucursal,
        tipo_operacion : req.body.cboTipoOperacion,
        cod_instrumento : req.body.cboInstrumento,
        cnbv : req.body.hfcnbv,
        cp : req.body.hfcp,
        cve_cobro : req.body.txtcveenvio,
        monto : req.body.txtMonto != "" ? fn.financial(req.body.txtMonto) : 0 ,
        cod_divisa : req.body.cboDivisa,
        fecha_operacion_formato : req.body.txtFechaOperacion,
        fecha_operacion_base : req.body.txtFechaOperacion == "" ? "" : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaOperacion),
        fecha_deteccion_formato : req.body.txtFechaDeteccion,
        fecha_deteccion_base : req.body.txtFechaDeteccion == "" ? "" : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaDeteccion),
        tipo_nacionalidad : req.body.cboTipoNacionalidad,
        tipo_persona : req.body.cboTipoPersona,
        razon_social : req.body.txtRazonSocial== undefined ? "" : req.body.txtRazonSocial.toUpperCase(),
        nombre :  req.body.txtNombre== undefined ? "" : req.body.txtNombre.toUpperCase(),
        apaterno :  req.body.txtApaterno== undefined ? "" : req.body.txtApaterno.toUpperCase(),
        amaterno  : req.body.txtAmaterno== undefined ? "" : req.body.txtAmaterno.toUpperCase(),
        rfc : req.body.txtRFC.toUpperCase(),
        curp : req.body.txtAmaterno == undefined ? "" : req.body.txtCURP.toUpperCase(),
        fechaNacimiento_formato : req.body.txtFechaNacimiento,
        fechaNacimiento_base : req.body.txtFechaNacimiento == "" ? "" : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaNacimiento),
        domicilio : req.body.txtDomicilio.toUpperCase() == ""? "SE DESCONOCE (TENTATIVA)" : req.body.txtDomicilio.toUpperCase() ,
        colonia : req.body.txtColonia.toUpperCase() == ""? "0" : req.body.txtColonia.toUpperCase(),
        cod_estado : req.body.cboEstado,
        municipio : req.body.cboMunicipio,
        telefono : req.body.txtTelefono.toUpperCase(),
        actividad : req.body.cboActividad,
        cuentaconAgentes : req.body.cbocuentaconAgentes,
        tipo_personaAgente : req.body.cboTipoPersonaAgente== undefined ? "" : req.body.cboTipoPersonaAgente.toUpperCase(),
        nombreAgente : req.body.txtNombreAgente== undefined ? "" : req.body.txtNombreAgente.toUpperCase(),
        apaternoAgente : req.body.txtApaternoAgente== undefined ? "" : req.body.txtApaternoAgente.toUpperCase(),
        amaternoAgente : req.body.txtAmaternoAgente== undefined ? "" : req.body.txtAmaternoAgente.toUpperCase(),
        rfcAgente : req.body.txtRFCAgente== undefined ? "" : req.body.txtRFCAgente.toUpperCase(),
        curpAgente : req.body.txtCURPAgente== undefined ? "" : req.body.txtCURPAgente.toUpperCase(),
        relacionacuentas : req.body.cboRelacionacuentas== undefined ? "" : req.body.cboRelacionacuentas.toUpperCase(),
        consecutivo : req.body.txtConsecutivo== undefined ? "" : req.body.txtConsecutivo.toUpperCase(),
        numeroenvios : req.body.txtNumeroEnvios== undefined ? "" : req.body.txtNumeroEnvios.toUpperCase(),
        clave2 : req.body.txtClave2== undefined ? "" : req.body.txtClave2.toUpperCase(),
        nombreRelacion : req.body.txtNombreRelacion== undefined ? "" : req.body.txtNombreRelacion.toUpperCase(),
        apaternoRelacion :req.body.txtApaternoRelacion== undefined ? "" : req.body.txtApaternoRelacion.toUpperCase(),
        amaternoRelacion : req.body.txtAmaternoRelacion== undefined ? "" : req.body.txtAmaternoRelacion.toUpperCase(),
        descripcion1 : req.body.txtDescription1== undefined ? "" : req.body.txtDescription1.toUpperCase(),
        descripcion2: req.body.txtDescription2== undefined ? "" : req.body.txtDescription2.toUpperCase(), 
        
        folio : req.body.hffolio
        };
        console.log(data);
        return data;
}

function fn_set_parametros_registro(req, data, tipoAccion){
    let param = [
        tipoAccion ,
        req.user.IdEmpresaCliente,
        data.cod_reporte,
        req.user.IdUser,
        req.user.IdEmpresa,
        data.folio, 
        data.municipio,
        data.cp,
        data.tipo_operacion,
        data.cod_instrumento,
        data.cve_cobro ,
        data.monto ,
        data.cod_divisa ,
        data.fecha_operacion_base,
        data.fecha_deteccion_base,
        data.tipo_nacionalidad,
        data.tipo_persona,
        fn.QuitarAcentos(data.razon_social),
        fn.QuitarAcentos(data.nombre),
        fn.QuitarAcentos(data.apaterno),
        fn.QuitarAcentos(data.amaterno),
        data.rfc,
        data.curp,
        data.fechaNacimiento_base,
        fn.QuitarAcentos(data.domicilio),
        fn.QuitarAcentos(data.colonia),
        fn.QuitarAcentos(data.municipio),
        data.telefono,
        data.actividad,
        fn.QuitarAcentos(data.nombreAgente),
        fn.QuitarAcentos(data.apaternoAgente),
        fn.QuitarAcentos(data.amaternoAgente),
        data.rfcAgente,
        data.curpAgente,
        data.consecutivo,
        data.numeroenvios,
        data.clave2,
        fn.QuitarAcentos(data.nombreRelacion),
        fn.QuitarAcentos(data.apaternoRelacion),
        fn.QuitarAcentos(data.amaternoRelacion),
        fn.QuitarAcentos(data.descripcion1),
        fn.QuitarAcentos(data.descripcion2),
        data.cuentaconAgentes,
        data.relacionacuentas,
        data.tipo_personaAgente,
        data.cod_estado,
        data.cod_sucursal
    ];
    return param;
}

router.get("/pld/reporte-regulatorio/file",  isLoggedIn, async (req, res)=>{ 
    var id = req.query.hfidnva;
    let reporteGenerado = await CatalogosBD.Get_Reporte_regulatorio(req, id);
    let registrosReporte = await CatalogosBD.Get_Registros_reporte_regulatorio_file(req, id);
    var nombre_archivo ="";
    var cod_status ="";
    let data = {};

    main : {

        reporteGenerado.forEach(element => {
            nombre_archivo = element.num_reporte;
            cod_status = element.status;
            data = element;
        });

        
        if(cod_status == ""){
            req.flash("alert_message", "No existe el reporte seleccionado");
            res.redirect("/pld/reporte-regulatorio");
            break main;
        };

    };
  
    res.setHeader("Content-disposition", "attachment; filename=" + nombre_archivo + ".txt");
    res.setHeader("Content-type", "text/plain");
    res.charset = "UTF-8";
    registrosReporte.forEach(element => {
        res.write(element.registro + "\r\n");
    });
    
    res.end();
  });

router.get("/pld/reporte-agente", isLoggedIn,  async (req, res)=>{ 
    
    let result_organo = await CatalogosBD.ReportesReg_Cat_organo_supervisor_for_agentes("CNBV");
    catalogos = {
        result_organo
    };

res.render("pld/reporte-agentes-relacionados", catalogos);
});
  

router.all("/pld/reporte-agentes/file", async (req, res)=>{ 
      
    let no_registro = "";
    let cp = "";
    let alias ="";
      let anio = req.body.txtPeriodoAnio;
      let organo = req.body.cboOrgano;
      let formato = req.body.cboFormato;
      let result_empresa = await CatalogosBD.ReportesReg_Cat_empresa(req);
      result_empresa.forEach(element => {
          no_registro = "088" + element.no_registro;
          cp = element.cp;
          alias = element.alias;
      });
    let reporteGenerado = await CatalogosBD.Get_Reporte_agentes_relacionados(req);
    var  lq =  Enumerable.from(reporteGenerado)
    .groupBy(x=>x.cod_agente)
    .select(x=>({
        agente_relacionado:x.key(), 
        sucursales : x.getSource(),
        totalSucursales : Enumerable.from(x.getSource()).count(),
        }))
        .toArray();
    
    let arreglo = [];
    arreglo.push('<aviso xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.cnbv.gob.mx/recepcion/art" xsi:schemaLocation="http://www.cnbv.gob.mx/recepcion/art art.xsd">');
    arreglo.push('<ano_reportado>'+ anio  +'</ano_reportado>');
    arreglo.push('<clave_organismo_supervisor>01-'+ organo +'</clave_organismo_supervisor>');
    arreglo.push('<numero_registro>'+ no_registro +'</numero_registro>');
    arreglo.push('<codigo_postal>'+ cp +'</codigo_postal>');
    lq.forEach(element => {
        arreglo.push("<agente_relacionado>");
            
            let element2 = element.sucursales[0];
            
                arreglo.push("<tipo_persona>");
                switch (element2.tipoPersona) {
                    case "PM":
                        arreglo.push("<persona_moral>");
                        arreglo.push("<denominacion_razon>"+ element2.nombre_agente + "</denominacion_razon>");
                        arreglo.push("<rfc>"+ element2.rfc_agente +"</rfc>");
                        arreglo.push("<giro_mercantil>"+ element2.actividad_economica_agente +"</giro_mercantil>");
                        arreglo.push("<apoderado_legal>");
                            arreglo.push("<nombre>"+ element2.nombre_apoderado +"</nombre>");
                            arreglo.push("<apellido_paterno>"+ element2.apellido_paterno_apoderado +"</apellido_paterno>");
                            if(element2.apellido_materno_apoderado!=""){
                                arreglo.push("<apellido_materno>"+ element2.apellido_materno_apoderado +"</apellido_materno>");
                            }
                            arreglo.push("<rfc>"+ element2.rfc_apoderado +"</rfc>");
                            arreglo.push("<curp>"+ element2.curp_apoderado + "</curp>");
                        arreglo.push("</apoderado_legal>");
                        arreglo.push("</persona_moral>");
                        break;
                    case "PF":
                        arreglo.push("<persona_fisica>");
                            arreglo.push("<nombre>"+ element2.nombre_agente_pf + "</nombre>");
                            arreglo.push("<apellido_paterno>"+ element2.apaterno_agente_pf + "</apellido_paterno>");
                            if(element2.amaterno_agente_pf!=""){
                                arreglo.push("<apellido_materno>"+ element2.amaterno_agente_pf +"</apellido_materno>");
                            }
                            arreglo.push("<rfc>"+ element2.rfc_agente +"</rfc>");
                            arreglo.push("<curp>"+ element2.curp_agente +"</curp>");
                            arreglo.push("<pais_nacimiento>"+ element2.pais_nacimiento_agente + "</pais_nacimiento>");
                            arreglo.push("<pais_nacionalidad>"+ element2.nacionalidad_agente + "</pais_nacionalidad>");
                        arreglo.push("</persona_fisica>");
                        break;
                    default:
                        break;
                }
                arreglo.push("</tipo_persona>");
                arreglo.push("<domicilio>");

                let strs0 = element2.asentamiento_agente == null ? '' :  element2.asentamiento_agente.substr(0,40);
                let strC0 = element2.calle_agente == null ? '' :  element2.calle_agente.substr(0,70);
                let strm0 = element2.municipio_agente == null ? '' :  element2.municipio_agente.substr(0,70);
                let stre0 = element2.no_ext_agente == null ? '' :  element2.no_ext_agente.substr(0,40);
                

                    arreglo.push("<entidad_federativa>" + element2.cod_estado_agente + "</entidad_federativa>");
                    arreglo.push("<codigo_postal>" + element2.cp_agente + "</codigo_postal>");
                    arreglo.push("<ciudad_poblacion>" + strm0 + "</ciudad_poblacion>");
                    arreglo.push("<delegacion_municipio>" + element2.cod_estado_municipio_agente + "</delegacion_municipio>");
                    arreglo.push("<colonia>" + strs0 + "</colonia>");
                    arreglo.push("<calle>" + strC0 + "</calle>");
                    arreglo.push("<numero_exterior>" + stre0  + "</numero_exterior>");
                    if(element2.no_int_agente!=""){
                        let stri0 = element2.no_int_agente == null ? '' :  element2.no_int_agente.substr(0,40);
                        arreglo.push("<numero_interior>" + stri0 + "</numero_interior>");
                    }
                    arreglo.push("<telefono>");
                        arreglo.push("<numero_telefono>"+ element2.telefono_agente +"</numero_telefono>");
                    arreglo.push("</telefono>");
                    if(element2.email_agente.trim()!=""){
                        arreglo.push("<correo_electronico>"+ element2.email_agente +"</correo_electronico>");
                    }
                arreglo.push("</domicilio>");
                
                
                arreglo.push("<sucursales>");
                arreglo.push("<numero_sucursales>" + element.totalSucursales + "</numero_sucursales>");
                    element.sucursales.forEach(element3 => {
                        let strs = element3.asentamiento_sucursal == null ? '' :  element3.asentamiento_sucursal.substr(0,40);
                        let strC = element3.calle_sucursal == null ? '' :  element3.calle_sucursal.substr(0,70);
                        let strm = element3.municipio_sucursal == null ? '' :  element3.municipio_sucursal.substr(0,70);
                        let stre = element3.no_ext_sucursal == null ? '' :  element3.no_ext_sucursal.substr(0,40);
                        let stri = element3.no_int_sucursal == null ? '' :  element3.no_int_sucursal.substr(0,40);
                        arreglo.push("<domicilio_sucursales>");
                            arreglo.push("<entidad_federativa>" + element3.cod_estado_sucursal + "</entidad_federativa>");
                            arreglo.push("<codigo_postal>" + element3.cp_sucursal + "</codigo_postal>");
                            arreglo.push("<ciudad_poblacion>" + strm + "</ciudad_poblacion>");
                            arreglo.push("<delegacion_municipio>" + element3.cod_estado_municipio_sucursal + "</delegacion_municipio>");
                            arreglo.push("<colonia>" + strs + "</colonia>");
                            arreglo.push("<calle>" + strC + "</calle>");
                            arreglo.push("<numero_exterior>" + stre + "</numero_exterior>");
                            if(element3.no_int_sucursal!=""){
                                arreglo.push("<numero_interior>" + stri + "</numero_interior>");
                            }
                        arreglo.push("</domicilio_sucursales>");
                    });    
                arreglo.push("</sucursales>");
                arreglo.push("<actividad_agente>");
                    arreglo.push("<clave_actividad_preponderante>"+ element2.actividad_preponderante_agente +"</clave_actividad_preponderante>");
                arreglo.push("</actividad_agente>");
                arreglo.push("<estatus_agente>");
                if (element2.status_agente=="1"){
                    arreglo.push("<agente_activo>");
                        arreglo.push("<fecha_activo>"+ element2.fecha_actividad_agente +"</fecha_activo>");
                    arreglo.push("</agente_activo>");
                }else{
                    arreglo.push("<agente_inactivo>");
                        arreglo.push("<fecha_inactivo>"+ element2.fecha_baja_agente +"</fecha_inactivo>");
                    arreglo.push("</agente_inactivo>");
                }
                arreglo.push("</estatus_agente>");  
            
            arreglo.push("</agente_relacionado>");
    });     
    arreglo.push("</aviso>");
    
    res.setHeader("Content-disposition", "attachment; filename=" + "AR_" + alias + "_" + anio + "." + formato);
    res.setHeader("Content-type", "text/plain");
    res.charset = "UTF-8";
    arreglo.forEach(element => {
        res.write(element + "\r\n");
    });
    
    res.end();

  });

router.get("/pld/find-pbloq", isLoggedIn , async (req, res)=>{ 
    let result_tipo_persona = await CatalogosBD.ReportesReg_Cat_tipo_persona();
    let fecha_actualizacion = await CatalogosBD.Get_fecha_actualizacion_plb(req.user.IdEmpresaCliente);
    var resultListas  =  await CatalogosBD.Cat_tipo_lista_interna();
    let parametrosBusqueda = req.session.parametroBusquedaPersonasBloqueadas;
    let resultlistado = {};
    if(parametrosBusqueda != undefined){
        let sql = get_consulta_personas_bloqueadas(req, parametrosBusqueda);
        resultlistado = await pool.query( sql);
    }
    res.render("pld/consulta-persona-bloqueada", {result_tipo_persona, resultListas, resultlistado, parametrosBusqueda , fecha_actualizacion });    
});
   
router.post("/pld/find-pbloq", isLoggedIn, async (req, res)=>{ 
    let result_tipo_persona = await CatalogosBD.ReportesReg_Cat_tipo_persona();
    var resultListas  =  await CatalogosBD.Cat_tipo_lista_interna();
    let fecha_actualizacion = await CatalogosBD.Get_fecha_actualizacion_plb(req.user.IdEmpresaCliente);
    
    let parametrosBusqueda = get_request_personas_bloqueadas(req);
    let sql = get_consulta_personas_bloqueadas(req, parametrosBusqueda);
    let resultlistado = await pool.query(sql);
    res.render("pld/consulta-persona-bloqueada", {result_tipo_persona, resultListas, resultlistado, parametrosBusqueda, fecha_actualizacion });  
});

router.all("/pld/add-person-list/add-disc", isLoggedIn, async (req, res)=>{ 
    var page ="pld/add-nueva-persona-disclaimer";
    res.render(page);    
});


router.all("/pld/add-person-list/add", isLoggedIn, async (req, res)=>{ 
    let result_tipo_persona = await CatalogosBD.ReportesReg_Cat_tipo_persona();
    var resultListas  =  await CatalogosBD.Cat_tipo_lista_interna();
    var result_pais   =  await CatBD.Cat_paises();
    var page ="pld/add-nueva-persona";
    let dt = {action:"A"}
    
    res.render(page, {result_tipo_persona, resultListas,result_pais, dt});    
});


router.all("/pld/add-person-list/edit", isLoggedIn, async (req, res)=>{ 
    let registro = {};
    let data = {};
    let result_Motivos = [];
    var idRegistro = req.query.hfidnva;
    let result_tipo_persona = await CatalogosBD.ReportesReg_Cat_tipo_persona();
    var resultListas  =  await CatalogosBD.Cat_tipo_lista_interna();
    var result_pais   =  await CatBD.Cat_paises();
    //usp_getDetalleAlias
    var page ="pld/add-nueva-persona";
    
    let params_alias = [req.user.IdEmpresaCliente,idRegistro];
    detalle = await pool.query("call usp_getDetalleAlias(?)", [params_alias]);
    resultadoAlias = detalle[0];
    
    let registroEditar = await CatalogosBD.Get_Registro_persona_bloqueada(req, idRegistro);    
    registroEditar.forEach(element => {registro = element;});    
    data = fn_getdata_add_person_list_BD(registro);
    if(data.status == 0){  result_Motivos = [{id: 1, descripcion : "ACTIVO"}] }else{  result_Motivos = [{id: 0, descripcion : "INACTIVO"}]};
    let dt = {action:"C", id: idRegistro }
    res.render(page, {result_tipo_persona, resultListas,result_pais, dt, data, result_Motivos, resultadoAlias});    
});


function fn_getdata_add_person_list_BD(reg){
    let data = {
        id : reg.Folio,
        tipo_persona : reg.tipo_persona,
        oficio : reg.no_oficio,
        fecha_publicacion_formato : reg.fec_publicacion_formato,
        fecha_publicacion_base : "",
        fecha_oficio_formato : reg.fec_oficio_formato,
        fecha_oficio_base : "",
        tipo_lista : reg.tipo_lista,
        razon_social : reg.razon_social,
        nombre :  reg.Nombre,
        apaterno :  reg.apaterno,
        amaterno  : reg.amaterno,
        rfc : reg.rfc,
        fechaNacimiento_formato : reg.fec_nac_con_formato,
        fechaNacimiento_base : "",
        genero : reg.genero,
        pais : reg.cod_pais_dom,
        ciudad : reg.ciudad_dom,
        direccion : reg.direccion_dom,
        status_des : reg.status_des,
        status : reg.status,
        acuerdo : reg.acuerdo,
        curp : reg.curp,
        oficio_siara : reg.oficio_siara,
        anio : reg.anio,
        comite : reg.comite,
        observaciones : reg.observaciones
    };
        console.log(data);
        return data;
}

function fn_getdata_add_person_list(req){
    let data = {
        id : req.body.hfidnva,
        tipo_persona : req.body.cboTipoPersona,
        oficio : req.body.txtOficio,
        acuerdo : req.body.txtAcuerdo.toUpperCase(),
        fecha_publicacion_formato : req.body.txtFechaPublicacion,
        fecha_publicacion_base : req.body.txtFechaPublicacion, // == "" ? null : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaPublicacion),
        fecha_oficio_formato : req.body.txtFechaOficio,
        fecha_oficio_base : req.body.txtFechaOficio, // == "" ? null : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaOficio),
        tipo_lista : req.body.cboTipoLista,
        razon_social : req.body.txtRazonSocial== undefined ? "" : req.body.txtRazonSocial.toUpperCase(),
        nombre :  req.body.txtNombre== undefined ? "" : req.body.txtNombre.toUpperCase(),
        apaterno :  req.body.txtApaterno== undefined ? "" : req.body.txtApaterno.toUpperCase(),
        amaterno  : req.body.txtAmaterno== undefined ? "" : req.body.txtAmaterno.toUpperCase(),
        rfc : req.body.txtRFC.toUpperCase(),
        fechaNacimiento_formato : req.body.txtFechaConstitucion,
        fechaNacimiento_base : req.body.txtFechaConstitucion, //== "" ? null : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaConstitucion),
        genero : req.body.cboGenero == undefined ? "" : req.body.cboGenero.toUpperCase(),
        pais : req.body.cboPais,
        ciudad : req.body.txtCiudad.toUpperCase(),
        direccion : req.body.txtDireccion.toUpperCase(),
        curp :  req.body.txtCURP== undefined ? "" : req.body.txtCURP.toUpperCase(),
        oficio_siara :  req.body.txtOficioSiara.toUpperCase(),
        anio :  req.body.txtAnio.toUpperCase(),
        comite  : req.body.txtComite== undefined ? "" : req.body.txtComite.toUpperCase(),
        observaciones  : req.body.txtObservaciones== undefined ? "" : req.body.txtObservaciones.toUpperCase(),
        };
        console.log(data);
        return data;
}

function fn_setdata_add_person_list(req, data){
    let id_persona = '0';
    if(data.id !=''){
        id_persona = data.id;
    }
    let params = [
        req.user.IdEmpresaCliente,
        id_persona,
        data.tipo_persona,
        data.nombre,
        data.apaterno,
        data.amaterno,
        data.razon_social,
        data.rfc,
        data.genero,
        data.fechaNacimiento_base,
        data.oficio,
        data.fecha_publicacion_base, 
        data.fecha_oficio_base,
        data.tipo_lista,
        data.pais,
        data.ciudad,
        data.direccion,
        req.user.IdUser, 
        req.user.IdEmpresa,
        data.acuerdo,
        data.curp,
        data.oficio_siara,
        data.anio,
        data.comite,
        data.observaciones
    ];
    console.log(params);
    return params
}

router.post("/pld/add-person-list/process", isLoggedIn, async (req, res)=>{ 

    let data = fn_getdata_add_person_list(req); //Recuperamos data del POST
    let params = fn_setdata_add_person_list(req, data); // Asignamos los Parametros
    let resultadoAlias = {};
    main :{
        try {
            var result = await pool.query("call usp_gestiona_lista_interna(?)", [params]);
            let r =result[0];
            if((r[0]).code=="00"){
                let cod_persona = r[0].cod_persona;
                tipomensaje = "success_msg";
                mensajeSalida = r[0].msg;
                req.flash(tipomensaje, mensajeSalida);
                res.redirect("/pld/add-person-list/edit?hfidnva=" + cod_persona);
                break main;
            }else{
                tipomensaje = "error_msg";
                mensajeSalida = r[0].msg;
                error_msg = mensajeSalida;
            };

            let params_alias = [req.user.IdEmpresaCliente,cod_persona];
            let detalle = await pool.query("call usp_getDetalleAlias(?)", [params_alias]);
            resultadoAlias = detalle[0];
        
        } catch (error) {
            tipomensaje = "error_msg";
            mensajeSalida = "Error al tratar de guardar el reporte - " + error;
            error_msg = mensajeSalida;
        }

        let result_tipo_persona = await CatalogosBD.ReportesReg_Cat_tipo_persona();
        var resultListas  =  await CatalogosBD.Cat_tipo_lista_interna();
        var result_pais   =  await CatBD.Cat_paises();

        

        var page ="pld/add-nueva-persona";
        let dt = {action:"C"}
        res.render(page, {error_msg, result_tipo_persona, resultListas,result_pais, dt, data, resultadoAlias});    
    }
});


function get_request_personas_bloqueadas(req){
    
    let parametros = {
        id : req.body.txtPersona,
        tipo_persona : req.body.cboTipoPersona,
        oficio : req.body.txtOficio,
        acuerdo : req.body.txtAcuerdo,
        //fechaInicio : req.body.hfstartDate != "" ? fn.ConvierteFechaFormatoBase(req.body.hfstartDate) : "",
        //fechaFin : req.body.hfendDate !="" ? fn.ConvierteFechaFormatoBase(req.body.hfendDate) : "",
        //fechaInicio_st : req.body.hfstartDate != "" ? req.body.hfstartDate : "",
        //fechaFin_st : req.body.hfendDate !="" ? req.body.hfendDate : "",
        tipo_lista : req.body.cboTipoLista,
        razon_social : req.body.txtRazonSocial== undefined ? "" : req.body.txtRazonSocial.toUpperCase(),
        rfc : req.body.txtRFC.toUpperCase(),
        //fechaNacimiento_formato : req.body.txtFechaConstitucion,
        //fechaNacimiento_base : req.body.txtFechaConstitucion == "" ? '' : fn.ConvierteFechaFormato_yyyyMMdd(req.body.txtFechaConstitucion),
        //curp : "",
        //oficio_siara : "",
        //anio : ""
        status : req.body.cboStatus == undefined ? "" : req.body.cboStatus
        };

    req.session.parametroBusquedaPersonasBloqueadas = parametros;
    return parametros;    
}

function get_consulta_personas_bloqueadas(req, data){
    main : {
        let sql = "Select * from vw_persona_bloqueadas where cod_empresa = '"+ req.user.IdEmpresaCliente +"'"
        sql = sql + (data.id !="" ? " and Folio = '"+ data.id + "'": "");
        sql = sql + (data.tipo_persona !="" ? " and tipo_persona = '"+ data.tipo_persona + "'": "");
        //sql = sql + (data.razon_social !="" ? " and nombre_persona like '%"+ data.razon_social + "%'": "");
        sql = sql + (data.razon_social !="" ? " and ((nombre_persona like '%"+ data.razon_social + "%') or (substring(Nombre,1,3) = substring(replace('"+ data.razon_social+ "',' ',''),1,3) and LEVENSHTEIN_PERCENT(upper(replace(replace(replace(concat(trim(Nombre), trim(ifnull(trim(apaterno),'')), trim(ifnull(amaterno,''))),' ',''),'-',''),'´','')), upper(replace('" + data.razon_social + "',' ','')) ) > 80))": "");
        sql = sql + (data.oficio !="" ? " and no_oficio like '%"+ data.oficio + "%'": "");
        sql = sql + (data.acuerdo !="" ? " and acuerdo like '%"+ data.acuerdo + "%'": "");
        sql = sql + (data.rfc !="" ? " and rfc like '%"+ data.rfc + "%'": "");
        sql = sql + (data.tipo_lista !="" ? " and tipo_lista = '"+ data.tipo_lista + "'": "");
        sql = sql + (data.status !="" ? " and status = '"+ data.status + "'": "");
        // sql = sql + (data.fechaInicio !="" && data.fechaFin ? " and DATE(fec_publicacion) between '"+ data.fechaInicio +"' and '"+ data.fechaFin + "'" : "");
        // sql = sql + (data.fechaNacimiento_base !="" ? " and fec_nac_con  = '"+ data.fechaNacimiento_base + "'": "");
        sql = sql + " order by Folio asc";
        console.log(sql);
        
        return sql;
    }
}

router.post('/pld/giro/add-person-list/history', async (req, res)=>{ 
    let folio = req.body.fol;
    console.log(folio);
    console.log(req.user.IdEmpresaCliente);
    const historial = await pool.query("select Folio,status,observaciones,fecha_registro,status_des,usuario,tipo_movimiento from vw_persona_bloqueadas_status  where cod_empresa = ? and Folio = ? order by fec_insert desc", [req.user.IdEmpresaCliente, folio] );
    console.log(historial);
    let data = {
        result : historial
    }
    res.send(data);
});

router.post('/pld/add-person-list/addAlias', async (req, res)=>{ 
        let id = req.body.id;
        let descripcion = req.body.descripcion;
        let Params = [req.user.IdEmpresaCliente, id, descripcion, req.user.IdUser, req.user.IdEmpresa ];
        let r = {};
        await pool.query("Call usp_agrega_alias_lista_interna(?);", [Params]).then(function(result){
        console.log(result.length);
        if(result.length==2){
            let dt = result[0];
            r = { code : dt[0].code, msg: dt[0].msg, idgenerado: dt[0].idgenerado } ;
            res.send(r);
        }else{
            r = { code : "98", msg: "Error al tratar de registrar los datos para la regla"} ;
            res.send(r);
        }
    }).catch(function(err){
        r = { code : "99", msg: err + "Error al tratar de registrar los datos para esta regla" } ;
        res.send(r);
    });

});

router.post('/pld/add-person-list/delAlias', isLoggedIn, async (req, res)=>{ 
    let Folio = req.body.id;
    let idregistro = req.body.idF;
    let data = [req.user.IdEmpresaCliente, Folio, idregistro, req.user.IdUser, req.user.IdEmpresa ];
    let r = {};
    await pool.query("Call usp_DeleteRegistroAlias(?);", [data]).then(function(result){
        console.log(result.length);
        if(result.length==2){
            let dt = result[0];
            r = { code : dt[0].code, msg: dt[0].msg } ;
            res.send(r);
        }else{
            r = { code : "98", msg: "Error al tratar de eliminar el registro"};
            res.send(r);
        }
    }).catch(function(err){
        r = { code : "99", msg: err + "Error al tratar de registrar los datos para esta regla" } ;
        res.send(r);
    });

});



router.all('/pld/add-person-list/cambiostatus', isLoggedIn, async (req, res)=>{ 
    let detalleRemesa = {};
    let result_Motivos = {};
    
    let mensajeSalida ="";
    let tipomensaje ="";
    let showMensaje = false;
    let idMov = "";
    main : {
        if(!req.body.hfidnva){
            if(!req.query.hfidnva){
                req.flash("error_msg", "Debes seleccionar a la persona la cual deseas cambiar el status");
                res.redirect("/pld/find-pbloq");
                break main;
            }else{
                idMov = req.query.hfidnva;
            }
        }else{
            idMov = req.body.hfidnva;
        }
    
        if(idMov == ""){
            req.flash("error_msg", "Debes seleccionar a la persona la cual deseas cambiar el status");
            res.redirect("/pld/find-pbloq");
            break main;
        }
        // Recuperamos el status
        let obs = req.body.txtMotivo;
        let sts = req.body.cboTipoC;
        

        let Params = [req.user.IdEmpresaCliente, idMov, sts, obs, req.user.IdUser, req.user.IdEmpresa ];
        console.log(Params);
        var result = await pool.query("call usp_cambia_status_lista_interna (?)", [Params]);
        let r =result[0];
        if((r[0]).code=="00"){
            tipomensaje = "success_msg";
            mensajeSalida = r[0].msg;
            req.flash(tipomensaje, mensajeSalida);
            res.redirect("/pld/add-person-list/edit?hfidnva=" + idMov);    
        }else{
            mensajeSalida = r[0].msg;
            tipomensaje = "error_msg";
            let registro = {};
            let data = {};
            let result_Motivos = [];
            var idRegistro = req.query.hfidnva;
            let result_tipo_persona = await CatalogosBD.ReportesReg_Cat_tipo_persona();
            var resultListas  =  await CatalogosBD.Cat_tipo_lista_interna();
            var result_pais   =  await CatBD.Cat_paises();
            var page ="pld/add-nueva-persona";
            
            let registroEditar = await CatalogosBD.Get_Registro_persona_bloqueada(req, idRegistro);    
            registroEditar.forEach(element => {registro = element;});    
            data = fn_getdata_add_person_list_BD(registro);
            if(data.status == 0){  result_Motivos = [{id: 1, descripcion : "ACTIVO"}] }else{  result_Motivos = [{id: 0, descripcion : "INACTIVO"}]};
            let dt = {action:"C", id: idRegistro }
            req.flash(tipomensaje, mensajeSalida);
            res.render(page, {result_tipo_persona, resultListas,result_pais, dt, data, result_Motivos});    
        }
    }
});

router.get('/pld/add-person-list/add-masive', isLoggedIn, async (req, res)=>{ 
    res.render("pld/add-nueva-persona-masiva", {});   
});

var type = upload.single('flUpload');
router.post('/pld/add-person-list/masiveLoadProcess', isLoggedIn, type, async (req, res)=>{ 
    let RegistrosExitosos = [];
    req.session.RegistrosExistosos = [];
    let errores = [];
    let datosExcel = [];
    
    main :{
            if (req.file == undefined) {
                error_msg = "Por favor sube un archivo de excel";
                res.render("/persona-moral/generacion-envios",{error_msg});
                break main;
            }    
            let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
            let dtxls = await readXlsxFile(path);
                dtxls.shift();
                
                let inicio_fila = 1;
                let contador = 1;
                dtxls.forEach((row) =>  {
                    let datos = {}
                    if(contador >= 0){
                        console.log(row);
                        datos = {
                            id: "",
                            tipo_persona : fn.CleanValue(String(row[0]),"INT", false, ""),    
                            oficio : fn.CleanValue(String(row[1]),"GENERAL", false, ""),    
                            acuerdo : fn.CleanValue(row[2],"GENERAL", false, ""),    
                            fecha_publicacion_base : fn.CleanValue(row[3],"GENERAL", false, ""),    
                            fecha_oficio_base : fn.CleanValue(row[4],"GENERAL", false, ""),
                            tipo_lista : fn.CleanValue(row[5],"INT", false, ""),
                            rfc : fn.CleanValue(row[6],"GENERAL", false, ""),
                            nombre : fn.CleanValue(row[7],"GENERAL", false, ""),
                            apaterno : fn.CleanValue(row[8],"GENERAL", false, ""),
                            amaterno : fn.CleanValue(row[9],"GENERAL", false, ""),
                            razon_social : fn.CleanValue(row[10],"GENERAL", false, ""),
                            fechaNacimiento_base : fn.CleanValue(row[11],"GENERAL", false, ""),
                            genero : fn.CleanValue(row[12],"GENERAL", false, ""),
                            pais : fn.CleanValue(row[13],"GENERAL", false, ""),
                            ciudad : fn.CleanValue(row[14],"GENERAL", false, ""),
                            direccion : fn.CleanValue(row[15],"GENERAL", false, ""),
                            alias : fn.CleanValue(row[16],"GENERAL", false, ""),
                            curp : fn.CleanValue(row[17],"GENERAL", false, ""),
                            oficio_siara : fn.CleanValue(row[18],"GENERAL", false, ""),
                            anio : fn.CleanValue(row[19],"GENERAL", false, ""),
                            comite : fn.CleanValue(row[20],"GENERAL", false, ""),
                            observaciones : fn.CleanValue(row[21],"GENERAL", false, ""),
                            cod_usuario_registro : req.user.IdUser, 
                            cod_empresa_registro : req.user.IdEmpresa,

                        }
                        console.log(datos);

                        let resultado = ValidaRegistroAlias(datos);

                        
                        

                        if(resultado.code != "00")
                        {
                            errores.push({
                                code : "01",
                                IDregistro: contador,
                                descripcion : resultado.descripcion,
                                columna : resultado.columna,
                                registro : datos
                            });  

                        }else{

                            if(datos.fecha_publicacion_base ==''){datos.fecha_publicacion_base = null;} 
                            if(datos.fechaNacimiento_base ==''){datos.fechaNacimiento_base = null;} 
                            if(datos.fecha_oficio_base ==''){datos.fecha_oficio_base = null;} 

                            datosExcel.push({
                                code : "00",
                                IDregistro: contador,
                                descripcion : resultado.descripcion,
                                columna : resultado.columna,
                                registro : datos
                            });            
                        }
                    }
                  contador ++;
                });

            if(datosExcel.length>0){
                for(let elem of datosExcel) {
                    try {
                        let params = fn_setdata_add_person_list(req, elem.registro);
                        let response = await pool.query("call usp_gestiona_lista_interna(?)", [params]); 
                        let r = response[0];
                        
                        if(r[0].code=="00"){
                            RegistrosExitosos.push(
                            {
                                code : "00",
                                IDregistro: elem.IDregistro,
                                descripcion : elem.descripcion,
                                columna : elem.columna,
                                cod_remesa : r[0].claveCobro,
                                registro : elem.registro
                            });

                              // Registramos alias si los tiene
                              
                                var alias_lt =  elem.registro.alias;
                                if(alias_lt!=""){
                                    var alias = alias_lt.split(',');
                                    console.log("Alias:");
                                    console.log(alias);
                                    alias.forEach(async (row_a) => {
                                        try {
                                            let datos_alias = [req.user.IdEmpresaCliente, r[0].cod_persona, row_a, req.user.IdUser, req.user.IdEmpresa ];
                                            console.log(datos_alias);
                                            let rq = await pool.query("Call usp_agrega_alias_lista_interna(?);", [datos_alias]);
                                        } catch (error) {
                                        
                                        } 
                                    });
                                }
                        }else{
                                errores.push(
                                {
                                    code : "01",
                                    IDregistro: elem.IDregistro,
                                    descripcion : r[0].msg,
                                    columna : elem.columna,
                                    cod_beneficiario : 0,
                                    registro : elem.registro
                                });
                        }                    
                    } catch (error) {
                        errores.push(
                        {
                            code : "01",
                            IDregistro: elem.IDregistro,
                            descripcion : error,
                            columna : elem.columna,
                            cod_beneficiario : 0,
                            registro : elem.registro
                        });
                    }
                }
            }
            RegistrosExitosos = fn.filtraArrayPorElemento(RegistrosExitosos, "code", "00");
            
            let message = "";
            let success_message = "";
            let alert_message = "";
            
            if((RegistrosExitosos.length == 0)&&(errores.length == 0)){
                message = "Error al procesar el archivo, intente de nuevo";                
            }else if((RegistrosExitosos.length == 0)&&(errores.length > 0)){
                message = "No se pudo cargar ningun registro a la lista de personas bloqueadas, favor de verificar la información ingresada";
            }else if((RegistrosExitosos.length > 0)&&(errores.length == 0)){
                success_message = "Registro(s) cargado(s) exitósamente!"
            }else{
                alert_message = "No se han  cargado algunos registros  a la lista de personas bloqueadas, ver el detalle de errores en la tabla indicada.<br> registros cargados correctamente: "+ RegistrosExitosos.length ; 
            }

            res.render("pld/add-nueva-persona-masiva",{ message, alert_message, success_message, datosExcel, errores});   
    }  
}); 

function ValidaRegistroAlias(dato){
    let result = {
        code : "00",
        descripcion : "", 
        columna :0
    }

    if(dato.tipo_persona != "1" && dato.tipo_persona != "2"){
        result.code = "01";
        result.descripcion = "Tipo de persona obligatorio";
        result.columna = 0;
        return result;
    }

    if(dato.oficio.length > 150){
        result.code = "01";
        result.descripcion = "Longitud del no. de oficio incorrecta";
        result.columna = 1;
        return result;
    }

    if(dato.oficio_siara.length > 150){
        result.code = "01";
        result.descripcion = "Longitud del no. de oficio siara incorrecta";
        result.columna = 18;
        return result;
    }

    if(dato.acuerdo.length > 150){
        result.code = "01";
        result.descripcion = "Longitud del no. de acuerdo incorrecto";
        result.columna = 2;
        return result;
    }
    if(dato.fecha_publicacion_base != "" && (dato.fecha_publicacion_base.length < 4 || dato.fecha_publicacion_base.length > 100)){
        result.code = "01";
        result.descripcion = "Longitud de la fecha de publicación incorrecta ";
        result.columna = 3;
        return result;
    }
    if(dato.fecha_oficio_base != "" && (dato.fecha_oficio_base.length < 4 || dato.fecha_oficio_base.length > 100)){
        result.code = "01";
        result.descripcion = "Longitud de la fecha de oficio incorrecta ";
        result.columna = 4;
        return result;
    }

    if(dato.tipo_lista > 6){
        result.code = "01";
        result.descripcion = "Tipo de lista incorrecta ";
        result.columna = 5;
        return result;
    }

    if(dato.rfc !="" && (dato.rfc.length < 9  || dato.rfc.length > 100)){
        result.code = "01";
        result.descripcion = "Longitud del RFC incorrecta";
        result.columna = 6;
        return result;
    }
    if(dato.tipo_persona == "1"){
        if(dato.nombre ==""){
            result.code = "01";
            result.descripcion = "Nombre obligatorio";
            result.columna = 7;
            return result;
        }
        if(dato.apaterno !="" && dato.apaterno.length > 50){
            result.code = "01";
            result.descripcion = "Longitud del apellido paterno incorrecta";
            result.columna = 8;
            return result;
        }
        if(dato.amaterno !="" && dato.amaterno.length > 50){
            result.code = "01";
            result.descripcion = "Longitud del apellido materno incorrecta";
            result.columna = 9;
            return result;
        }
        if(dato.genero !="" && (dato.genero != "M" && dato.genero != "F")){
            result.code = "01";
            result.descripcion = "Género incorrecto";
            result.columna = 12;
            return result;
        }
    }
    if(dato.tipo_persona == "2"){
        if(dato.razon_social ==""){
            result.code = "01";
            result.descripcion = "Razón Social obligatoria";
            result.columna = 10;
            return result;
        }
    }
    if(dato.fechaNacimiento_base != "" && (dato.fechaNacimiento_base.length < 3 || dato.fechaNacimiento_base.length > 250)){
        result.code = "01";
        result.descripcion = "Longitud de la fecha de nacimiento/constitución incorrecta ";
        result.columna = 11;
        return result;
    }
    if(dato.pais !="" && (dato.pais.length != 3 )){
        result.code = "01";
        result.descripcion = "Código de pais incorrecto";
        result.columna = 13;
        return result;
    }

    if(dato.ciudad !="" && (dato.ciudad.length > 50 )){
        result.code = "01";
        result.descripcion = "Longitud de ciudad incorrecta";
        result.columna = 14;
        return result;
    }
    if(dato.direccion !="" && (dato.direccion.length > 3000 )){
        result.code = "01";
        result.descripcion = "Longitud de dirección incorrecta";
        result.columna = 15;
        return result;
    }

    if(dato.comite !="" && (dato.comite.length > 100 )){
        result.code = "01";
        result.descripcion = "Longitud de Comité incorrecta";
        result.columna = 20;
        return result;
    }

    if(dato.curp !="" && (dato.curp.length < 18  || dato.curp.length > 100)){
        result.code = "01";
        result.descripcion = "Longitud del CURP incorrecta";
        result.columna = 17;
        return result;
    }

    return result;
}

router.get('/pld/config-campos-obl', isLoggedIn, async(req, res)=>{ 
    
    var sql2 = "select id_nivel, descripcion from niveles_monto where nivel_grupo = 1 order by id_nivel";
    let plantilla_niveles = await pool.query(sql2); 

    var sqlDatosEfectivo = "call usp_getCamposRequeridos(?,'P','02',1);"
    var sqlDatosDeposito = "call usp_getCamposRequeridos(?,'P','03',1);"
    
    let rs1 = await pool.query(sqlDatosEfectivo, [req.user.IdEmpresaCliente]);
    let rs2 = await pool.query(sqlDatosDeposito, [req.user.IdEmpresaCliente]);

    let reusltEfectivo = rs1[0];
    let reusltDeposito = rs2[0];

    res.render("pld/config-campos-obligatorios",{reusltEfectivo, reusltDeposito, plantilla_niveles});
});

router.get('/pld/config-campos-obl-envpf', isLoggedIn, async(req, res)=>{ 
    
    var sql2 = "select id_nivel, descripcion from niveles_monto where nivel_grupo = 1 order by id_nivel";
    let plantilla_niveles = await pool.query(sql2); 

    var sqlDatosEfectivo = "call usp_getCamposRequeridos(?,'EPF','02',1);"
    var sqlDatosDeposito = "call usp_getCamposRequeridos(?,'EPF','03',1);"
    
    let rs1 = await pool.query(sqlDatosEfectivo, [req.user.IdEmpresaCliente]);
    let rs2 = await pool.query(sqlDatosDeposito, [req.user.IdEmpresaCliente]);

    let reusltEfectivo = rs1[0];
    let reusltDeposito = rs2[0];

    res.render("pld/config-campos-obligatorios-transacciones",{reusltEfectivo, reusltDeposito, plantilla_niveles});
});

router.post('/pld/ajx/updCamposRequeridos',isLoggedIn,  async (req, res)=>{ 
    let campos =  JSON.parse(req.body.campos);
    let tipo_servicio = req.body.tiposervicio;
    let tipo_operacion = req.body.tipooperacion;
    let nivel_grupo = req.body.nivel_grupo;
    console.log(campos);
    //Eliminamos los registros 
    var sql = "delete from empresa_campos_requeridos where cod_empresa = ? and tipo_servicio = ? and tipo_operacion = ? and nivel_grupo = ?"
    let resultado = await pool.query(sql, [req.user.IdEmpresaCliente, tipo_servicio, tipo_operacion, nivel_grupo]);    
    for (let index = 0; index < campos.length; index++) {    
        if(campos[index]!=""){
            let arreglo = campos[index].split("|");
            var tabla ="";
            arreglo.forEach( async function(item){ 
                var registro = item.split("_");
                var a = registro[0];
                var b = registro[1];
                var c = registro[2];
                tabla ="insert into empresa_campos_requeridos (cod_empresa,id_campo,tipo_servicio,id_nivel,tipo_operacion, nivel_grupo) values(?,?,?,?,?,?)";
                let params = [req.user.IdEmpresaCliente, c, a, b, tipo_operacion, nivel_grupo];
                await pool.query(tabla, params);
                
            });
        }
        
    }
    res.send("OK");
  });
  
router.get('/pld/paises-rfp', isLoggedIn, async (req, res)=>{ 
    var result  =  await CatBD.Cat_paises_rfp(req);
    let result_pais = result[0];
    res.render("pld/paises-rfp", {result_pais});
});

router.post('/pld/ajx/updPaisesRPF',isLoggedIn,  async (req, res)=>{ 
    let campos =  JSON.parse(req.body.campos);

    var sql = "delete from paises_empresa_rfp where cod_empresa = ?"
    await pool.query(sql, [req.user.IdEmpresaCliente]);    
    for (let index = 0; index < campos.length; index++) {    
        if(campos[index]!=""){
            let arreglo = campos[index].split("|");
            var tabla ="";
            arreglo.forEach( async function(item){ 
                tabla ="insert into paises_empresa_rfp (cod_empresa,cod_pais) values(?,?)";
                let params = [req.user.IdEmpresaCliente, item];
                await pool.query(tabla, params);
            });
        }
        
    }
    res.send("OK");
  });


  router.get('/pld/paises-gafi', isLoggedIn, async (req, res)=>{ 
    var result  =  await CatBD.Cat_paises_gafi(req);
    let result_pais = result[0];
    res.render("pld/paises-gafi", {result_pais});
});

  router.post('/pld/ajx/updPaisesGAFI',isLoggedIn,  async (req, res)=>{ 
    let campos =  JSON.parse(req.body.campos);

    //Eliminamos los registros 
    var sql = "delete from paises_empresa_gafi where cod_empresa = ?"
    await pool.query(sql, [req.user.IdEmpresaCliente]);    
    for (let index = 0; index < campos.length; index++) {    
        if(campos[index]!=""){
            let arreglo = campos[index].split("|");
            var tabla ="";
            arreglo.forEach( async function(item){ 
                console.log(item);
                let dto = item.split(":");
                let pais = dto[0];
                let lista = dto[1];
                tabla ="insert into paises_empresa_gafi (cod_empresa,cod_pais,lista) values(?,?,?)";
                let params = [req.user.IdEmpresaCliente, pais, lista];
                await pool.query(tabla, params);
            });
        }
        
    }
    res.send("OK");
  });



module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\pld.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\remesas-cancelacion.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const Handlebars = require("handlebars");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const fnBitacora = require("../lib/bitacoras");
const fn_pld = require("../lib/reglas_pld_in");
const fnCatalogos = require("../lib/catalogosBD");
const consumoApi = require("../lib/Apis/api_notificaciones");
const catalogosBD = require("../lib/catalogosBD");
const proxy  = require("../lib/Apis/proveedores/Cancel.service");
const { repeatWithFinalize } = require("linq");
const url = require('url');
const bd = require("../lib/Apis/proveedores/bd");
// ========== PROCESO DE CANCELAION DE REMESA ==========

router.get('/remesas/cancelacionenvio', isLoggedIn, async (req, res)=>{ 
    deleteSesiones_cancelacion(req);
    res.render("remesas/cancelacion-envio-remesa");
});
router.all('/remesas/cancelacionenvio', isLoggedIn, async (req, res) => {  
    const cve_cobro = req.body.txtRemesa || req.query.idrefnumber || "";
    const { IdEmpresaCliente } = req.user;  
    const proxyInstance = new proxy.CancelService();  
    let result_motivos = await catalogosBD.Get_tipo_motivos_cancelacion_envio();

    const handleError = (msg) => {  return res.render("remesas/cancelacion-envio-remesa", { error_msg: msg , result_motivos });};  

    if (!cve_cobro.trim()) {  return handleError("La clave de cobro es requerida.");}  

    try {  
        const response = await proxyInstance.consulta_remesa_envio(IdEmpresaCliente, cve_cobro);  
        
        if (response.code !== "00") {  
            return handleError(`${response.msg}`);  
        }  
        let result_detalle = response.data;
        res.render("remesas/cancelacion-consulta-ordenes-detalle", {result_detalle, result_motivos});  
    } catch (error) {  
        return handleError(` ${error.message}`);  
    }  
});

router.all('/remesas/Processcancelacionenvio', isLoggedIn, async (req, res) => {  
    const {
      hfidnva: cve_cobro = "",
      hftrans: cod_transmisor = "",
      hfcorr: cod_corresponsal = "",
      hfpfx: prefijo_servicio = "",
      txtTicket: ticket = "",
      cboMotivo: motivo = "",
      txtObservaciones: observaciones = "",
      hfid: importe_destino = 0
    } = req.body;
    let data = {motivo : motivo, ticket : ticket, observaciones : observaciones};
    const handleError = async (msg) => { 
        let result_motivos = await catalogosBD.Get_tipo_motivos_cancelacion_envio();
         return res.render("remesas/cancelacion-consulta-ordenes-detalle", { error_msg: msg , result_motivos, data });};   
    const proxyInstance = new proxy.CancelService();  
    try {
        let params = proxyInstance.request_reversa_pago_remesa;
        params.cod_corresponsal = cod_corresponsal;
        params.cod_empresa = req.user.IdEmpresaCliente;
        params.cod_transmisor = cod_transmisor;
        params.cve_cobro = cve_cobro;
        params.motivo = motivo;
        params.observaciones = observaciones;
        params.prefijo_servicio = prefijo_servicio;
        params.no_ticket = ticket;
        params.cod_usuario = req.user.IdUser;
        params.cod_sucursal = req.user.cod_sucursal,
        params.nombre_usuario = req.user.Nombre,
        params.importe_destino = importe_destino
        console.log(params);
        const response = await proxyInstance.ejecuta_cancelacion_envio_remesa(params); 
        if (response.code !== "00") {  
            return handleError(`${response.msg}`);  
        }  
        req.session.despago = params;
        res.redirect("/remesas/comprobante-cancelacion"); 
    } catch (error) {
        return handleError(` ${error.message}`);  
    }

});
router.all('/remesas/comprobante-cancelacion', isLoggedIn, async (req, res)=>{
    let tipo_operacion = 'CE';// Cancelacion de envio
    if(!req.session.despago)
    {
        res.redirect("/menu");
    };

    //Devolvemos datos de recibo
    const re = await fnCatalogos.recibo_by_sucursal(req, req.session.despago.cod_transmisor,  tipo_operacion);
    let request = [req.user.IdEmpresaCliente, req.session.despago.cve_cobro, true, tipo_operacion];
    const reciboCte = await pool.query("call usp_getReciboEnvio (?)",[request]);
    var templateScript = Handlebars.compile(re[0].recibo);
    let dtosBitacora = req.session.despago;
    if(reciboCte.length == 2){
        let item = reciboCte[0];
        if (item[0].code =="00"){
            req.flash("alert_message", "Se ha superado el limite de impresiones de recibo");

            /* Registramos en bitacora */
            
            fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
            fnBitacora.cod_transmisor = dtosBitacora.cod_transmisor;
            fnBitacora.cod_corresponsal = dtosBitacora.cod_corresponsal;
            fnBitacora.cve_cobro = dtosBitacora.cve_cobro;
            fnBitacora.observaciones = 'LIMITE DE IMPRESION DE RECIBOS SUPERADOS EN LA SUCURSAL '+ req.user.sucursal;
            fnBitacora.id_usuario = req.user.IdUser;
            fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
            fnBitacora.Registra_MovimientoRemesa();
            /* Registramos en bitacora */

            delete req.session.despago;
            res.redirect('/menu');
        }
          var importe_recibir_beneficiario_letra = fn.numeroALetras(item[0].importe_recibir_beneficiario, {
            plural: 'PESOS',
            singular: 'PESO'
           
          });
          var divisaMP = item[0].divisa_origen == "USD" ? "DOLARES" : "PESOS";
          var divisaMS = item[0].divisa_origen == "USD" ? "DOLAR" : "PESO";
          var importe_origen_letra = fn.numeroALetras(item[0].importe_origen, {
            plural: divisaMP,
            singular: divisaMS
           
        });
        var context = { 
            "clave_envio" : item[0].clave_envio,
            "nombre_agencia_creacion" : item[0].nombre_agencia_creacion,
            "sucursal_creacion" : item[0].sucursal_creacion,
            "nombre_cajero" : item[0].nombre_cajero,
            "fecha_operacion" : item[0].fecha_operacion,
            "nombre_beneficiario" : item[0].nombre_beneficiario,
            "nombre_remitente" : item[0].nombre_remitente,
            "importe_recibir_beneficiario" : fn.FormatCurrency("es-MX", "MXN", 2, item[0].importe_recibir_beneficiario),
            "iva" : fn.FormatCurrency("es-MX", "MXN", 2, item[0].iva),
            "importe_cobrado_cliente" : fn.FormatCurrency("es-MX", "MXN", 2,item[0].importe_cobrado_cliente),
            "pais_destino" : item[0].pais_destino,
            "agencia_destino" : item[0].agencia_destino,
            "sucursal_destino" : item[0].sucursal_destino,
            "importe_recibir_beneficiario_letra" : importe_recibir_beneficiario_letra,
            "importe_cobrado_cliente_letra" : importe_cobrado_cliente_letra,
            "comision_envio" : item[0].comision_envio,
            "identificacion_remitente" : item[0].identificacion_remitente,
            "folioId_remitente" : item[0].folioId_remitente,
            "pais_origen" : item[0].pais_origen,
            "divisa_origen" : item[0].divisa_origen,
            "cuenta_beneficiario" : item[0].cuenta_beneficiario,
            "banco_beneficiario" : item[0].banco_beneficiario
        };

         /* Registramos en bitacora */
         
         fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
         fnBitacora.cod_transmisor = dtosBitacora.cod_transmisor;
         fnBitacora.cod_corresponsal = dtosBitacora.cod_corresponsal;
         fnBitacora.cve_cobro = dtosBitacora.cve_cobro;
         fnBitacora.observaciones = 'IMPRESION DE RECIBO EN LA SUCURSAL '+ req.user.sucursal;
         fnBitacora.id_usuario = req.user.IdUser;
         fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
         await fnBitacora.Registra_MovimientoRemesa();
         /* Registramos en bitacora */
        var htmlRecibo = templateScript(context);
        let recibo = { recibo: htmlRecibo};
        res.render("remesas/cancelacion-envio-remesa-recibo", {recibo, context});
    };

});

function deleteSesiones_cancelacion(req){
    /* delete req.session.cte;
    delete req.session.Identificacion;
    delete req.session.remesaPago;
    */
}
module.exports = router;
// ========== FIN PROCESO DE CANCELAION DE REMESA ==========

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\remesas-cancelacion.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\remesas-envio.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const Handlebars = require("handlebars");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const fnBitacora = require("../lib/bitacoras");
const fn_pld = require("../lib/reglas_pld_in");
const fnCatalogos = require("../lib/catalogosBD");
const consumoApi = require("../lib/Apis/api_notificaciones");
const catalogosBD = require("../lib/catalogosBD");
const { repeatWithFinalize } = require("linq");
const url = require('url');
const SendService = require("../lib/Apis/proveedores/Send.service")
const bd = require("../lib/Apis/proveedores/bd");


router.get('/remesas/new',isLoggedIn, async (req, res)=>{ 

    delete req.session.EnvioCotizacion;
    delete req.session.cte;
    delete req.session.Identificacion ;
    delete req.session.remesa;

    const result_transmisores = await pool.query("select * from vw_transmisores_permitidos_envio where cod_empresa = ?", req.user.IdEmpresaCliente);
    
    const re = await fnCatalogos.recibo_existe_by_sucursal(req,"E");
    if(re[0].existe == 0){
        req.flash("alert_message", "No hay recibo configurado para esta operación, debes de solicitar se configure el recibo para tu sucursal");
        res.redirect('/menu');
    };
    
    res.render("remesas/new-remesa",{result_transmisores});
});




router.post('/remesas/new-busqueda', isLoggedIn,  async (req, res)=>{ 
    //Recibimos los datos de Cotizacion
    let datosucursal = req.body.cboSucursalDestino;
    let arrsucursal = datosucursal.split("|");
    let cod_transmisor = req.body.cboTransmisor;
    let cod_agente = arrsucursal[0];
    let cod_sucursal = arrsucursal[1];
    let cod_pais_destino = req.body.cboPais;
    let cod_estado_destino = req.body.cboEstado==undefined? req.body.txtEstado : req.body.cboEstado;
    let cod_municipio_destino =  req.body.cboMunicipio==undefined? req.body.txtMunicipio : req.body.cboMunicipio;
    let ciudad_destino = req.body.txtCiudad;
    let comision = req.body.hfComision;
    let Iva = req.body.hfIva;
    let ImporteCobrado = req.body.hfImporteTotal;
    let valorConFormato = req.body.txtImporte;
    let valorNumerico = valorConFormato.replace(/[^0-9.-]/g, '');
    let ImporteEnviar = parseFloat(valorNumerico);


    let Sucursal = req.body.hfSucursal;
    let Transmisor = req.body.hfTransmisor;
    let Pagador = req.body.hfPagador;
    let Pais = req.body.hfPais;
    let objCotizacion = {
        cod_transmisor : cod_transmisor,
        cod_agente : cod_agente,
        cod_pais_destino : cod_pais_destino,
        cod_estado_destino : cod_estado_destino,
        cod_municipio_destino : cod_municipio_destino,
        ciudad_destino : ciudad_destino,
        comision : comision,
        Iva : Iva,
        ImporteCobrado : ImporteCobrado,
        ImporteEnviar : ImporteEnviar,
        Transmisor :Transmisor,
        Pais : Pais,
        Pagador :Pagador,
        Sucursal : Sucursal,
        cod_sucursal_destino : cod_sucursal,
        cod_sucursal_agente : datosucursal
    };
    req.session.EnvioCotizacion = objCotizacion;
    let data = objCotizacion;
   
    let continuaPaso =0;
    fn_pld.importe_envio = objCotizacion.ImporteEnviar;
    let CtrlBusqueda = true;
    result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");
    await fn_pld.aplicacion_reglas_pld_out(req, 6, 0 ); //Cotizacion
    if (fn_pld.code == "00"){
         continuaPaso = 1;
    }else{
        let result_transmisores = await pool.query("Select idEmpresa, nombre from empresas where idEmpresa = ?", req.user.IdEmpresaCliente);
        let alert_message = fn_pld.msg;
        switch (fn_pld.accion) {
            case 0:        
                res.render("remesas/new-remesa", {alert_message, result_transmisores, data});        
                break;
            case 1:
                res.render("remesas/new-remesa", {alert_message, result_transmisores, data});        
                break;
            case 2:
                break;             
        }
    }
    
    if(continuaPaso==1){
        res.render("remesas/new-remesa-paso2", {CtrlBusqueda, result_paisesNac});
    }
});

router.post('/remesas/new-confirmacion', isLoggedIn, async (req, res)=>{ 
    if(!req.session.EnvioCotizacion){
        res.redirect("/menu");
    }
    //Recibimos los datos de la busqueda
    let Paso2 = false;
    let data = [];
    data = {
        identificacion :req.body.cboIdentificacion,
        NumeroIdentificacion:req.body.txtNumeroIdentificacion,
        fechaExpedicion: req.body.txtFechaExpedicion,
        AnioExpedicion:req.body.txtAnioExpedicion,
        fechaExpiracion:req.body.txtFechaVigencia ,
        AnioExpiracion:req.body.txtAnioVigencia,
        paisEmision: req.body.cboEmision,
        NombreCte: fn.CleanCadena(req.body.txtNombreCte),
        ApaternoCte: fn.CleanCadena(req.body.txtApaterno),
        AmaternoCte: fn.CleanCadena(req.body.txtAmaterno),
        FechaNacimiento: req.body.txtFechaNacimiento,
        FechaNacimientoC: fn.ConvierteFechaFormatoBase(req.body.txtFechaNacimiento),
        fechaExpedicionC: req.body.txtFechaExpedicion == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaExpedicion),
        AnioExpedicionC:req.body.txtAnioExpedicion == "" ? null : req.body.txtAnioExpedicion,
        fechaExpiracionC:req.body.txtFechaVigencia == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaVigencia),
        AnioExpiracionC:anioVigencia = req.body.txtAnioVigencia == "" ? null : req.body.txtAnioVigencia
        
    }
    req.session.Identificacion = data;
    let params = [req.user.IdEmpresaCliente, data.NombreCte, data.ApaternoCte, data.AmaternoCte,data.FechaNacimientoC, data.identificacion , data.NumeroIdentificacion, data.fechaExpedicionC, data.fechaExpiracionC, data.AnioExpedicionC, data.AnioExpiracionC, data.paisEmision, req.user.IdUser];
    result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
    let result_genero = await catalogosBD.Cat_genero();
    console.log(params);
    pool.query("call usp_busquedaCliente (?)", [params]).then( async function(resultadoObtenido) {
        if(resultadoObtenido.length == 2){
           let r = resultadoObtenido[0];
           switch (r[0].result){
                case "OK":
                   /*Obtenemos los datos del cliente*/
                    let parametrosInt = [req.user.IdEmpresaCliente, r[0].cod_cliente];
                    let dataCliente = await pool.query("Select * from clientes where cod_empresa = ? and cod_cliente = ?", parametrosInt);
                    if(dataCliente[0].status == "2"){
                        alert_message = "No es posible realizar operaciones con este cliente, contactar al área correspondiente";
                        CtrlBusqueda = true;
                        res.render("remesas/new-remesa-paso2",{alert_message,data, CtrlBusqueda , result_paisesNac, result_genero});
                    }else{
                        req.session.cte = { cod_cliente : dataCliente[0].cod_cliente, nombre_cliente : dataCliente[0].nombre_cliente, apaterno_cliente : dataCliente[0].apaterno_cliente, amaterno_cliente : dataCliente[0].amaterno_cliente,  fecha_Nacimiento : fn.ConvierteFechaFormatoBase(req.body.txtFechaNacimiento) }
                    
                        //Se crea data con los datos de cliente
                        let tipoN="";
                        let tipoI ="";
                        if(dataCliente[0].tipo_domicilio =="N"){tipoN = "checked";  } else if (dataCliente[0].tipo_domicilio =="I"){ tipoI = "checked"; }else{tipoN = "checked";}
                        data = {
                            bloqueado : dataCliente[0].bloqueado,
                            cod_cliente :dataCliente[0].cod_cliente,
                            nombrecompleto : dataCliente[0].nombre_cliente + " "+ dataCliente[0].apaterno_cliente + " " + dataCliente[0].amaterno_cliente,
                            nombreCliente :dataCliente[0].nombre_cliente,
                            ApaternoCte :dataCliente[0].apaterno_cliente,
                            AmaternoCte :dataCliente[0].amaterno_cliente,
                            fechaNacimiento : req.body.txtFechaNacimiento,
                            calle: dataCliente[0].calle,
                            noint: dataCliente[0].no_int,
                            noext: dataCliente[0].no_ext,
                            ciudad: dataCliente[0].ciudad,
                            cp: dataCliente[0].cp,
                            tipoI: tipoI,
                            tipoN:tipoN,
                            cboColonia : dataCliente[0].cod_asentamiento + '|' + dataCliente[0].cp,
                            cboEstado : dataCliente[0].cod_estado,
                            cboMuncipio : dataCliente[0].cod_municipio,
                            txtColonia : dataCliente[0].asentamiento,
                            txtEstado : dataCliente[0].estado,
                            txtMunicipio :dataCliente[0].municipio,
                            pais : dataCliente[0].cod_pais,
                            lada : dataCliente[0].lada,
                            telefono : dataCliente[0].telefono,
                            paisNacimiento: dataCliente[0].pais_nacimiento,
                            nacionalidad: dataCliente[0].nacionalidad,
                            genero : dataCliente[0].genero,
                            rfc : dataCliente[0].rfc,
                            curp : dataCliente[0].curp,
                            email : dataCliente[0].email
                        }
                        if(data.bloqueado=="1"){
                                alert_message = "Cliente bloqueado, favor de comunicarse al área de cumplimiento";
                                CtrlBusqueda = true;
                                res.render("remesas/new-remesa-paso2",{alert_message,data, CtrlBusqueda , result_paisesNac, result_genero});
                        }else{
                            await fn_pld.aplicacion_reglas_pld_out(req, 4, data.cod_cliente ); //Carga de identificacion
                            if (fn_pld.code == "00"){
                                Paso2 = true;
                            }else{
                                alert_message = fn_pld.msg;
                                console.log("mensaje:" + fn_pld.msg);
                                CtrlBusqueda = true;
                                res.render("remesas/new-remesa-paso2",{alert_message,data, CtrlBusqueda , result_paisesNac, result_genero});
                            }
                        }
                    } 
                   break;
                case "99":
                    alert_message = r[0].msg;
                    CtrlBusqueda = true;
                    res.render("remesas/new-remesa-paso2",{alert_message,data, CtrlBusqueda , result_paisesNac, result_genero});
                    break;
                case "00":
                    CtrlBusqueda = true;
                    let ShowSeleccion = true;
                    res.render("remesas/new-remesa-paso2",{ShowSeleccion, data, r, CtrlBusqueda , result_paisesNac, result_genero});
                    break;
           }
        }else
        {
            let CtrlBusqueda = true;
            let ShowSeleccion = true;
            res.render("remesas/new-remesa-paso2",{ShowSeleccion,data, CtrlBusqueda , result_paisesNac, result_genero});
                   
        }

        if(Paso2==true){
            let CtrlConfirmaion = true;
            result_parentesco = await catalogosBD.Cat_parentesco(req);
            result_proposito = await pool.query("select a.id as id, a.descripcion from vw_origen_recursos_empresa a where a.id_empresa = ? and a.status = 1 and tipo_producto = ?", [req.user.IdEmpresaCliente, "PE"]);
            result_actividad  =await  pool.query("select a.cod_actividad as id, b.descripcion as descripcion from actividad_empresa a inner join cat_actividad_economica b on (b.cod_actividad = a.cod_actividad) where a.cod_empresa = ? and b.status = 1 ", [req.user.IdEmpresaCliente]);
            res.render("remesas/new-remesa-paso2", {data, CtrlConfirmaion, result_proposito,result_actividad, result_parentesco, result_paisesNac, result_genero});

        }

    }).catch(function(err){
        error_msg = err;
        let CtrlBusqueda = true;
        res.render("remesas/new-remesa-paso2",{data, error_msg,CtrlBusqueda , result_paisesNac});
    });

    
});

router.post('/remesas/new-recibo', isLoggedIn, async (req, res)=>{ 
    let tipoI = "";
    let tipoN = "";
    let Cod_colonia = "";
    let Paso2 = false;
    if(req.body.cboColonia!="")
    {
        Cod_colonia = req.body.cboColonia.split("|")[0];
    }
    if(req.body.optTipoDom=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
    datacte = req.session.cte;
    cotizacion = req.session.EnvioCotizacion;
    Identificacion = req.session.Identificacion;

    let data =  {
        cod_cliente : datacte.cod_cliente,
        nombre_cliente: datacte.nombre_cliente,
        apaterno_cliente : datacte.apaterno_cliente,
        amaterno_cliente : datacte.amaterno_cliente,
        calle: req.body.txtCalle.toUpperCase(),
        noint: req.body.txtNumInt.toUpperCase(),
        noext: req.body.txtNumExt.toUpperCase(),
        ciudad: req.body.txtCiudad.toUpperCase(),
        cp: req.body.txtCP,
        tipoI: tipoI,
        tipoN:tipoN,
        cboColonia : req.body.cboColonia,
        cboEstado : req.body.cboEstado,
        cboMuncipio : req.body.cboMunicipio,
        txtColonia : req.body.txtColonia.toUpperCase(),
        txtEstado : req.body.txtEstado.toUpperCase(),
        txtMunicipio : req.body.txtMunicipio.toUpperCase(),
        pais : req.body.cboPais,
        paisNacimiento: req.body.cboPaisNacimiento,
        nacionalidad: req.body.cboNacionalidad,
        lada: req.body.txtLada,
        telefono: req.body.txtTelefono,
        beneficiario : req.body.txtBeneficiario == undefined ? "" : fn.CleanCadena(req.body.txtBeneficiario),
        beneficiario_ap1 : req.body.txtApaternoBeneficiario == undefined ? "" : fn.CleanCadena(req.body.txtApaternoBeneficiario),
        beneficiario_ap2 : req.body.txtAmaternoBeneficiario == undefined ? "" : fn.CleanCadena(req.body.txtAmaternoBeneficiario),
        proposito :req.body.cboProposito,
        NumOperacionesEsperadas: req.body.cboNumOperaciones == undefined ? 0 : req.body.cboNumOperaciones,
        actividad: req.body.cboActividad,
        parentesco: req.body.cboParentesco,
        genero : req.body.cboGenero,
        tipo_beneficiario : "PF",
        razon_social : req.body.txtRazonSocial == undefined ? "" : fn.CleanCadena(req.body.txtRazonSocial),
        cuenta_clabe : req.body.txtCuentaClabe == undefined ? "" : fn.CleanCadena(req.body.txtCuentaClabe),
        nombreBanco : req.body.cboBanco == undefined ? "" : fn.CleanCadena(req.body.cboBanco),
        rfc :  req.body.txtRFC == undefined ? "" : fn.CleanCadena(req.body.txtRFC),
        curp :  req.body.txtCURP == undefined ? "" : fn.CleanCadena(req.body.txtCURP),
        email :  req.body.txtEmail == undefined ? "" : req.body.txtEmail
    };
    fn_pld.nacionalidad = data.nacionalidad;
    console.log(data);
    await fn_pld.aplicacion_reglas_pld_out(req, 5, data.cod_cliente ); //Carga de identificacion
    
    if (fn_pld.code == "00"){
        Paso2 = true;
    }else{
        let CtrlConfirmaion = true;
        result_parentesco = await catalogosBD.Cat_parentesco(req);
        result_proposito = await pool.query("select a.id as id, a.descripcion from vw_origen_recursos_empresa a where a.id_empresa = ? and a.status = 1 and tipo_producto = ?", [req.user.IdEmpresaCliente, "PE"]);
        result_actividad  =await  pool.query("select a.cod_actividad as id, b.descripcion as descripcion from actividad_empresa a inner join cat_actividad_economica b on (b.cod_actividad = a.cod_actividad) where a.cod_empresa = ? and b.status = 1 ", [req.user.IdEmpresaCliente]);
        result_genero = await catalogosBD.Cat_genero();
        let alert_message = fn_pld.msg;
        res.render("remesas/new-remesa-paso2",{alert_message, data, CtrlConfirmaion, result_proposito,result_actividad, result_parentesco, result_paisesNac, result_genero});
    }

    if(Paso2 == true){
    //creamosorden
        let Params = [
            req.user.IdEmpresaCliente,
            datacte.cod_cliente,
            cotizacion.cod_transmisor,
            cotizacion.cod_agente,
            "MEX",
            "MXN",
            cotizacion.ImporteEnviar,
            1,
            cotizacion.cod_pais_destino,
            "MXN",
            cotizacion.ImporteEnviar,
            cotizacion.cod_sucursal_destino,
            datacte.nombre_cliente,
            datacte.apaterno_cliente,
            datacte.amaterno_cliente,
            datacte.fecha_Nacimiento,
            data.pais,
            data.cboEstado,
            data.cboMuncipio,
            Cod_colonia,
            data.ciudad,
            data.cp,
            data.txtEstado,
            data.txtMunicipio,
            data.txtColonia,
            data.calle,
            data.noext,
            data.noint,
            data.nacionalidad,
            data.paisNacimiento,
            Identificacion.identificacion,
            Identificacion.NumeroIdentificacion,
            Identificacion.fechaExpedicionC,
            Identificacion.fechaExpiracionC,
            Identificacion.AnioExpedicionC,
            Identificacion.AnioExpiracionC,
            Identificacion.paisEmision,
            data.beneficiario,
            data.beneficiario_ap1,
            data.beneficiario_ap2,
            data.proposito,
            data.actividad,
            data.parentesco,
            req.user.IdUser,
            data.NumOperacionesEsperadas,
            data.lada,
            data.telefono,
            cotizacion.ImporteCobrado,
            cotizacion.Iva,
            req.user.cod_sucursal,
            req.user.Nombre,
            req.user.AgenteRelacionado,
            req.user.sucursal,
            cotizacion.comision,
            data.genero,
            data.tipo_beneficiario,
            data.razon_social,
            data.cuenta_clabe,
            data.nombreBanco,
            data.rfc,
            data.curp,
            data.email

        ]
        console.log(Params);
        pool.query("call usp_genera_remesa (?)", [Params]).then( async function(resultadoObtenido){
            /* console.log("Genera Remesa");
            console.log(Params);
            console.log("call usp_genera_remesa (?)");*/
        if(resultadoObtenido.length == 2){
            let r = resultadoObtenido[0];
            if(r[0].code){
                if(r[0].code=="OK"){
                    req.session.remesa = {claveCobro : r[0].claveCobro, cod_transmisor : cotizacion.cod_transmisor};
                    req.flash("success_msg", "Remesa generada correctamente");
                    res.redirect("/remesas/comprobante-envio");
                }else{
                    error_msg = r[0].msg;
                    let CtrlConfirmaion = true;
                    result_parentesco = await catalogosBD.Cat_parentesco(req);
                    result_proposito = await pool.query("select a.id as id, a.descripcion from vw_origen_recursos_empresa a where a.id_empresa = ? and a.status = 1 and tipo_producto = ?", [req.user.IdEmpresaCliente, "PE"]);
                    result_actividad  =await  pool.query("select a.cod_actividad as id, b.descripcion as descripcion from actividad_empresa a inner join cat_actividad_economica b on (b.cod_actividad = a.cod_actividad) where a.cod_empresa = ? and b.status = 1 ", [req.user.IdEmpresaCliente]);
                    result_genero = await catalogosBD.Cat_genero();
                    res.render("remesas/new-remesa-paso2", {error_msg, data, CtrlConfirmaion, result_proposito,result_actividad, result_parentesco, result_paisesNac, result_genero});    
                }
            }else{
                error_msg = "Error al crear la remesa, intentalo nuevamente";
                let CtrlConfirmaion = true;
                result_parentesco = await catalogosBD.Cat_parentesco(req);
                result_proposito = await pool.query("select a.id as id, a.descripcion from vw_origen_recursos_empresa a where a.id_empresa = ? and a.status = 1 and tipo_producto = ?", [req.user.IdEmpresaCliente, "PE"]);
                result_actividad  =await  pool.query("select a.cod_actividad as id, b.descripcion as descripcion from actividad_empresa a inner join cat_actividad_economica b on (b.cod_actividad = a.cod_actividad) where a.cod_empresa = ? and b.status = 1 ", [req.user.IdEmpresaCliente]);
                result_genero = await catalogosBD.Cat_genero();
                res.render("remesas/new-remesa-paso2", {error_msg, data, CtrlConfirmaion, result_proposito,result_actividad, result_parentesco, result_paisesNac, result_genero});
        
            }
        }
    

        }).catch( async function(err){
            error_msg = err;
            let CtrlConfirmaion = true;
            result_parentesco = await catalogosBD.Cat_parentesco(req);
            result_proposito = await pool.query("select a.id as id, a.descripcion from vw_origen_recursos_empresa a where a.id_empresa = ? and a.status = 1 and tipo_producto = ?", [req.user.IdEmpresaCliente, "PE"]);
            result_actividad  =await  pool.query("select a.cod_actividad as id, b.descripcion as descripcion from actividad_empresa a inner join cat_actividad_economica b on (b.cod_actividad = a.cod_actividad) where a.cod_empresa = ? and b.status = 1 ", [req.user.IdEmpresaCliente]);
            result_genero = await catalogosBD.Cat_genero();
            res.render("remesas/new-remesa-paso2", {error_msg, data, CtrlConfirmaion, result_proposito,result_actividad, result_parentesco, result_paisesNac, result_genero});
        
        });
    }
});

router.all('/remesas/comprobante-envio', isLoggedIn, async (req, res)=>{

    if(!req.session.remesa)
    {
        res.redirect("/menu");
    };

    delete req.session.EnvioCotizacion;
    delete req.session.cte;
    delete req.session.Identificacion ;
    console.log("req.session.remesa");
    console.log(req.session.remesa);

    //Devolvemos datos de recibo
    const re = await fnCatalogos.recibo_by_sucursal(req, req.session.remesa.cod_transmisor, "E"); 
    
    
     let reciboCte = await pool.query("call usp_getReciboEnvio (?,?,?)",[req.user.IdEmpresaCliente, req.session.remesa.claveCobro, true]);
    
    var templateScript = Handlebars.compile(re[0].recibo);
    
    if(reciboCte.length == 2){
        let item = reciboCte[0];

        if (item[0].code =="00"){
            req.flash("alert_message", "Se ha superado el limite de impresiones de recibo");
            delete req.session.remesa;
            res.redirect('/menu');
        }

        var htmlRecibo;

         var importe_recibir_beneficiario_letra = fn.numeroALetras(item[0].importe_recibir_beneficiario, {
            plural: 'PESOS',
            singular: 'PESO'
           
          });

          var importe_cobrado_cliente_letra = fn.numeroALetras(item[0].importe_cobrado_cliente, {
            plural: 'PESOS',
            singular: 'PESO'
           
          });
          
          
          var data = { 
            clave_envio : item[0].clave_envio,
            nombre_agencia_creacion : item[0].nombre_agencia_creacion,
            sucursal_creacion : item[0].sucursal_creacion,
            nombre_cajero : item[0].nombre_cajero,
            fecha_operacion : item[0].fecha_operacion,
            nombre_beneficiario : item[0].nombre_beneficiario,
            nombre_remitente : item[0].nombre_remitente,
            importe_recibir_beneficiario : fn.FormatCurrency("es-MX", "MXN", 2, item[0].importe_recibir_beneficiario),
            iva : fn.FormatCurrency("es-MX", "MXN", 2, item[0].iva),
            importe_cobrado_cliente : fn.FormatCurrency("es-MX", "MXN", 2, item[0].importe_cobrado_cliente),
            pais_destino : item[0].pais_destino,
            agencia_destino : item[0].agencia_destino,
            sucursal_destino : item[0].sucursal_destino,
            importe_recibir_beneficiario_letra : importe_recibir_beneficiario_letra,
            importe_cobrado_cliente_letra : importe_cobrado_cliente_letra,
            comision_envio : item[0].comision_envio,
            identificacion_remitente : item[0].identificacion_remitente,
            folioId_remitente : item[0].folioId_remitente,
            cuenta : item[0].cuenta_beneficiario,
            banco : item[0].banco_beneficiario
        };
        var context = { 
            "clave_envio" : item[0].clave_envio,
            "nombre_agencia_creacion" : item[0].nombre_agencia_creacion,
            "sucursal_creacion" : item[0].sucursal_creacion,
            "nombre_cajero" : item[0].nombre_cajero,
            "fecha_operacion" : item[0].fecha_operacion,
            "nombre_beneficiario" : item[0].nombre_beneficiario,
            "nombre_remitente" : item[0].nombre_remitente,
            "importe_recibir_beneficiario" : fn.FormatCurrency("es-MX", "MXN", 2, item[0].importe_recibir_beneficiario),
            "iva" : fn.FormatCurrency("es-MX", "MXN", 2, item[0].iva),
            "importe_cobrado_cliente" : fn.FormatCurrency("es-MX", "MXN", 2,item[0].importe_cobrado_cliente),
            "pais_destino" : item[0].pais_destino,
            "agencia_destino" : item[0].agencia_destino,
            "sucursal_destino" : item[0].sucursal_destino,
            "importe_recibir_beneficiario_letra" : importe_recibir_beneficiario_letra,
            "importe_cobrado_cliente_letra" : importe_cobrado_cliente_letra,
            "comision_envio" : item[0].comision_envio,
            "identificacion_remitente" : item[0].identificacion_remitente,
            "folioId_remitente" : item[0].folioId_remitente,
            "pais_origen" : item[0].pais_origen,
            "divisa_origen" : item[0].divisa_origen,
            "cuenta_beneficiario" : item[0].cuenta_beneficiario,
            "banco_beneficiario" : item[0].banco_beneficiario
        };
        htmlRecibo = templateScript(context);
        let recibo = { recibo: htmlRecibo};
        res.render("remesas/new-remesa-recibo", {recibo, context});
    };

});

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\remesas-envio.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\remesas-pago.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const Handlebars = require("handlebars");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const fnBitacora = require("../lib/bitacoras");
const fn_pld = require("../lib/reglas_pld_in");
const fnCatalogos = require("../lib/catalogosBD");
const consumoApi = require("../lib/Apis/api_notificaciones");
const catalogosBD = require("../lib/catalogosBD");
const proxy  = require("../lib/Apis/proveedores/Reverse.Service");
const { repeatWithFinalize } = require("linq");
const url = require('url');
const RemesaService = require('../lib/Apis/proveedores/Pay.Service')
const bd = require("../lib/Apis/proveedores/bd");

// ************* PAGO DE REMESAS **************

router.get('/remesas/pago', isLoggedIn, async (req, res)=>{ 
    delete req.session.cte;
    delete req.session.Identificacion;
    delete req.session.remesaPago;
    const re = await fnCatalogos.recibo_existe_by_sucursal(req,"P");
    if(re[0].existe == 0){
        req.flash("alert_message", "No hay recibo configurado para esta operación, debes de solicitar se configure el recibo para tu sucursal");
        res.redirect('/menu');
    };
    let MG_object_Params;
    
    if(req.session.MG_object_Params){
       MG_object_Params = req.session.MG_object_Params;
       delete req.session.MG_mensajes_Bitacora;
    }
    
       res.render("remesas/pago-remesa", { MG_object_Params });
});

router.post('/remesas/pago', isLoggedIn,  async (req, res)=>{ 
    let MG_object_Params = {};
    let cve_cobro = req.body.txtRemesa.toUpperCase();
    if(cve_cobro.trim()==""){
        req.flash("warning_msg", "Debes capturar la clave de cobro");
        res.redirect("/remesas/pago");
    };
    let paramsGral = {
        IdEmpresaCliente    : req.user.IdEmpresaCliente,
        IdAgenteRelacionado : req.user.IdAgenteRelacionado,
        cve_cobro : cve_cobro,
        cod_sucursal : req.user.cod_sucursal,
        IdUser : req.user.IdUser,
        IdEmpresa : req.user.IdEmpresa,
        IdTipoConsulta : 1
    }
    let remesaPago = await RemesaService.buscarRemesa(paramsGral);
    /* "respuesta desde pagina"*/
    console.log("respuesta desde pagina");
    console.log(remesaPago);
    /* respuesta desde pagina*/
    MG_object_Params = remesaPago.bitacora_peticiones;
    if(remesaPago.code == 404){
          req.flash("error_msg", "Error al consultar la información, intente de nuevo");
          req.session.MG_object_Params = MG_object_Params;
          res.redirect("/remesas/pago");
    }
    if (remesaPago.code != "00") {
        req.flash("error_msg", remesaPago.message);
        
        req.session.MG_object_Params = MG_object_Params;
        return res.redirect("/remesas/pago");
    }
    /*Validacion de Reglas PLD Paso 1*/
    fn_pld.actividad_economica = "";
    let data = remesaPago.order;
    await fn_pld.aplicacion_reglas_pld(req, 1,data.cod_transmisor, data.cod_corresponsal,data.clave_cobro, 0);
    if (fn_pld.code == "00"){
        result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
        
        req.session.remesaPago = data;
        if(remesaPago.proveedor !=""){
          req.session.mgiTransactionSessionID = remesaPago.bitacora_peticiones.mgiTransactionSessionID ;
        }
        let CtrlBusqueda = true;
        let cod_proveedor = remesaPago.order.proveedor;
        res.render("remesas/pago-remesa-paso2", {
          CtrlBusqueda,
          data,
          result_paisesNac,
          MG_object_Params,
          cod_proveedor
        });
    }else{
        req.flash("error_msg", fn_pld.msg);
        res.redirect("/remesas/pago");
    }
});

router.post('/remesas/pago-confirmacion', isLoggedIn, async (req, res)=>{ 
    let dtosBitacora = {};
    let MG_object_Params = req.session.MG_object_Params;
    main: {
        if(!req.session.remesaPago){
            res.redirect("/menu");
            break main;
        }
        dtosBitacora = req.session.remesaPago;
        let cod_proveedor = dtosBitacora.proveedor;
        let Paso2 = false;
        let data = {};
        data = {
            qtNombre : req.body.qtn1 == undefined ? 0 : 1,
            qtOrigen : req.body.qtn2 == undefined ? 0 : 1,
            qtImporte: req.body.qtn3 == undefined ? 0 : 1,
            identificacion :req.body.cboIdentificacion,
            NumeroIdentificacion:fn.CleanCadena(req.body.txtNumeroIdentificacion),
            fechaExpedicion: req.body.txtFechaExpedicion,
            AnioExpedicion:req.body.txtAnioExpedicion,
            fechaExpiracion:req.body.txtFechaVigencia ,
            AnioExpiracion:req.body.txtAnioVigencia,
            paisEmision: req.body.cboEmision,
            NombreCte: fn.CleanCadena(req.body.txtNombreCte),
            ApaternoCte: fn.CleanCadena(req.body.txtApaterno),
            AmaternoCte: fn.CleanCadena(req.body.txtAmaterno),
            FechaNacimiento: req.body.txtFechaNacimiento,
            FechaNacimientoC: fn.ConvierteFechaFormatoBase(req.body.txtFechaNacimiento),
            fechaExpedicionC: req.body.txtFechaExpedicion == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaExpedicion),
            AnioExpedicionC:req.body.txtAnioExpedicion == "" ? null : req.body.txtAnioExpedicion,
            fechaExpiracionC:req.body.txtFechaVigencia == "" ? null : fn.ConvierteFechaFormatoBase(req.body.txtFechaVigencia),
            AnioExpiracionC:anioVigencia = req.body.txtAnioVigencia == "" ? null : req.body.txtAnioVigencia,
            mgiTransactionSessionID: req.session.mgiTransactionSessionID
        }
        let preguntas_seg = {
            p1 : data.qtNombre,
            p2 : data.qtOrigen,
            p3 : data.qtImporte
        }
        req.session.preguntas_seg = preguntas_seg;
        req.session.Identificacion = data;
        let result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
        
        var na = data.NombreCte + data.ApaternoCte + data.AmaternoCte;
        var nb = req.session.remesaPago.NombreCte + req.session.remesaPago.ApaternoCte + req.session.remesaPago.AmaternoCte;
        let Dif_nombre_result = await pool.query("select  LEVENSHTEIN(replace(?,' ',''), replace(?,' ','')) as letras;",[na, nb]);
        if( parseInt(Dif_nombre_result[0].letras) > 2)
        {
            alert_message = "El nombre del beneficiario capturado no coincide con el registrado en la remesa";
            CtrlBusqueda = true;
            /* Registramos en bitacora */
            fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
            fnBitacora.cod_transmisor = dtosBitacora.cod_transmisor;
            fnBitacora.cod_corresponsal = dtosBitacora.cod_corresponsal;
            fnBitacora.cve_cobro = dtosBitacora.clave_cobro;
            fnBitacora.observaciones = 'CLIENTE NO COINCIDE CON NOMBRE REGISTRADO EN EL GIRO CONSULTADO EN LA SUCURSAL '+ req.user.sucursal;
            fnBitacora.id_usuario = req.user.IdUser;
            fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
            await fnBitacora.Registra_MovimientoRemesa();
            /* Registramos en bitacora */
            res.render("remesas/pago-remesa-paso2",{alert_message,data, CtrlBusqueda , result_paisesNac, MG_object_Params, cod_proveedor});
            break main;
        }
        let params = [req.user.IdEmpresaCliente, data.NombreCte, data.ApaternoCte, data.AmaternoCte, data.FechaNacimientoC, data.identificacion , data.NumeroIdentificacion, data.fechaExpedicionC, data.fechaExpiracionC, data.AnioExpedicionC, data.AnioExpiracionC, data.paisEmision, req.user.IdUser];
        console.log(params);
        result_genero = await catalogosBD.Cat_genero();
        pool.query("call usp_busquedaCliente (?)", [params]).then( async function(resultadoObtenido) {
        if(resultadoObtenido.length == 2){
           let r = resultadoObtenido[0];
           switch (r[0].result){
                case "OK": 
                    /*Obtenemos los datos del cliente*/
                    let dataCliente = await pool.query("Select * from clientes where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, r[0].cod_cliente]);
                    if(dataCliente[0].status == "2"){
                      alert_message = "No es posible realizar operaciones con este cliente, contactar al área correspondiente";
                      CtrlBusqueda = true;
                      res.render("remesas/pago-remesa-paso2",{alert_message,data, CtrlBusqueda , result_paisesNac, result_genero, MG_object_Params, cod_proveedor});  
                    }else{
                      req.session.cte = { cod_cliente : dataCliente[0].cod_cliente, nombre_cliente : dataCliente[0].nombre_cliente, apaterno_cliente : dataCliente[0].apaterno_cliente, amaterno_cliente : dataCliente[0].amaterno_cliente,  fecha_Nacimiento : fn.ConvierteFechaFormatoBase(req.body.txtFechaNacimiento) }
                      //Se crea data con los datos de cliente
                      let tipoN="";
                      let tipoI ="";
                      if(dataCliente[0].tipo_domicilio =="N"){tipoN = "checked";  } else if (dataCliente[0].tipo_domicilio =="I"){ tipoI = "checked"; }else{tipoN = "checked";}
                      data = {
                          cod_cliente :dataCliente[0].cod_cliente,
                          nombrecompleto : dataCliente[0].nombre_cliente + " "+ dataCliente[0].apaterno_cliente + " " + dataCliente[0].amaterno_cliente,
                          NombreCte :dataCliente[0].nombre_cliente,
                          ApaternoCte :dataCliente[0].apaterno_cliente,
                          AmaternoCte :dataCliente[0].amaterno_cliente,
                          FechaNacimiento : req.body.txtFechaNacimiento,
                          calle: dataCliente[0].calle,
                          noint: dataCliente[0].no_int,
                          noext: dataCliente[0].no_ext,
                          ciudad: dataCliente[0].ciudad,
                          cp: dataCliente[0].cp,
                          tipoI: tipoI,
                          tipoN:tipoN,
                          cboColonia : dataCliente[0].cod_asentamiento + "|" + dataCliente[0].cp,
                          cboEstado : dataCliente[0].cod_estado,
                          cboMuncipio : dataCliente[0].cod_municipio,
                          txtColonia : dataCliente[0].asentamiento,
                          txtEstado : dataCliente[0].estado,
                          txtMunicipio :dataCliente[0].municipio,
                          pais : dataCliente[0].cod_pais,
                          lada : dataCliente[0].lada,
                          telefono : dataCliente[0].telefono,
                          paisNacimiento: dataCliente[0].pais_nacimiento,
                          nacionalidad: dataCliente[0].nacionalidad,
                          fechaExpedicion: req.body.txtFechaExpedicion,
                          AnioExpedicion:req.body.txtAnioExpedicion,
                          fechaExpiracion:req.body.txtFechaVigencia ,
                          AnioExpiracion:req.body.txtAnioVigencia,
                          paisEmision: req.body.cboEmision,
                          identificacion :req.body.cboIdentificacion,
                          NumeroIdentificacion:req.body.txtNumeroIdentificacion,
                          genero : dataCliente[0].genero,
                          rfc : dataCliente[0].rfc,
                          curp : dataCliente[0].curp,
                          email : dataCliente[0].email,
                          mgiTransactionSessionID: req.session.mgiTransactionSessionID
                      }
                      Paso2 = true;
                    }                    
                   break;
                case "99":
                    alert_message = r[0].msg;
                    CtrlBusqueda = true;
                    res.render("remesas/pago-remesa-paso2",{alert_message,data, CtrlBusqueda , result_paisesNac, result_genero, MG_object_Params, cod_proveedor});
                    break;
                case "00":
                    CtrlBusqueda = true;
                    let ShowSeleccion = true;
                    alert_message = "El BENEFICIARIO ya está registrado con otros datos, favor de verificar";
                    res.render("remesas/pago-remesa-paso2",{alert_message,ShowSeleccion, data, r, CtrlBusqueda , result_paisesNac, result_genero, MG_object_Params, cod_proveedor});
                    break;
            }
        }
        else
        {
            let CtrlBusqueda = true;
            let ShowSeleccion = true;
            res.render("remesas/pago-remesa-paso2",{ShowSeleccion,data, CtrlBusqueda , result_paisesNac, result_genero, MG_object_Params, cod_proveedor});  
        }
       
        if(Paso2==true){
           //console.log("paso 2");
             /*Validacion de Reglas PLD Paso 2*/
            fn_pld.pregunta1 = preguntas_seg.p1;
            fn_pld.pregunta2 = preguntas_seg.p2;
            fn_pld.pregunta3 = preguntas_seg.p3;
            fn_pld.actividad_economica = ""; 
            await fn_pld.aplicacion_reglas_pld(req, 2,dtosBitacora.cod_transmisor, dtosBitacora.cod_corresponsal,dtosBitacora.clave_cobro, data.cod_cliente);
            if (fn_pld.code == "00"){
                let CtrlConfirmaion = true;
                result_parentesco = await catalogosBD.Cat_parentesco(req);
                result_proposito = await pool.query("select a.id as id, a.descripcion from vw_propositos_empresa a where a.id_empresa = ? and a.status = 1", [req.user.IdEmpresaCliente]);
                result_actividad  =await  pool.query("select a.cod_actividad as id, b.descripcion as descripcion from actividad_empresa a inner join cat_actividad_economica b on (b.cod_actividad = a.cod_actividad) where a.cod_empresa = ? and b.status = 1 ", [req.user.IdEmpresaCliente]);
                result_intencion = await catalogosBD.Cat_intencion_fondos(req);
                res.render("remesas/pago-remesa-paso2", {data, CtrlConfirmaion,result_intencion, result_proposito,result_actividad, result_parentesco, result_paisesNac, result_genero, MG_object_Params, cod_proveedor});    
            }else{
                alert_message = fn_pld.msg;
                CtrlBusqueda = true;
                switch (fn_pld.accion) {
                    case 0:
                        res.render("remesas/pago-remesa-paso2",{alert_message,data, CtrlBusqueda , result_paisesNac, result_genero, MG_object_Params, cod_proveedor});
                        break;
                    case 1:
                        req.flash("error_msg", fn_pld.msg);
                        res.render("remesas/pago-remesa",{alert_message});
                        break;
                    case 2:
                        break;    
                }
            }
        }
        }).catch(function(err){
            error_msg = err;
            let CtrlBusqueda = true;
            res.render("remesas/pago-remesa-paso2",{data, error_msg,CtrlBusqueda , result_paisesNac, result_genero, MG_object_Params, cod_proveedor});
        });
    }
});


router.post('/remesas/pago-recibo', isLoggedIn, async (req, res)=>{ 
    let tipoI = "";
    let tipoN = "";
    let Cod_colonia = "";
    if(req.body.cboColonia!="")
    {
        Cod_colonia = req.body.cboColonia.split("|")[0];
    }
    if(req.body.optTipoDom=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
    let datacte = req.session.cte;
    let Identificacion = req.session.Identificacion;
    let remesaPago = req.session.remesaPago;
    let cod_proveedor = remesaPago.proveedor;
    let data = {
      cod_cliente: datacte.cod_cliente,
      nombrecompleto : datacte.nombre_cliente + " "+ datacte.apaterno_cliente + " " + datacte.amaterno_cliente,
      nombreCliente: datacte.nombreCliente,
      ApaternoCte :datacte.apaterno_cliente,
      AmaternoCte :datacte.amaterno_cliente,
      calle: fn.CleanCadena(req.body.txtCalle.toUpperCase()),
      noint: fn.CleanCadena(req.body.txtNumInt.toUpperCase()),
      noext: fn.CleanCadena(req.body.txtNumExt.toUpperCase()),
      ciudad: fn.CleanCadena(req.body.txtCiudad.toUpperCase()),
      cp: fn.CleanCadena(req.body.txtCP),
      tipoI: tipoI,
      tipoN: tipoN,
      cboColonia: req.body.cboColonia,
      cboEstado: req.body.cboEstado,
      cboMuncipio: req.body.cboMunicipio,
      txtColonia: fn.CleanCadena(req.body.txtColonia.toUpperCase()),
      txtEstado: fn.CleanCadena(req.body.txtEstado.toUpperCase()),
      txtMunicipio: fn.CleanCadena(req.body.txtMunicipio.toUpperCase()),
      pais: req.body.cboPais,
      paisNacimiento: req.body.cboPaisNacimiento,
      nacionalidad: req.body.cboNacionalidad,
      lada: req.body.txtLada,
      telefono: req.body.txtTelefono,
      proposito: req.body.cboProposito,
      intencion: req.body.cboIntencion == undefined ? "" : req.body.cboIntencion,
      NumOperacionesEsperadas:
        req.body.cboNumOperaciones == undefined
          ? 0
          : req.body.cboNumOperaciones,
      actividad: req.body.cboActividad,
      parentesco: req.body.cboParentesco,
      genero: req.body.cboGenero,
      rfc: "",
      curp: "",
      email: req.body.txtEmail,
      mgiTransactionSessionID: req.session.mgiTransactionSessionID,
      fecha_Nacimiento: Identificacion.FechaNacimientoC,
      cod_colonia : Cod_colonia
    };
    
   
   
    let ParametrosPago = {
        remesa : remesaPago,
        identificacion : Identificacion,
        data : data,
        usuario : req.user,
    }

    console.log("******* Parametros para pagar remesa **********"); 
    console.log(ParametrosPago);
    console.log("******* Parametros para pagar remesa **********"); 
    let preguntas_seg = req.session.preguntas_seg;
    fn_pld.pregunta1 = preguntas_seg.p1;
    fn_pld.pregunta2 = preguntas_seg.p2;
    fn_pld.pregunta3 = preguntas_seg.p3;
    let continuaPago =0;
    fn_pld.actividad_economica = data.actividad;
    console.log("Validacion reglas PLD");
    await fn_pld.aplicacion_reglas_pld(req, 3,remesaPago.cod_transmisor, remesaPago.cod_corresponsal,remesaPago.clave_cobro, datacte.cod_cliente);
    if (fn_pld.code == "00"){
         continuaPago = 1;
         console.log("FIn Validacion reglas PLD");
    }else{
        console.log("FIn Validacion reglas PLD else");
        alert_message = fn_pld.msg;
        let CtrlConfirmaion = true;
        let error_msg = fn_pld.msg;
        switch (fn_pld.accion) {
            case 0:
                result_parentesco = await catalogosBD.Cat_parentesco(req);
                result_proposito = await pool.query("select a.id as id, a.descripcion from vw_propositos_empresa a where a.id_empresa = ? and a.status = 1", [req.user.IdEmpresaCliente]);
                result_actividad  =await  pool.query("select a.cod_actividad as id, b.descripcion as descripcion from actividad_empresa a inner join cat_actividad_economica b on (b.cod_actividad = a.cod_actividad) where a.cod_empresa = ? and b.status = 1 ", [req.user.IdEmpresaCliente]);
                result_genero = await catalogosBD.Cat_genero();
                result_intencion = await catalogosBD.Cat_intencion_fondos(req);
                res.render("remesas/pago-remesa-paso2", {error_msg, data, CtrlConfirmaion, result_proposito,result_actividad,result_intencion, result_parentesco, result_paisesNac, result_genero, cod_proveedor});        
                break;
            case 1:
                req.flash("error_msg", fn_pld.msg);
                res.render("remesas/pago-remesa",{alert_message});
                break;
            case 2:
                break;    
        }
    }
   if(continuaPago == 1){
        console.log("entro al pago");
        let rs = await RemesaService.pagarRemesa(ParametrosPago); //Pagamos la remesa
        if (rs.code == "00"){
            req.session.remesa = {
              claveCobro: remesaPago.clave_cobro, //rs.order.claveCobro,
            };
            req.flash("success_msg", "Remesa pagada correctamente");
            res.redirect("/remesas/comprobante-pago");
        }else{
            error_msg = rs.message;
            let CtrlConfirmaion = true;
            result_parentesco = await catalogosBD.Cat_parentesco(req);
            result_proposito = await pool.query("select a.id as id, a.descripcion from vw_propositos_empresa a where a.id_empresa = ? and a.status = 1", [req.user.IdEmpresaCliente]);
            result_actividad  =await  pool.query("select a.cod_actividad as id, b.descripcion as descripcion from actividad_empresa a inner join cat_actividad_economica b on (b.cod_actividad = a.cod_actividad) where a.cod_empresa = ? and b.status = 1 ", [req.user.IdEmpresaCliente]);
            result_genero = await catalogosBD.Cat_genero();
            result_intencion = await catalogosBD.Cat_intencion_fondos(req);
            res.render("remesas/pago-remesa-paso2", {error_msg, data, CtrlConfirmaion, result_intencion, result_proposito,result_actividad, result_parentesco, result_paisesNac, result_genero, cod_proveedor});    
        }
   }
});


router.all('/remesas/comprobante-pago', isLoggedIn, async (req, res)=>{
  if (!req.session.remesaPago) {
    res.redirect("/menu");
  }

  // Se incluye la bitacora de MG
  let MG_object_Params = {};
  let proveedor = RemesaService.obtenProveedorRemesaPago({
    cve_cobro: req.session.remesa.claveCobro,
  });

if (proveedor == "MG") {
    let MG_mensajes_Bitacora = undefined;
    let mgiTransactionSessionID = req.session.mgiTransactionSessionID;
    MG_mensajes_Bitacora = [];// await bd.obtener_bitacoras_MG(req.session.remesa.claveCobro);
    MG_object_Params = {
      mgiTransactionSessionID: mgiTransactionSessionID,
      MG_mensajes_Bitacora: MG_mensajes_Bitacora,
    };
  }

  delete req.session.cte;
  delete req.session.Identificacion;

  //Devolvemos datos de recibo
  const re = await fnCatalogos.recibo_by_sucursal(
    req,
    req.session.remesaPago.cod_transmisor,
    "P"
  );
  const reciboCte = await pool.query("call usp_getReciboPago (?,?,?,?)", [
    req.user.IdEmpresaCliente,
    req.session.remesa.claveCobro,
    true,
    "P",
  ]);

  var templateScript = Handlebars.compile(re[0].recibo);

  if (reciboCte.length == 2) {
    let item = reciboCte[0];

    if (item[0].code == "00") {
      req.flash(
        "alert_message",
        "Se ha superado el limite de impresiones de recibo"
      );

      /* Registramos en bitacora */
      let dtosBitacora = req.session.remesaPago;
      fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
      fnBitacora.cod_transmisor = dtosBitacora.cod_transmisor;
      fnBitacora.cod_corresponsal = dtosBitacora.cod_corresponsal;
      fnBitacora.cve_cobro = dtosBitacora.clave_cobro;
      fnBitacora.observaciones =
        "LIMITE DE IMPRESION DE RECIBOS SUPERADOS EN LA SUCURSAL " +
        req.user.sucursal;
      fnBitacora.id_usuario = req.user.IdUser;
      fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
      await fnBitacora.Registra_MovimientoRemesa();
      /* Registramos en bitacora */

      delete req.session.remesa;
      res.redirect("/menu");
    }
    var importe_recibir_beneficiario_letra = fn.numeroALetras(
      item[0].importe_recibir_beneficiario,
      {
        plural: "PESOS",
        singular: "PESO",
      }
    );
    var divisaMP = item[0].divisa_origen == "USD" ? "DOLARES" : "PESOS";
    var divisaMS = item[0].divisa_origen == "USD" ? "DOLAR" : "PESO";
    var importe_origen_letra = fn.numeroALetras(item[0].importe_origen, {
      plural: divisaMP,
      singular: divisaMS,
    });

    var context = {
      clave_pago: item[0].clave_envio,
      nombre_agencia_creacion: item[0].nombre_agencia_creacion,
      sucursal_pago: item[0].sucursal_creacion,
      nombre_cajero: item[0].nombre_cajero,
      fecha_pago: item[0].fecha_operacion,
      nombre_beneficiario: item[0].nombre_beneficiario,
      nombre_remitente: item[0].nombre_remitente,
      importe_recibir_beneficiario: fn.FormatCurrency(
        "es-MX",
        "MXN",
        2,
        item[0].importe_recibir_beneficiario
      ),
      importe_origen: fn.FormatCurrency(
        "es-MX",
        item[0].divisa_origen,
        2,
        item[0].importe_origen
      ),
      importe_recibir_beneficiario_letra: importe_recibir_beneficiario_letra,
      importe_origen_letra: importe_origen_letra,
      identificacion_beneficiario: item[0].tipo_id,
      folioId_beneficiario: item[0].num_id,
      pais_origen: item[0].pais_origen,
      divisa_origen: item[0].divisa_origen,
      divisa_destino: item[0].divisa_pago,
      tc: item[0].tc,
      transmisor: item[0].transmisor,
      telefono_beneficiario: item[0].telefono_beneficiario,
    };

    /* Registramos en bitacora */
    let dtosBitacora = req.session.remesaPago;
    fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
    fnBitacora.cod_transmisor = dtosBitacora.cod_transmisor;
    fnBitacora.cod_corresponsal = dtosBitacora.cod_corresponsal;
    fnBitacora.cve_cobro = dtosBitacora.clave_cobro;
    fnBitacora.observaciones =
      "IMPRESION DE RECIBO EN LA SUCURSAL " + req.user.sucursal;
    fnBitacora.id_usuario = req.user.IdUser;
    fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
    await fnBitacora.Registra_MovimientoRemesa();
    /* Registramos en bitacora */

    var htmlRecibo = templateScript(context);
    let recibo = { recibo: htmlRecibo };

    res.render("remesas/pago-remesa-recibo", { recibo, context,  MG_object_Params});
  }
});
module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\remesas-pago.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\remesas.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const Handlebars = require("handlebars");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const fnBitacora = require("../lib/bitacoras");
const fn_pld = require("../lib/reglas_pld_in");
const fnCatalogos = require("../lib/catalogosBD");
const consumoApi = require("../lib/Apis/api_notificaciones");
const catalogosBD = require("../lib/catalogosBD");
const proxy  = require("../lib/Apis/proveedores/Reverse.Service");
const { repeatWithFinalize } = require("linq");


router.all('/operaciones/cancelacionOperacion',isLoggedIn, async (req, res)=>{ 
    //const result_transmisores = await pool.query("Select idEmpresa, nombre from empresas where idEmpresa = ?", req.user.IdEmpresaCliente);
    res.redirect('/menu');
});

router.get('/operaciones/cancelacionOperacion',isLoggedIn, async (req, res)=>{ 

    

    delete req.session.EnvioCotizacion;
    delete req.session.cte;
    delete req.session.Identificacion ;
    delete req.session.remesa;
    delete req.session.remesaPago;
    res.redirect('/menu');
});

router.get('/operaciones/cancelacionOperacionPago',isLoggedIn, async (req, res)=>{ 

    
 /* Registramos en bitacora */
 let dtosBitacora = req.session.remesaPago;
 fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
 fnBitacora.cod_transmisor = dtosBitacora.cod_transmisor;
 fnBitacora.cod_corresponsal = dtosBitacora.cod_corresponsal;
 fnBitacora.cve_cobro = dtosBitacora.clave_cobro;
 fnBitacora.observaciones = 'CANCELACION DE PAGO DEL GIRO EN SUCURSAL '+ req.user.sucursal;
 fnBitacora.id_usuario = req.user.IdUser;
 fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
 fnBitacora.Registra_MovimientoRemesa();
 /* Registramos en bitacora */


    delete req.session.EnvioCotizacion;
    delete req.session.cte;
    delete req.session.Identificacion ;
    delete req.session.remesa;
    delete req.session.remesaPago;
    res.redirect('/menu');
});


router.post('/remesas/reimpresion', isLoggedIn, async (req, res)=>{

    let remesa = req.body.txtRemesa;    
    let tipo = req.body.cboTipo;
    //Devolvemos datos de recibo
    if(tipo=="--")
    {
        res.redirect("/remesas/reimpresion");  
    };
    let reciboCte = [];
    if((tipo == "P")||(tipo == "RP")){
        let pr = [req.user.IdEmpresaCliente, remesa, true, tipo];
        console.log(pr);
        reciboCte = await pool.query("call usp_getReciboPago (?)",[pr]);
    }else if (tipo == "E"){
        reciboCte = await pool.query("call usp_getReciboEnvio (?,?,?)",[req.user.IdEmpresaCliente, remesa, true]);
    }
    if(reciboCte.length == 2){
        let item = reciboCte[0];
        if(item[0].code=="OK"){
            const re = await fnCatalogos.recibo_by_sucursal(req, item[0].cod_transmisor,  tipo);
            var templateScript = Handlebars.compile(re[0].recibo);

            var importe_recibir_beneficiario_letra = fn.numeroALetras(item[0].importe_recibir_beneficiario, {
                plural: 'PESOS',
                singular: 'PESO'
              }); 
            var context = "";
            if((tipo == "P") || (tipo == "RP")){
                var divisaMP = item[0].divisa_origen == "USD" ? "DOLARES" : "PESOS";
                var divisaMS = item[0].divisa_origen == "USD" ? "DOLAR" : "PESO";
                var importe_origen_letra = fn.numeroALetras(item[0].importe_origen, {
                    plural: divisaMP,
                    singular: divisaMS
                });
                context = { 
                    "clave_pago" : item[0].clave_envio,
                    "nombre_agencia_creacion" : item[0].nombre_agencia_creacion,
                    "sucursal_pago" : item[0].sucursal_creacion,
                    "nombre_cajero" : item[0].nombre_cajero,
                    "fecha_pago" : item[0].fecha_operacion,
                    "nombre_beneficiario" : item[0].nombre_beneficiario,
                    "nombre_remitente" : item[0].nombre_remitente,
                    "importe_recibir_beneficiario" : fn.FormatCurrency("es-MX", "MXN", 2, item[0].importe_recibir_beneficiario),
                    "importe_origen" : fn.FormatCurrency("es-MX", item[0].divisa_origen, 2,item[0].importe_origen),
                    "importe_recibir_beneficiario_letra" : importe_recibir_beneficiario_letra,
                    "importe_origen_letra" : importe_origen_letra,
                    "identificacion_beneficiario" : item[0].tipo_id,
                    "folioId_beneficiario" : item[0].num_id,
                    "pais_origen" : item[0].pais_origen,
                    "divisa_origen" : item[0].divisa_origen,
                    "divisa_destino" : item[0].divisa_pago
                };
                    /* Registramos en bitacora */
                    fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
                    fnBitacora.cod_transmisor = item[0].cod_transmisor;
                    fnBitacora.cod_corresponsal = item[0].cod_corresponsal;
                    fnBitacora.cve_cobro = item[0].clave_envio;
                    fnBitacora.observaciones = 'REIMPRESION DE RECIBO EN LA SUCURSAL '+ req.user.sucursal;
                    fnBitacora.id_usuario = req.user.IdUser;
                    fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
                    fnBitacora.Registra_MovimientoRemesa();
                    /* Registramos en bitacora */
            }else if(tipo == "E"){
                    var importe_cobrado_cliente_letra = fn.numeroALetras(item[0].importe_cobrado_cliente, {
                        plural: "PESOS",
                        singular: "PESO"
                    });
                    context = { 
                    "clave_envio" : item[0].clave_envio,
                    "nombre_agencia_creacion" : item[0].nombre_agencia_creacion,
                    "sucursal_creacion" : item[0].sucursal_creacion,
                    "nombre_cajero" : item[0].nombre_cajero,
                    "fecha_operacion" : item[0].fecha_operacion,
                    "nombre_beneficiario" : item[0].nombre_beneficiario,
                    "nombre_remitente" : item[0].nombre_remitente,
                    "importe_recibir_beneficiario" : fn.FormatCurrency("es-MX", "MXN", 2, item[0].importe_recibir_beneficiario),
                    "iva" : fn.FormatCurrency("es-MX", "MXN", 2, item[0].iva),
                    "importe_cobrado_cliente" : fn.FormatCurrency("es-MX", "MXN", 2,item[0].importe_cobrado_cliente),
                    "pais_destino" : item[0].pais_destino,
                    "agencia_destino" : item[0].agencia_destino,
                    "sucursal_destino" : item[0].sucursal_destino,
                    "importe_recibir_beneficiario_letra" : importe_recibir_beneficiario_letra,
                    "importe_cobrado_cliente_letra" : importe_cobrado_cliente_letra,
                    "comision_envio" : item[0].comision_envio != "" ? fn.FormatCurrency("es-MX", "MXN", 2, item[0].comision_envio) : "",
                    "identificacion_remitente" : item[0].identificacion_remitente,
                    "folioId_remitente" : item[0].folioId_remitente,
                    "pais_origen" : item[0].pais_origen,
                    "divisa_origen" : item[0].divisa_origen
                };
            }
            
    
            var htmlRecibo = templateScript(context);
            let recibo = { recibo: htmlRecibo};
            res.render("remesas/reimpresion-detalle", {recibo, context, tipo});
        }else if (item[0].code =="00"){
            req.flash("alert_message", "Se ha superado el limite de impresiones de recibo");

             /* Registramos en bitacora */
           
            fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
            fnBitacora.cod_transmisor = item[0].cod_transmisor;
            fnBitacora.cod_corresponsal = item[0].cod_corresponsal;
            fnBitacora.cve_cobro = item[0].clave_cobro;
            fnBitacora.observaciones = 'LIMITE DE IMPRESION DE RECIBOS SUPERADOS EN LA SUCURSAL (REIMPRESION) '+ req.user.sucursal;
            fnBitacora.id_usuario = req.user.IdUser;
            fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
            fnBitacora.Registra_MovimientoRemesa();

            /* Registramos en bitacora */
            res.redirect("/remesas/reimpresion");
        }else {
            tipo == "N"
            req.flash("alert_message", item[0].msg);
            res.redirect("/remesas/reimpresion");
        }

        
    };

});

router.get('/remesas/reimpresion', isLoggedIn, async (req, res)=>{ 
    let result_tipo = await fnCatalogos.Cat_tipo_recibo();
    res.render("remesas/reimpresion-recibo", {result_tipo});
});


router.post('/remesas/calificacion-remesa', isLoggedIn, async (req, res)=>{     
    let cod_transmisor = req.body.hfCaltrans;
    let cod_corresponsal = req.body.hfCalcorr;
    let cod_remesa = req.body.hfCalidnva;
    let params = [req.user.IdEmpresaCliente, cod_transmisor, cod_corresponsal, cod_remesa];
    let error_msg = "";

    try {
        let result = await pool.query("call usp_getRiesgo_remesa(?)", [params]); 
        let r =result[0];
         if(r[0].code=="00"){
             success_msg ="Remesa calificada correctamente";
             error_msg = "";
             
             req.flash("success_msg", success_msg);
         }else { 
             error_msg = r[0].msg;
             req.flash("error_msg", error_msg);
         }
     } catch (error) {
         error_msg = "Error al tratar de calificar la remesa: " + error;
         req.flash("error_msg", error_msg);
     }
     res.redirect("/remesas/consulta-ordenes/detalle?hfidnva=" + cod_remesa);
});

// ========== PROCESO DE DESPAGO DE REMESA ==========

router.get('/remesas/despago', isLoggedIn, async (req, res)=>{ 
    deleteSesiones(req);
    res.render("remesas/reverso-pago-remesa");
});
router.all('/remesas/despago', isLoggedIn, async (req, res) => {  
    const cve_cobro = req.body.txtRemesa || req.query.idrefnumber || "";
    const { IdEmpresaCliente } = req.user;  
    const proxyInstance = new proxy.ReverseService();  
    let result_motivos = await catalogosBD.Get_tipo_motivos_reverso_pago();

    const handleError = (msg) => {  return res.render("remesas/reverso-pago-remesa", { error_msg: msg , result_motivos });};  

    if (!cve_cobro.trim()) {  return handleError("La clave de cobro es requerida.");}  

    try {  
        const response = await proxyInstance.consulta_reversa_pago_remesa(IdEmpresaCliente, cve_cobro);  
        
        if (response.code !== "00") {  
            return handleError(`${response.msg}`);  
        }  
        let result_detalle = response.data;
        res.render("remesas/reverso-consulta-ordenes-detalle", {result_detalle, result_motivos});  
    } catch (error) {  
        return handleError(` ${error.message}`);  
    }  
});

router.all('/remesas/Processdespago', isLoggedIn, async (req, res) => {  
    const {
      hfidnva: cve_cobro = "",
      hftrans: cod_transmisor = "",
      hfcorr: cod_corresponsal = "",
      hfpfx: prefijo_servicio = "",
      txtTicket: ticket = "",
      cboMotivo: motivo = "",
      txtObservaciones: observaciones = "",
      hfid: importe_destino = 0,
      hftransd: remesador = ""
    } = req.body;
    let data = {motivo : motivo, ticket : ticket, observaciones : observaciones};
    const proxyInstance = new proxy.ReverseService(); 
    const response = await proxyInstance.consulta_reversa_pago_remesa(req.user.IdEmpresaCliente, cve_cobro);  
    let result_detalle = response.data;
    const handleError = async (msg) => { 
        let result_motivos = await catalogosBD.Get_tipo_motivos_reverso_pago();
         return res.render("remesas/reverso-consulta-ordenes-detalle", { error_msg: msg , result_motivos, data, result_detalle });};   
     
    try {
        let params = proxyInstance.request_reversa_pago_remesa;
        params.cod_corresponsal = cod_corresponsal;
        params.cod_empresa = req.user.IdEmpresaCliente;
        params.cod_transmisor = cod_transmisor;
        params.cve_cobro = cve_cobro;
        params.motivo = motivo;
        params.observaciones = observaciones;
        params.prefijo_servicio = prefijo_servicio;
        params.no_ticket = ticket;
        params.cod_usuario = req.user.IdUser;
        params.cod_sucursal = result_detalle.cod_sucursal_pago;
        params.nombre_usuario = req.user.Nombre;
        params.importe_destino = importe_destino;
        params.transmisor = remesador;
        console.log(params);
        proxyInstance.usuario = req.user;
        const response = await proxyInstance.ejecuta_reversa_pago_remesa(params); 
        if (response.code !== "00") {  
            return handleError(`${response.msg}`);  
        }  
        req.session.despago = params;
        req.flash("success_msg", "Remesa reversada (despagada) correctamente");
        res.redirect("/remesas/comprobante-despago"); 
    } catch (error) {
        return handleError(` ${error.message}`);  
    }

});
router.all('/remesas/comprobante-despago', isLoggedIn, async (req, res)=>{
    let tipo_operacion = 'RP';
    if(!req.session.despago)
    {
        res.redirect("/menu");
    };

    //Devolvemos datos de recibo
    const re = await fnCatalogos.recibo_by_sucursal(req, req.session.despago.cod_transmisor,  tipo_operacion);
    let request = [req.user.IdEmpresaCliente, req.session.despago.cve_cobro, true, tipo_operacion];
    const reciboCte = await pool.query("call usp_getReciboPago (?)",[request]);
    var templateScript = Handlebars.compile(re[0].recibo);
    let dtosBitacora = req.session.despago;
    if(reciboCte.length == 2){
        let item = reciboCte[0];
        if (item[0].code =="00"){
            req.flash("alert_message", "Se ha superado el limite de impresiones de recibo");

            /* Registramos en bitacora */
            
            fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
            fnBitacora.cod_transmisor = dtosBitacora.cod_transmisor;
            fnBitacora.cod_corresponsal = dtosBitacora.cod_corresponsal;
            fnBitacora.cve_cobro = dtosBitacora.cve_cobro;
            fnBitacora.observaciones = 'LIMITE DE IMPRESION DE RECIBOS SUPERADOS EN LA SUCURSAL '+ req.user.sucursal;
            fnBitacora.id_usuario = req.user.IdUser;
            fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
            fnBitacora.Registra_MovimientoRemesa();
            /* Registramos en bitacora */

            delete req.session.despago;
            res.redirect('/menu');
        }else if(item[0].code =="01"){
              req.flash("success_msg", "Remesa reversada correctamente");
              req.flash("alert_message", "No es posible imprimir el recibo");
              res.redirect('/menu');
        }else{
            var importe_recibir_beneficiario_letra = fn.numeroALetras(item[0].importe_recibir_beneficiario, {
                plural: 'PESOS',
                singular: 'PESO'
            
            });
            var divisaMP = item[0].divisa_origen == "USD" ? "DOLARES" : "PESOS";
            var divisaMS = item[0].divisa_origen == "USD" ? "DOLAR" : "PESO";
            var importe_origen_letra = fn.numeroALetras(item[0].importe_origen, {
                plural: divisaMP,
                singular: divisaMS
            
            });
            var context = { 
                "clave_pago" : item[0].clave_envio,
                "nombre_agencia_creacion" : item[0].nombre_agencia_creacion,
                "sucursal_pago" : item[0].sucursal_creacion,
                "nombre_cajero" : item[0].nombre_cajero,
                "fecha_pago" : item[0].fecha_operacion,
                "nombre_beneficiario" : item[0].nombre_beneficiario,
                "nombre_remitente" : item[0].nombre_remitente,
                "importe_recibir_beneficiario" : fn.FormatCurrency("es-MX", "MXN", 2, item[0].importe_recibir_beneficiario),
                "importe_origen" : fn.FormatCurrency("es-MX", item[0].divisa_origen, 2,item[0].importe_origen),
                "importe_recibir_beneficiario_letra" : importe_recibir_beneficiario_letra,
                "importe_origen_letra" : importe_origen_letra,
                "identificacion_beneficiario" : item[0].tipo_id,
                "folioId_beneficiario" : item[0].num_id,
                "pais_origen" : item[0].pais_origen,
                "divisa_origen" : item[0].divisa_origen,
                "divisa_destino" : item[0].divisa_pago,
                "tc" : item[0].tc,
                "transmisor" : item[0].transmisor,
                "telefono_beneficiario" : item[0].telefono_beneficiario,
            };

            /* Registramos en bitacora */
            
            fnBitacora.cod_empresa = req.user.IdEmpresaCliente;
            fnBitacora.cod_transmisor = dtosBitacora.cod_transmisor;
            fnBitacora.cod_corresponsal = dtosBitacora.cod_corresponsal;
            fnBitacora.cve_cobro = dtosBitacora.cve_cobro;
            fnBitacora.observaciones = 'IMPRESION DE RECIBO EN LA SUCURSAL '+ req.user.sucursal;
            fnBitacora.id_usuario = req.user.IdUser;
            fnBitacora.cod_empresa_usuario = req.user.IdEmpresa;
            await fnBitacora.Registra_MovimientoRemesa();
            /* Registramos en bitacora */
            var htmlRecibo = templateScript(context);
            let recibo = { recibo: htmlRecibo};
            res.render("remesas/reverso-pago-remesa-recibo", {recibo, context});
        }
    };

});
// ========== FIN PROCESO DE DESPAGO DE REMESA ==========


function deleteSesiones(req){
    delete req.session.cte;
    delete req.session.Identificacion;
    delete req.session.remesaPago;
}

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\remesas.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\reportes.js ---

const express = require("express");
const router = express.Router();
const pool = require("../database");
const { isLoggedIn } = require("../lib/auth");
const fn = require("../lib/catalogosFunctions");
const fnReportesExcel = require("../lib/reportesExcel_Remesas");
const url = require('url');
const ExcelJS = require('exceljs');


router.get('/reportes/operaciones', isLoggedIn, async (req, res)=>{ 
    main : {
      let parametrosBusqueda = {};     
      let  resultReportes = {};
      let result_sucursales = {};
      let result_transmisores = {};

      
      if( req.user.IdPerfilEquivalente == "2"){
        result_sucursales = await pool.query("select cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_agente = ? and status = 1", [req.user.IdEmpresaCliente, req.user.IdAgenteRelacionado]); 
      }

      if( req.user.IdPerfilEquivalente == "1" || req.user.IdPerfilEquivalente == "6" ){
        result_transmisores = await pool.query("select cod_remesador , nombre from empresa_remesadores where cod_empresa = ?", [req.user.IdEmpresaCliente]); 
      }
        
        const result_agentes = await pool.query("select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? ", req.user.IdEmpresaCliente); 
        delete req.session.consultaBuzon;
        res.render("reportes/remesas",{result_transmisores,result_sucursales, result_agentes, resultReportes, parametrosBusqueda});
    }
});

router.post('/reportes/operaciones', isLoggedIn, async (req, res)=>{ 
  main : {
    let result_sucursales = {};
    let result_transmisores = {};
    let result_agentes = {};
    let parametrosBusqueda = {
      cve_cobro : req.body.txtRemesa,
      fechaInicio : req.body.hfstartDate != "" ? fn.ConvierteFechaFormatoBase(req.body.hfstartDate) : "",
      fechaFin : req.body.hfendDate !="" ? fn.ConvierteFechaFormatoBase(req.body.hfendDate) : "",
      fechaInicio_st : req.body.hfstartDate != "" ? req.body.hfstartDate : "",
      fechaFin_st : req.body.hfendDate !="" ? req.body.hfendDate : "",
      agente : req.body.cboAgente  == undefined ? "" : req.body.cboAgente,
      transmisor : req.body.cboTransmisor == undefined ? "" : req.body.cboTransmisor,
      sucursal : req.body.cboSucursal == undefined ? "" : req.body.cboSucursal ,
      
    };
    
    req.session.consultaBuzon = parametrosBusqueda;
    var sqlP = "";
    if( req.user.IdPerfilEquivalente == "1" || req.user.IdPerfilEquivalente == "6" ){
      sqlP = "Select * from vw_remesas_in_calificiacion_riesgo where cod_empresa = '" + req.user.IdEmpresaCliente +"'";
    }
    else{
      sqlP = "Select * from vw_reporte_remesas where cod_empresa = '" + req.user.IdEmpresaCliente +"'";
       }
   
    var sql = "";
    let sc = "";
    let itembus;
    switch (req.user.IdPerfilEquivalente) {
      case 5:
        sql = sql + " and status = 'P' and cod_sucursal_pago = '"+ req.user.cod_sucursal +"' and cod_empleado_pago = '" + req.user.IdUser +"'";
        break;
      case 4:
      case 3:
        sql = sql + " and status = 'P' and cod_sucursal_pago = '"+ req.user.cod_sucursal + "'";
        break;
      case 2:
        itembus = "";
        if (Array.isArray( parametrosBusqueda.sucursal) == true){
          if(parametrosBusqueda.sucursal.includes( '--' )==false){
            parametrosBusqueda.sucursal.forEach(element => {
              itembus = itembus + element + ',';
            });
            itembus = itembus.substring(0, itembus.length -1);
            sc = " and cod_sucursal_pago in ("+ itembus  +") ";
          }
        }else{
          if (parametrosBusqueda.sucursal !="--" && parametrosBusqueda.sucursal !=""){
            sc = " and cod_sucursal_pago = "+ parametrosBusqueda.sucursal  + " ";
          }
        }
          sql = sql + " and status = 'P' and cod_agente = '"+ req.user.IdAgenteRelacionado + "'" + sc;
          break;
      case 1 :
      case 6 :
        itembus = "";
        if (Array.isArray( parametrosBusqueda.transmisor) == true){
          if(parametrosBusqueda.transmisor.includes( '--' )==false){
            parametrosBusqueda.transmisor.forEach(element => {
              itembus = itembus + element + ',';
            });
            itembus = itembus.substring(0, itembus.length -1);
            sc = " and cod_transmisor in ('"+ itembus  +"') ";
          }
        }else{
          if (parametrosBusqueda.transmisor !="--" && parametrosBusqueda.transmisor !=""){
            sc = " and cod_transmisor = '"+ parametrosBusqueda.transmisor  + "' ";
          }
        }

        if (parametrosBusqueda.agente !=""){
          sc = sc + " and cod_agente = '"+ parametrosBusqueda.agente  + "' ";
        }

        if (Array.isArray( parametrosBusqueda.sucursal) == true){
          if(parametrosBusqueda.sucursal.includes( '--' )==false){
            parametrosBusqueda.sucursal.forEach(element => {
              itembus = itembus + element + ',';
            });
            itembus = itembus.substring(0, itembus.length -1);
            sc = sc + " and cod_sucursal_pago in ("+ itembus  +") ";
          }
        }else{
          if (parametrosBusqueda.sucursal !="--" && parametrosBusqueda.sucursal !=""){
            sc = sc + " and cod_sucursal_pago = "+ parametrosBusqueda.sucursal  + " ";
          }
        }
        sql = sql + " and status = 'P'" + sc;
        break;    
      default:
        break;
    }
    
    sql = sql + (parametrosBusqueda.fechaInicio !="" && parametrosBusqueda.fechaFin ? " and DATE(fec_status_base) between '"+ parametrosBusqueda.fechaInicio +"' and '"+ parametrosBusqueda.fechaFin + "'" : "");
    sql = sql + (parametrosBusqueda.cve_cobro !="" ? " and cve_cobro = '"+ parametrosBusqueda.cve_cobro + "'": "");
      let  resultReportes = await pool.query( sqlP + sql);
      req.session.reporte = {fecha_inicio : parametrosBusqueda.fechaInicio_st, fecha_fin : parametrosBusqueda.fechaFin_st, data : resultReportes };
     
      if( req.user.IdPerfilEquivalente == "2"){
        result_sucursales = await pool.query("select cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_agente = ? and status = 1", [req.user.IdEmpresaCliente, req.user.IdAgenteRelacionado]); 
      }

      if( req.user.IdPerfilEquivalente == "1" || req.user.IdPerfilEquivalente == "6"){
        result_transmisores = await pool.query("select cod_remesador , nombre from empresa_remesadores where cod_empresa = ?", [req.user.IdEmpresaCliente]); 
        result_agentes = await pool.query("select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? ", req.user.IdEmpresaCliente); 
       
      }

      res.render("reportes/remesas",{resultReportes,result_agentes, result_sucursales,result_transmisores, parametrosBusqueda});
  }
});

router.get('/reportes/descargaReporteRemesas', function(req, res) {
  let titulo = "REPORTE DE PAGOS INTERNACIONAL";
  let tipoReporte = req.query.tp;
  var reporte = req.session.reporte;

  res.writeHead(200, {
    'Content-Disposition': 'attachment; filename="Reporte' + tipoReporte + '_' + reporte.fecha_inicio.replace('/','-') +'_to_'+ reporte.fecha_fin.replace('/','-') +'.xlsx"',
    'Transfer-Encoding': 'chunked',
    'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
  })

  var workbook = new ExcelJS.stream.xlsx.WorkbookWriter({ stream: res, useStyles: true })
  var worksheet = workbook.addWorksheet('Reporte Remesas');
  let showGrandTotal = false;
  if(req.user.IdPerfilEquivalente == 1){showGrandTotal = true; }

  switch (tipoReporte) {
    case "TE":
      let linqResult = fnReportesExcel.Reporte_Transmisor(reporte.data);
      worksheet = fnReportesExcel.GeneraExcel_Reporte_Transmisor(worksheet, linqResult, showGrandTotal, titulo, reporte);
      break;
    case "AE":
      let linqResult2  = fnReportesExcel.Reporte_Basico(reporte.data);
      worksheet = fnReportesExcel.GeneraExcel_Reporte_Basico(worksheet, linqResult2, showGrandTotal, titulo, reporte);
      break;
    default:
      break;
  }

  worksheet.commit()
  workbook.commit()
});

router.get('/reportes/operaciones_enviadas', isLoggedIn, async (req, res)=>{ 
  main : {
    let parametrosBusqueda = {};     
    let  resultReportes = {};
    let result_sucursales = {};
    let result_transmisores = {};

    
    if( req.user.IdPerfilEquivalente == "2"){
      result_sucursales = await pool.query("select cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_agente = ? and status = 1", [req.user.IdEmpresaCliente, req.user.IdAgenteRelacionado]); 
    }

    if( req.user.IdPerfilEquivalente == "1" || req.user.IdPerfilEquivalente == "6" ){
      result_transmisores = await pool.query("select cod_remesador , nombre from empresa_remesadores where cod_empresa = ?", [req.user.IdEmpresaCliente]); 
    }
      
      const result_agentes = await pool.query("select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? ", req.user.IdEmpresaCliente); 
      delete req.session.consultaBuzon;
      res.render("reportes/remesas_enviadas",{result_transmisores,result_sucursales, result_agentes, resultReportes, parametrosBusqueda});
  }
});

router.post('/reportes/operaciones_enviadas', isLoggedIn, async (req, res)=>{ 
main : {
  let result_sucursales = {};
  let result_transmisores = {};
  let result_agentes = {};
  let parametrosBusqueda = {
    cve_cobro : req.body.txtRemesa,
    fechaInicio : req.body.hfstartDate != "" ? fn.ConvierteFechaFormatoBase(req.body.hfstartDate) : "",
    fechaFin : req.body.hfendDate !="" ? fn.ConvierteFechaFormatoBase(req.body.hfendDate) : "",
    fechaInicio_st : req.body.hfstartDate != "" ? req.body.hfstartDate : "",
    fechaFin_st : req.body.hfendDate !="" ? req.body.hfendDate : "",
    agente : req.body.cboAgente  == undefined ? "" : req.body.cboAgente,
    transmisor : req.body.cboTransmisor == undefined ? "" : req.body.cboTransmisor,
    sucursal : req.body.cboSucursal == undefined ? "" : req.body.cboSucursal ,
    
  };
  
  req.session.consultaBuzon = parametrosBusqueda;
  var sqlP = "";
  var campoFecha = "fec_status_base";
  if(req.user.IdPerfilEquivalente==1){
    sqlP = "Select * from vw_remesas_out_calificacion_riesgo where cod_empresa = '" + req.user.IdEmpresaCliente +"'";
    campoFecha = "fec_insert_base";
  }
  else{
    sqlP = "Select * from vw_reporte_remesas_out where cod_empresa = '" + req.user.IdEmpresaCliente +"'";
  }
 
  var sql = "";
  let sc = "";
  let itembus;
  switch (req.user.IdPerfilEquivalente) {
    case 5:
      sql = sql + " and status in ('P','R') and cod_sucursal_creacion = '"+ req.user.cod_sucursal +"' and cod_empleado_creacion = '" + req.user.IdUser +"'";
      break;
    case 4:
    case 3:
      sql = sql + " and status in ('P','R') and cod_sucursal_creacion = '"+ req.user.cod_sucursal + "'";
      break;
    case 2:
      itembus = "";
      if (Array.isArray( parametrosBusqueda.sucursal) == true){
        if(parametrosBusqueda.sucursal.includes( '--' )==false){
          parametrosBusqueda.sucursal.forEach(element => {
            itembus = itembus + element + ',';
          });
          itembus = itembus.substring(0, itembus.length -1);
          sc = " and cod_sucursal_creacion in ("+ itembus  +") ";
        }
      }else{
        if (parametrosBusqueda.sucursal !="--" && parametrosBusqueda.sucursal !=""){
          sc = " and cod_sucursal_creacion = "+ parametrosBusqueda.sucursal  + " ";
        }
      }
        sql = sql + " and status in ('P','R') and cod_agente = '"+ req.user.IdAgenteRelacionado + "'" + sc;
        break;
    case 1 :
    case 6 :
      itembus = "";
      if (Array.isArray( parametrosBusqueda.transmisor) == true){
        if(parametrosBusqueda.transmisor.includes( '--' )==false){
          parametrosBusqueda.transmisor.forEach(element => {
            itembus = itembus + element + ',';
          });
          itembus = itembus.substring(0, itembus.length -1);
          sc = " and cod_transmisor in ('"+ itembus  +"') ";
        }
      }else{
        if (parametrosBusqueda.transmisor !="--" && parametrosBusqueda.transmisor !=""){
          sc = " and cod_transmisor = '"+ parametrosBusqueda.transmisor  + "' ";
        }
      }

      if (parametrosBusqueda.agente !=""){
        sc = sc + " and cod_agente = '"+ parametrosBusqueda.agente  + "' ";
      }

      if (Array.isArray( parametrosBusqueda.sucursal) == true){
        if(parametrosBusqueda.sucursal.includes( '--' )==false){
          parametrosBusqueda.sucursal.forEach(element => {
            itembus = itembus + element + ',';
          });
          itembus = itembus.substring(0, itembus.length -1);
          sc = sc + " and cod_sucursal_creacion in ("+ itembus  +") ";
        }
      }else{
        if (parametrosBusqueda.sucursal !="--" && parametrosBusqueda.sucursal !=""){
          sc = sc + " and cod_sucursal_creacion = "+ parametrosBusqueda.sucursal  + " ";
        }
      }
      sql = sql + " and status in ('P','R')" + sc;
      break;    
    default:
      break;
  }
  
    
    sql = sql + (parametrosBusqueda.fechaInicio !="" && parametrosBusqueda.fechaFin ? " and DATE("+ campoFecha +") between '"+ parametrosBusqueda.fechaInicio +"' and '"+ parametrosBusqueda.fechaFin + "'" : "");
  sql = sql + (parametrosBusqueda.cve_cobro !="" ? " and (cve_cobro = '"+ parametrosBusqueda.cve_cobro + "' or folio_interno = '"+ parametrosBusqueda.cve_cobro +"')": "");
   
    let  resultReportes = await pool.query( sqlP + sql);
    req.session.reporte_envio = {fecha_inicio : parametrosBusqueda.fechaInicio_st, fecha_fin : parametrosBusqueda.fechaFin_st, data : resultReportes };
   
    if( req.user.IdPerfilEquivalente == "2"){
      result_sucursales = await pool.query("select cod_sucursal, nombre from agentes_sucursales where cod_empresa = ? and cod_agente = ? and status = 1", [req.user.IdEmpresaCliente, req.user.IdAgenteRelacionado]); 
    }

    if( req.user.IdPerfilEquivalente == "1" || req.user.IdPerfilEquivalente == "6"){
      result_transmisores = await pool.query("select cod_remesador , nombre from empresa_remesadores where cod_empresa = ?", [req.user.IdEmpresaCliente]); 
      result_agentes = await pool.query("select a.cod_agente, a.nombre from  agentes_relacionados a where a.cod_empresa = ? ", req.user.IdEmpresaCliente); 
     
    }

    res.render("reportes/remesas_enviadas",{resultReportes,result_agentes, result_sucursales,result_transmisores, parametrosBusqueda});
}
});

router.get('/reportes/descargaReporteRemesas_enviadas', function(req, res) {
  let titulo = "REPORTE DE ENVIOS NACIONAL";
let tipoReporte = req.query.tp;
var reporte = req.session.reporte_envio;

res.writeHead(200, {
  'Content-Disposition': 'attachment; filename="Reporte_enviadas' + tipoReporte + '_' + reporte.fecha_inicio.replace('/','-') +'_to_'+ reporte.fecha_fin.replace('/','-') +'.xlsx"',
  'Transfer-Encoding': 'chunked',
  'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
})

var workbook = new ExcelJS.stream.xlsx.WorkbookWriter({ stream: res, useStyles: true })
var worksheet = workbook.addWorksheet('Reporte Remesas');
let showGrandTotal = false;
if(req.user.IdPerfilEquivalente == 1){showGrandTotal = true; }

switch (tipoReporte) {
  case "TE":
    let linqResult = fnReportesExcel.Reporte_Transmisor_envio(reporte.data);
    worksheet = fnReportesExcel.GeneraExcel_Reporte_Transmisor_envio(worksheet, linqResult, showGrandTotal, titulo, reporte);
    break;
  case "AE":
    let linqResult2  = fnReportesExcel.Reporte_Basico_envio(reporte.data);
    worksheet = fnReportesExcel.GeneraExcel_Reporte_Basico_envio(worksheet, linqResult2, showGrandTotal, titulo, reporte);
    break;
  default:
    break;
}

worksheet.commit()
workbook.commit()
});
module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\reportes.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\riesgos-pm.js ---

const express = require("express");
const pool = require("../database");
const multer = require("multer");
const fs = require('fs');
const path = require("path");
const { userInfo } = require("os");
const { isLoggedIn } = require("../lib/auth");
const { session } = require("passport");
var Enumerable = require('linq');
const upload = require("../lib/upload-excel");
const excelController = require("../lib/excell-controller");
const readXlsxFile = require("read-excel-file/node");
const { response } = require("express");
const fn = require("../lib/catalogosFunctions");
const router = express.Router();
const url = require('url');
const { generateKeyPair } = require("crypto");

let tipoPersonaMostrar = "PM";




router.get('/riesgos/catalogos/pm', isLoggedIn, async(req, res)=>{ 
    let idEmpresa = "";
    let reusltEfectivo = [];
    const rs = await pool.query("Select a.id_plantilla from plantilla_empresa a where a.id_empresa = ?", req.user.IdEmpresaCliente);                   
    if(rs.length==0){
        req.flash("alert_message", "Debes seleccionar una plantilla antes de poder configurar los catálogos correspondientes.<br> Para asociar una plantilla debes ingresar al menú <i>Riesgos - Configuración de Niveles</i>");
        res.redirect("/menu");
    } 
    var sql2 = "select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?"
    const plantilla = await pool.query(sql2, req.user.IdEmpresaCliente); 

    var sqlDatos = "Select a.id as id, a.id_campo, a.categoria, a.descripcion as descripcion, c.porcentaje as porcentaje_envio, case when ifnull(c.id_campo,0) = 0 then 0 else 1 end as seleccionado_envio,a.clasificacion from cat_campos_riesgo a "
    sqlDatos = sqlDatos + "left join cat_empresa_campos_riesgo_pm c on (c.id_campo = a.id and c.cod_empresa = ?) where a.tipoPersona = 'PM' and clasificacion = 'C' order by a.id_campo asc"

    let campos = await pool.query(sqlDatos, [req.user.IdEmpresaCliente,req.user.IdEmpresaCliente]);
    
    var sql2P = "select id_nivel, descripcion from niveles_monto where nivel_grupo = 1 order by id_nivel";
    let plantilla_niveles = await pool.query(sql2P); 

    req.session.PlantillaSeleccionada = plantilla;
    var sqlDatosEfectivo = "call usp_getCamposConfiguracionRiesgo(?,'02','ENV','PM')";
    let rs1 = await pool.query(sqlDatosEfectivo, [req.user.IdEmpresaCliente]);
    let reusltEfectivoSel = rs1[0];
    let reusltEfectivoPor = rs1[1];

    for (let index = 0; index < reusltEfectivoSel.length; index++) {
        const elementS = reusltEfectivoSel[index];
        const elementP = reusltEfectivoPor[index];
        reusltEfectivo.push(
            { 
                id_campo: elementS.id_campo,
                categoria: elementS.categoria,
                descripcion: elementS.descripcion,
                tipo_servicio : elementS.tipo_servicio,
                tipo_operacion : elementS.tipo_operacion,
                level1Sel: elementS.level1,
                level2Sel: elementS.level2,
                level3Sel: elementS.level3,
                level4Sel: elementS.level4,
                level1Por: elementP.level1,
                level2Por: elementP.level2,
                level3Por: elementP.level3,
                level4Por: elementP.level4
            }
        );
    }


    res.render("riesgos/config-catalogos-pm",{campos, plantilla_niveles, reusltEfectivo});
});

router.post('/riesgos/ajx/updCampos_pm',isLoggedIn,  async (req, res)=>{ 
    let campos = req.body.campos;
    
    let mensajeRespuesta = [];
    let contador=1;
    
if(campos!=""){
    campos = campos.replace("P","");
}


    let resultado2 = await pool.query("delete from cat_empresa_campos_riesgo_pm where cod_empresa = ?", req.user.IdEmpresaCliente);
    let arreglo = campos.split("|");
    arreglo.forEach( async function(item){ 
        var elemento = item.split(":");
        var tabla ="";
        tabla ="insert into cat_empresa_campos_riesgo_pm values(?,?,?)";
        var id = elemento[1];
        id = id.replace("P","");
        var porcentaje = elemento[2];
        let params = [req.user.IdEmpresaCliente, id, porcentaje];
        await pool.query(tabla, params).then(function(result){
            if(contador==arreglo.length){
                res.send("OK");
            }
        }).catch(function(err){
            mensajeRespuesta.push(err);
            if(contador==arreglo.length){
                res.send(mensajeRespuesta);
            }
        });
        contador++;
    });
  });

  router.get('/riesgos/catalogos/estados-pm', isLoggedIn,  async (req, res)=>{ 
    
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos/pm");
     }
    const resultadoCatalogo = await pool.query("select * from vw_riegos_cat_estados_empresa where id_empresa = ? and tipo_servicio = 'PM'", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-estados", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.get('/riesgos/catalogos/municipios-pm',  async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
   const resultadoCatalogo = await pool.query("select * from vw_riesgo_cat_municipios_empresa where id_empresa = ? and tipo_servicio = 'PM'", req.user.IdEmpresaCliente);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-municipios", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.get('/riesgos/catalogos/paises-pm', isLoggedIn,  async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
        res.redirect("/riesgos/catalogos/pm");
    }
    
    const resultadoCatalogo = await pool.query("select * from vw_riegos_cat_paises_empresa where id_empresa = ? and tipo_servicio = 'PM'", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-paises", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

var type = upload.single('flUpload');
router.post("/riesgos/catalogos/paises-pm", isLoggedIn, type, async(req, res)=>{
    let success_msg="";
    let error_msg="";
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos/pm");
     }
     let maximoNivel = req.session.PlantillaSeleccionada[req.session.PlantillaSeleccionada.length -1 ]
    try {
        if (req.file == undefined) {
        error_msg = "Por favor sube un archivo de excel";
        res.render("riesgos/config-paises-pm",{error_msg, tipoPersonaMostrar});
        }
        let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
        readXlsxFile(path).then((rows) => {
          rows.shift();
          let datosExcel = [];
          let errores = [];
          let contador = 0;
          rows.forEach((row) => {
              console.log(row);
            if(parseInt(row[2]) < 1 || parseInt(row[2]) > parseInt(maximoNivel.id_nivel))
            {
                errores.push({text:row[1]});
                contador = contador + 1;
            }
            datosExcel.push([req.user.IdEmpresaCliente,String(row[0]),"PM", row[2]]);
          });
          let msgError = "";
          if(contador!=0){
            if(contador < 50){
                msgError = "Los niveles asociados a las siguientes descripciones no son válidos, la información no se ha cargado, verifica el archivo e intenta de nuevo ";
            }else{
                msgError = "Error en la asignación de niveles, favor de verificar el archivo e intenta de nuevo";
                errores = [];
            }
         }
         
          if(msgError != ""){res.render("riesgos/config-paises", {msgError, errores, tipoPersonaMostrar }); return;}  

            pool.query("Delete from riesgos_cat_paises_empresa where cod_empresa = ? and tipo_servicio = 'PM'", req.user.IdEmpresaCliente).then(function(result) {
              
                pool.query("Insert into riesgos_cat_paises_empresa (cod_empresa, cod_pais,tipo_servicio, id_nivel) values ?", [datosExcel]).then(function(result){
                    success_msg ="La configuración de los niveles de riesgo para el catálogo de paises se ha guardado correctamente."
                    
                    fs.unlinkSync(path);
                    
                    req.flash("success_msg",success_msg);    
                    res.redirect("/riesgos/catalogos/paises-pm");
                }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
            });
            }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
            });
        });
      } catch (error) {
        error_msg = "El archivo no pudo ser cargado correctamente";
        res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
      }
});

router.post('/riesgos/catalogos/CargaPaises-pm', isLoggedIn, async (req, res)=>{ 
    
    pool.query("insert into riesgos_cat_paises_empresa select ?, cod_pais, 'PM', 0  from cat_paises", req.user.IdEmpresaCliente).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/paises-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/CopiaPaises-pm', isLoggedIn,  async (req, res)=>{ 
    let params = [req.user.IdEmpresaCliente,'PAIS','PM'];
    pool.query("call usp_copia_data_by_elemento_riesgo(?)",[params] ).then(function(result){
        let success_msg = "Catálogo cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/paises-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
    }); 
});


router.post('/riesgos/catalogos/ajx/updPaises-pm', isLoggedIn, async (req, res)=>{ 
    pool.query("update  riesgos_cat_paises_empresa set id_nivel = ? where cod_empresa = ? and cod_pais = ? and tipo_servicio = 'PM'", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });
});

router.get('/riesgos/catalogos/estados-pm', isLoggedIn,  async (req, res)=>{ 
    
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos/pm");
     }
    
    const resultadoCatalogo = await pool.query("select * from vw_riegos_cat_estados_empresa where id_empresa = ? and tipo_servicio = 'PM'", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-estados", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.post("/riesgos/catalogos/estados-pm", isLoggedIn, type, async(req, res)=>{
    
    let success_msg="";
    let error_msg="";
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos/pm");
     }
     let maximoNivel = req.session.PlantillaSeleccionada[req.session.PlantillaSeleccionada.length -1 ]
    try {
        if (req.file == undefined) {
        error_msg = "Por favor sube un archivo de excel";
        res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
        }
        let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
        readXlsxFile(path).then((rows) => {
          rows.shift();
          let datosExcel = [];
          let errores = [];
          let contador = 0;
          rows.forEach((row) => {
            if(parseInt(row[2]) < 1 || parseInt(row[2]) > parseInt(maximoNivel.id_nivel))
            {
                errores.push({text:row[1]});
                contador = contador + 1;
            }
            datosExcel.push([req.user.IdEmpresaCliente,row[0],'PM', row[2]]);
          });
          let msgError = "";
          if(contador!=0){
            if(contador < 50){
                msgError = "Los niveles asociados a las siguientes descripciones no son válidos, la información no se ha cargado, verifica el archivo e intenta de nuevo ";
            }else{
                msgError = "Error en la asignación de niveles, favor de verificar el archivo e intenta de nuevo";
                errores = [];
            }
         }
         
          if(msgError != ""){res.render("riesgos/config-estados", {msgError, errores, tipoPersonaMostrar }); return;}  

            pool.query("Delete from riesgos_cat_estados_empresa where cod_empresa = ? and tipo_servicio = 'PM'", req.user.IdEmpresaCliente).then(function(result) {
              
                pool.query("Insert into riesgos_cat_estados_empresa (cod_empresa, cod_estado,tipo_servicio, id_nivel) values ?", [datosExcel]).then(function(result){
                    success_msg ="La configuración de los niveles de riesgo para el catálogo de estados se ha guardado correctamente."
                    
                    fs.unlinkSync(path);
                    
                    req.flash("success_msg",success_msg);    
                    res.redirect("/riesgos/catalogos/estados-pm");
                }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
            });
            }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
            });
        });
      } catch (error) {
        
        error_msg = "El archivo no pudo ser cargado correctamente";
        res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
      }
});

router.post('/riesgos/catalogos/CargaEstados-pm', isLoggedIn,  async (req, res)=>{ 
    
    pool.query("insert into riesgos_cat_estados_empresa select ?, cod_estado, 'PM',  0  from cat_estados_spmx", req.user.IdEmpresaCliente).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/estados-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/CopiaEstados-pm', isLoggedIn,  async (req, res)=>{ 
    let params = [req.user.IdEmpresaCliente,'ESTADO','PM'];
    pool.query("call usp_copia_data_by_elemento_riesgo(?)",[params] ).then(function(result){
        let success_msg = "Catálogo cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/estados-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/ajx/updEstados-pm',isLoggedIn,  async (req, res)=>{ 
        pool.query("update riesgos_cat_estados_empresa set id_nivel = ? where cod_empresa = ? and cod_estado = ? and tipo_servicio = 'PM'", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.post("/riesgos/catalogos/municipios-pm", isLoggedIn, type, async(req, res)=>{
    let success_msg="";
    let error_msg="";
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos/pm");
     }
     let maximoNivel = req.session.PlantillaSeleccionada[req.session.PlantillaSeleccionada.length -1 ]
    try {
        if (req.file == undefined) {
        error_msg = "Por favor sube un archivo de excel";
        res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
        }
        let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
        readXlsxFile(path).then((rows) => {
          rows.shift();
          let datosExcel = [];
          let errores = [];
          let contador = 0;
          rows.forEach((row) => {
            if(parseInt(row[2]) < 1 || parseInt(row[2]) > parseInt(maximoNivel.id_nivel))
            {
                errores.push({text:row[1]});
                contador = contador + 1;
            }
            datosExcel.push([req.user.IdEmpresaCliente,row[0],tipoPersonaMostrar,row[2]]);
          });
          let msgError = "";
          if(contador!=0){
            if(contador < 50){
                msgError = "Los niveles asociados a las siguientes descripciones no son válidos, la información no se ha cargado, verifica el archivo e intenta de nuevo ";
            }else{
                msgError = "Error en la asignación de niveles, favor de verificar el archivo e intenta de nuevo";
                errores = [];
            }
         }
         
          if(msgError != ""){res.render("riesgos/config-municipios", {msgError, errores,tipoPersonaMostrar }); return;}  

            pool.query("Delete from riesgos_cat_municipios_empresa where cod_empresa = ? and tipo_servicio = 'PM'", req.user.IdEmpresaCliente).then(function(result) {
              
                pool.query("Insert into riesgos_cat_municipios_empresa (cod_empresa, cod_edomunicipio,tipo_servicio, id_nivel) values ?", [datosExcel]).then(function(result){
                    success_msg ="La configuración de los niveles de riesgo para el catálogo de municipios se ha guardado correctamente."
                    
                    fs.unlinkSync(path);
                    
                    req.flash("success_msg",success_msg);    
                    res.redirect("/riesgos/catalogos/municipios-pm");
                }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
            });
            }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
            });
        });
      } catch (error) {
        error_msg = "El archivo no pudo ser cargado correctamente";
        res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
      }
});

router.post('/riesgos/catalogos/CargaMunicipios-pm', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into riesgos_cat_municipios_empresa select ?, cod_edomunicipo,'PM', 0  from cat_municipios_cnbv", req.user.IdEmpresaCliente).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/municipios-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/CopiaMunicipios-pm', isLoggedIn,  async (req, res)=>{ 
    let params = [req.user.IdEmpresaCliente,'MUNICIPIO','PM'];
    pool.query("call usp_copia_data_by_elemento_riesgo(?)",[params] ).then(function(result){
        let success_msg = "Catálogo cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/municipios-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/ajx/updMunicipios-pm',isLoggedIn,  async (req, res)=>{ 
        pool.query("update  riesgos_cat_municipios_empresa set id_nivel = ? where cod_empresa = ? and cod_edomunicipio = ? and tipo_servicio = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id, tipoPersonaMostrar]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.get('/riesgos/catalogos/actividad-pm', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
    const resultadoCatalogo = await pool.query("select * from vw_riesgos_cat_actividad_empresa where id_empresa = ? and tipo_servicio = ?", [req.user.IdEmpresaCliente, tipoPersonaMostrar]);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-actividad", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});


router.post('/riesgos/catalogos/CargaActividad-pm', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into riesgos_cat_actividad_empresa (select ?, cod_actividad, ?, 0  from cat_actividad_economica union select ?, '0', 0)", [req.user.IdEmpresaCliente, tipoPersonaMostrar, req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/actividad-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-actividad",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/ajx/updActividad-pm',isLoggedIn,  async (req, res)=>{ 
        pool.query("update riesgos_cat_actividad_empresa set id_nivel = ? where cod_empresa = ? and cod_actividad = ? and tipo_persona = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id, tipoPersonaMostrar]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.post('/riesgos/catalogos/CopiaActividades-pm', isLoggedIn,  async (req, res)=>{ 
    let params = [req.user.IdEmpresaCliente,'ACTIVIDAD','PM'];
    pool.query("call usp_copia_data_by_elemento_riesgo(?)",[params] ).then(function(result){
        let success_msg = "Catálogo cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/actividad-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-actividad",{error_msg, tipoPersonaMostrar});
    }); 
});


router.get('/riesgos/catalogos/identificaciones-pm', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
    const resultadoCatalogo = await pool.query("select * from vw_riesgos_cat_identificaciones_empresa where id_empresa = ? and tipo_servicio = ? order by id asc", [req.user.IdEmpresaCliente, tipoPersonaMostrar]);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-identificaciones", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.post('/riesgos/catalogos/ajx/updIdentificaciones-pm',isLoggedIn,  async (req, res)=>{ 
    pool.query("update riesgos_cat_identificaciones_empresa set id_nivel = ?, status=? where cod_empresa = ? and id_identificacion = ? and tipo_servicio", [req.body.idlevel, req.body.idStatus, req.user.IdEmpresaCliente,req.body.id, tipoPersonaMostrar]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });

});

router.post('/riesgos/catalogos/CopiaIdentificaciones-pm', isLoggedIn,  async (req, res)=>{ 
    let params = [req.user.IdEmpresaCliente,'IDENTIFICACION','PM'];
    pool.query("call usp_copia_data_by_elemento_riesgo(?)",[params] ).then(function(result){
        let success_msg = "Catálogo cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/identificaciones-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-identificaciones",{error_msg, tipoPersonaMostrar});
    }); 
});


router.get('/riesgos/catalogos/tipoAccionistas-pm', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
    const resultadoCatalogo = await pool.query("select * from vw_riesgos_cat_tipo_accionista_empresa where id_empresa = ? and tipo_servicio = ? order by id asc", [req.user.IdEmpresaCliente, tipoPersonaMostrar]);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-tipo-accionistas", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.post('/riesgos/catalogos/CargatipoAccionistas-pm', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into riesgos_cat_tipo_accionista_empresa (select ?, cod_accionista, ?,0 from cat_tipo_accionista union select ?, '', ?, 0)", [req.user.IdEmpresaCliente, tipoPersonaMostrar, req.user.IdEmpresaCliente, tipoPersonaMostrar]).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/tipoAccionistas-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-tipo-accionistas",{error_msg, tipoPersonaMostrar});
    }); 
});


router.post('/riesgos/catalogos/ajx/updTipoAccionistas-pm',isLoggedIn,  async (req, res)=>{ 
    pool.query("update riesgos_cat_tipo_accionista_empresa set id_nivel = ?  where cod_empresa = ? and cod_accionista = ? and tipo_servicio = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id, tipoPersonaMostrar]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });
});

router.get('/riesgos/catalogos/OrigenRecursos-pm', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
    const resultadoCatalogo = await pool.query("select * from vw_riesgos_cat_origen_recursos_empresa where id_empresa = ? and tipo_servicio = ? order by id asc", [req.user.IdEmpresaCliente, tipoPersonaMostrar]);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-origen", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.post('/riesgos/catalogos/CargaOrigenRecursos-pm', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into riesgos_cat_origen_recursos_empresa (select ?, cod_origen, ?,0 from cat_origen_recursos union select ?, 0, ?, 0)", [req.user.IdEmpresaCliente, tipoPersonaMostrar, req.user.IdEmpresaCliente, tipoPersonaMostrar]).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/origenRecursos-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-origen",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/ajx/updOrigenRecursos-pm',isLoggedIn,  async (req, res)=>{ 
    pool.query("update riesgos_cat_origen_recursos_empresa set id_nivel = ?  where cod_empresa = ? and cod_origen = ? and tipo_servicio = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id, tipoPersonaMostrar]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });
});

router.get('/riesgos/catalogos/DestinoRecursos-pm', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
    const resultadoCatalogo = await pool.query("select * from vw_riesgos_cat_destino_recursos_empresa where id_empresa = ? and tipo_servicio = ? order by id asc", [req.user.IdEmpresaCliente, tipoPersonaMostrar]);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-propositos", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.post('/riesgos/catalogos/CargaDestinoRecursos-pm', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into riesgos_cat_destino_recursos_empresa (select ?, cod_destino, ?,0 from cat_destino_recursos union select ?, 0, ?, 0)", [req.user.IdEmpresaCliente, tipoPersonaMostrar, req.user.IdEmpresaCliente, tipoPersonaMostrar]).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/DestinoRecursos-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-propositos",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/ajx/updDestinoRecursos-pm',isLoggedIn,  async (req, res)=>{ 
    pool.query("update riesgos_cat_destino_recursos_empresa set id_nivel = ?  where cod_empresa = ? and cod_destino = ? and tipo_servicio = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id, tipoPersonaMostrar]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });
});


router.get('/riesgos/catalogos/perfil-pm', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
    const resultadoCatalogo = await pool.query("select * from vw_riesgos_cat_respuestas_preguntas_empresa where id_empresa = ? and tipo_servicio = ? order by id asc", [req.user.IdEmpresaCliente, tipoPersonaMostrar]);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-perfil", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.post('/riesgos/catalogos/CargaPerfil-pm', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into riesgos_cat_respuestas_preguntas_empresa (select ?, cod_pregunta, cod_respuesta, ?,0 from cat_preguntas_perfil union select ?, 0,'', ?, 0)", [req.user.IdEmpresaCliente, tipoPersonaMostrar, req.user.IdEmpresaCliente, tipoPersonaMostrar]).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/perfil-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-perfil",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/ajx/updPerfil-pm',isLoggedIn,  async (req, res)=>{ 
    pool.query("update riesgos_cat_respuestas_preguntas_empresa set id_nivel = ?  where cod_empresa = ? and concat(cod_pregunta,cod_respuesta) = ? and tipo_servicio = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id, tipoPersonaMostrar]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });
});


router.get('/riesgos/catalogos/transacciones-pm', isLoggedIn, async  (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
    const plantilla = req.session.PlantillaSeleccionada;
    let plantillaRango = [];
    let plantillaRangoPago = [];
    let plantillaOperaciones = [];
    let plantillaOperacionesPago = [];
    let plantillaRangoI = [];
    let plantillaRangoPagoI = [];
    let plantillaOperacionesI = [];
    let plantillaOperacionesPagoI = [];
    let plantillaMontoManeja = [];
    let plantillaMontoTransaccion = [];
    const resultRangos = await pool.query("Select * from riesgos_cat_rangos_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'EN'", req.user.IdEmpresaCliente);
    const resultRangosPago = await pool.query("Select * from riesgos_cat_rangos_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'PA'", req.user.IdEmpresaCliente);
    const resultOperaciones = await pool.query("Select * from riesgos_cat_operaciones_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'EN'", req.user.IdEmpresaCliente);
    const resultOperacionesPago = await pool.query("Select * from riesgos_cat_operaciones_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'PA'", req.user.IdEmpresaCliente);
    const resultMontoManeja = await pool.query("Select * from riesgos_cat_rangos_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'MM'", req.user.IdEmpresaCliente);
    const resultMontoTransaccion = await pool.query("Select * from riesgos_cat_rangos_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'MTR'", req.user.IdEmpresaCliente);

    const resultRangosI = await pool.query("Select * from riesgos_cat_rangos_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'ENI'", req.user.IdEmpresaCliente);
    const resultRangosPagoI = await pool.query("Select * from riesgos_cat_rangos_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'PAI'", req.user.IdEmpresaCliente);
    const resultOperacionesI = await pool.query("Select * from riesgos_cat_operaciones_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'ENI'", req.user.IdEmpresaCliente);
    const resultOperacionesPagoI = await pool.query("Select * from riesgos_cat_operaciones_empresa where cod_empresa = ? and tipo_servicio = 'PM' and tipo_operacion = 'PAI'", req.user.IdEmpresaCliente);
    
 
    
    plantilla.forEach(element => {
        let ri = "",  rs = "", rip="", rsp="",   rio = "", rso = ""; rim ="", rsm="", riop = "", rsop="";
        let rii = "", rsi ="", ripi = "", rspi = "", rioi = "", rsoi = "", riopi = "", rsopi="";
        let rimt = "", rsmt="";
        resultRangos.forEach(element1 => {
            if(element1.id_nivel == element.id_nivel){
                ri = element1.rango_inferior;
                rs = element1.rango_superior;
            }
        });
        data = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: ri, rango_superior : rs}
        plantillaRango.push(data);

        resultRangosI.forEach(element1 => {
            if(element1.id_nivel == element.id_nivel){
                rii = element1.rango_inferior;
                rsi = element1.rango_superior;
            }
        });
        dataI = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: rii, rango_superior : rsi}
        plantillaRangoI.push(dataI);

        resultRangosPago.forEach(element1 => {
            if(element1.id_nivel == element.id_nivel){
                rip = element1.rango_inferior;
                rsp = element1.rango_superior;
            }
        });
        dataP = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: rip, rango_superior : rsp}
        plantillaRangoPago.push(dataP);

        resultRangosPagoI.forEach(element1 => {
            if(element1.id_nivel == element.id_nivel){
                ripi = element1.rango_inferior;
                rspi = element1.rango_superior;
            }
        });
        dataPI = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: ripi, rango_superior : rspi}
        plantillaRangoPagoI.push(dataPI);

        resultOperaciones.forEach(element2 => {
            if(element2.id_nivel == element.id_nivel){
                rio = element2.rango_inferior;
                rso = element2.rango_superior;
            }
        });
        data2 = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: rio, rango_superior : rso}
        plantillaOperaciones.push(data2);

        resultOperacionesI.forEach(element2 => {
            if(element2.id_nivel == element.id_nivel){
                rioi = element2.rango_inferior;
                rsoi = element2.rango_superior;
            }
        });
        data2I = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: rioi, rango_superior : rsoi}
        plantillaOperacionesI.push(data2I);

        resultOperacionesPago.forEach(element2 => {
            if(element2.id_nivel == element.id_nivel){
                riop = element2.rango_inferior;
                rsop = element2.rango_superior;
            }
        });
        data2p = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: riop, rango_superior : rsop}
        plantillaOperacionesPago.push(data2p);

        resultOperacionesPagoI.forEach(element2 => {
            if(element2.id_nivel == element.id_nivel){
                riopi = element2.rango_inferior;
                rsopi = element2.rango_superior;
            }
        });
        data2pI = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: riopi, rango_superior : rsopi}
        plantillaOperacionesPagoI.push(data2pI);


        resultMontoManeja.forEach(element3 => {
            if(element3.id_nivel == element.id_nivel){
                rim = element3.rango_inferior;
                rsm = element3.rango_superior;
            }
        });
        data3 = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: rim, rango_superior : rsm}
        plantillaMontoManeja.push(data3);

        resultMontoTransaccion.forEach(element3 => {
            if(element3.id_nivel == element.id_nivel){
                rimt = element3.rango_inferior;
                rsmt = element3.rango_superior;
            }
        });
        data4 = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: rimt, rango_superior : rsmt}
        plantillaMontoTransaccion.push(data4);
        

    });
    res.render("riesgos/config-transacciones-pm", {plantilla,plantillaRango, plantillaRangoPago,  plantillaOperaciones, plantillaOperacionesPago, plantillaMontoManeja,plantillaRangoI, plantillaRangoPagoI,  plantillaOperacionesI, plantillaOperacionesPagoI, plantillaMontoTransaccion});
});

router.post('/riesgos/catalogos/ajx/updRangos-pm',isLoggedIn,  async (req, res)=>{ 
   
    const data = req.body.a;
    var parsedData = JSON.parse(data);
    let mensajeRespuesta = [];
    parsedData.forEach(function(item) {
        item.unshift(req.user.IdEmpresaCliente);
    });
    let contador=1;
    
    parsedData.forEach( async function(item){ 
        
        await pool.query("Call usp_gestiona_riesgos_cat_rangos_empresa (?)", [item]).then(function(result){
            mensajeRespuesta.push("Información correspondiente a nivel de riesgos " + item[1] + " guardada correctamente");
            if(contador==parsedData.length){
                res.send(mensajeRespuesta);
            }
        }).catch(function(err){
            mensajeRespuesta.push(err);
            if(contador==parsedData.length){
                res.send(mensajeRespuesta);
            }
        });
        contador++;
    });

});

router.post('/riesgos/catalogos/ajx/updOperaciones-pm',isLoggedIn,  async (req, res)=>{ 

const data = req.body.a;
var parsedData = JSON.parse(data);
let mensajeRespuesta = [];
parsedData.forEach(function(item) {
    item.unshift(req.user.IdEmpresaCliente);
});
let contador=1;
parsedData.forEach( async function(item){ 
    await pool.query("Call usp_gestiona_riesgos_cat_operaciones_empresa (?)", [item]).then(function(result){
        mensajeRespuesta.push("Información correspondiente a nivel de riesgos " + item[1] + " guardada correctamente");
        if(contador==parsedData.length){
            res.send(mensajeRespuesta);
        }
    }).catch(function(err){
        mensajeRespuesta.push(err);
        if(contador==parsedData.length){
            res.send(mensajeRespuesta);
        }
    });
    contador++;
});

});

router.get('/riesgos/catalogos/divisas-pm', isLoggedIn, async  (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
    const resultadoCatalogo = await pool.query("select * from vw_riesgos_cat_divisas_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-divisas", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.post('/riesgos/catalogos/CargaDivisas-pm', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into riesgos_cat_divisas_empresa select ?, cod_divisa, 'PM', 0  from cat_divisas", req.user.IdEmpresaCliente).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/divisas-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-divisas",{error_msg});
    }); 
});

router.post('/riesgos/catalogos/CopiaDivisas-pm', isLoggedIn,  async (req, res)=>{ 
    let params = [req.user.IdEmpresaCliente,'DIVISA','PM'];
    pool.query("call usp_copia_data_by_elemento_riesgo(?)",[params] ).then(function(result){
        let success_msg = "Catálogo cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/divisas-pm");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-divisas",{error_msg, tipoPersonaMostrar});
    }); 
});

router.get('/riesgos/catalogos/productos-pm', isLoggedIn, async  (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos/pm");
    }
    const plantilla = req.session.PlantillaSeleccionada;
    
    const resultProductos = await pool.query("Select * from vw_riesgos_cat_productos_empresa where cod_empresa = ? and tipo_servicio = 'PM'", req.user.IdEmpresaCliente);
    
   
    let pagos; 
    let envios;
    
    if(resultProductos.length=='1'){
        let data = resultProductos[0];
        
        pagos = {
            pnc: data.PNDS,
            pnv: data.PNES,
            pic: data.PIDS,
            piv: data.PIES,
            pncn: data.PNDN,
            pnvn: data.PNEN,
            picn: data.PIDN,
            pivn: data.PIEN,
        };

        envios = {
            enc: data.ENDS,
            env: data.ENES,
            eic: data.EIDS,
            eiv: data.EIES,
            encn: data.ENDN,
            envn: data.ENEN,
            eicn: data.EIDN,
            eivn: data.EIEN
        };
    }

   
    res.render("riesgos/config-productos-pm", {plantilla, pagos, envios});
});

router.post('/riesgos/catalogos/ajx/updPagos-pm',isLoggedIn,  async (req, res)=>{ 
    let arreglo = [];
    let a = req.body.pnv;
    let b = req.body.piv;
    let c = req.body.pnc;
    let d = req.body.pic;
    let e = req.body.pnvn;
    let f = req.body.pivn;
    let g = req.body.pncn;
    let h = req.body.picn;
    
    if (a==""){a = 0;}
    if (b==""){b = 0;}
    if (c==""){c = 0;}
    if (d==""){d = 0;}
    if (e==""){e = 0;}
    if (f==""){f = 0;}
    if (g==""){g = 0;}
    if (h==""){h = 0;}
    
    let data1 = [req.user.IdEmpresaCliente, 'PNE','S','PM', a];
    let data2 = [req.user.IdEmpresaCliente, 'PIE','S','PM', b];
    let data3 = [req.user.IdEmpresaCliente, 'PND','S','PM', c];
    let data4 = [req.user.IdEmpresaCliente, 'PID','S','PM', d];
    let data5 = [req.user.IdEmpresaCliente, 'PNE','N','PM', e];
    let data6 = [req.user.IdEmpresaCliente, 'PIE','N','PM', f];
    let data7 = [req.user.IdEmpresaCliente, 'PND','N','PM', g];
    let data8 = [req.user.IdEmpresaCliente, 'PID','N','PM', h];
    arreglo.push(data1);
    arreglo.push(data2);
    arreglo.push(data3);
    arreglo.push(data4);
    arreglo.push(data5);
    arreglo.push(data6);
    arreglo.push(data7);
    arreglo.push(data8);

    let contador=1;
    let mensajeRespuesta = [];
        arreglo.forEach( async function(item){ 
            await pool.query("Call usp_riesgos_cat_productos_empresa (?)", [item]).then(function(result){
                if(contador==arreglo.length){
                    res.send("OK");
                }
            }).catch(function(err){
                mensajeRespuesta.push(err);
                if(contador==arreglo.length){
                    res.send(mensajeRespuesta);
                }
            });
            contador++;
        });
    
    });
    
    router.post('/riesgos/catalogos/ajx/updEnvios-pm',isLoggedIn,  async (req, res)=>{ 
        let arreglo = [];
        let a = req.body.env;
        let b = req.body.eiv;
        let c = req.body.enc;
        let d = req.body.eic;
        let e = req.body.envn;
        let f = req.body.eivn;
        let g = req.body.encn;
        let h = req.body.eicn;
    
        if (a==""){a = 0;}
        if (b==""){b = 0;}
        if (c==""){c = 0;}
        if (d==""){d = 0;}
        if (e==""){e = 0;}
        if (f==""){f = 0;}
        if (g==""){g = 0;}
        if (h==""){h = 0;}
    
        let data1 = [req.user.IdEmpresaCliente, 'ENE','S','PM', a];
        let data2 = [req.user.IdEmpresaCliente, 'EIE','S','PM', b];
        let data3 = [req.user.IdEmpresaCliente, 'END','S','PM', c];
        let data4 = [req.user.IdEmpresaCliente, 'EID','S','PM', d];
        let data5 = [req.user.IdEmpresaCliente, 'ENE','N','PM', e];
        let data6 = [req.user.IdEmpresaCliente, 'EIE','N','PM', f];
        let data7 = [req.user.IdEmpresaCliente, 'END','N','PM', g];
        let data8 = [req.user.IdEmpresaCliente, 'EID','N','PM', h];
        arreglo.push(data1);
        arreglo.push(data2);
        arreglo.push(data3);
        arreglo.push(data4);
        arreglo.push(data5);
        arreglo.push(data6);
        arreglo.push(data7);
        arreglo.push(data8);

        
        let contador=1;
        let mensajeRespuesta = [];
            arreglo.forEach( async function(item){ 
                await pool.query("Call usp_riesgos_cat_productos_empresa (?)", [item]).then(function(result){
                    if(contador==arreglo.length){
                        res.send("OK");
                    }
                }).catch(function(err){
                    mensajeRespuesta.push(err);
                    if(contador==arreglo.length){
                        res.send(mensajeRespuesta);
                    }
                });
                contador++;
            });
    });

    router.get('/riesgos/catalogos/parentesco-pm', isLoggedIn, async (req, res)=>{ 
        if(!req.session.PlantillaSeleccionada)
        {
           res.redirect("/riesgos/catalogos/pm");
        }
        const resultadoCatalogo = await pool.query("select * from vw_riesgos_cat_parentesco_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
       let isInsert = true;
       let plantilla = req.session.PlantillaSeleccionada;
       res.render("riesgos/config-parentesco", {resultadoCatalogo, isInsert, plantilla,tipoPersonaMostrar});
    });

    router.post('/riesgos/catalogos/CargaParentesco-pm', isLoggedIn,  async (req, res)=>{ 
        pool.query("insert into riesgos_cat_parentesco_empresa select ?, cod_parentesco,?, 0 , 1, '' from cat_parentesco_relacion", [req.user.IdEmpresaCliente, tipoPersonaMostrar]).then(function(result){
            let success_msg = "Catálogo base cargado correctamente";
            req.flash("success_msg",success_msg);    
            res.redirect("/riesgos/catalogos/parentesco-pm");
        }).catch(function(err){
            error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
            res.render("riesgos/config-parentesco",{error_msg, tipoPersonaMostrar});
        }); 
    });
    
    router.post('/riesgos/catalogos/ajx/AddParentesco-pm',isLoggedIn,  async (req, res)=>{ 
    
        let descripionPr = fn.CleanCadena(req.body.descripcion);
        let Params = [req.user.IdEmpresaCliente, tipoPersonaMostrar, req.body.idlevel, descripionPr];
        await pool.query("CALL usp_insertaParentescoPM(?,?,?,?)", Params).then(function(result){
            const r = result[0];
            let id =  r[0].Id_Parentesco;
            let data = {codeResult:"OK", idResult :id};
            res.send(data);
            }).catch(function(err){
                error_msg = err;
                res.send(error_msg);
            });
    });
    
    router.post('/riesgos/catalogos/ajx/updParentesco-pm',isLoggedIn,  async (req, res)=>{ 
            pool.query("update riesgos_cat_parentesco_empresa set id_nivel_riesgo = ?, status=? where cod_empresa = ? and cod_parentesco = ? and  tipo_servicio = ?", [req.body.idlevel, req.body.idStatus, req.user.IdEmpresaCliente,req.body.id, tipoPersonaMostrar]).then(function(result){
                res.send("OK");
            }).catch(function(err){
                error_msg = err;
                res.send(error_msg);
            });
        
    });


    router.get('/riesgos/catalogos/agentes-pm', isLoggedIn, async (req, res)=>{ 
        if(!req.session.PlantillaSeleccionada)
        {
           res.redirect("/riesgos/catalogos");
        }
        const resultadoCatalogo = await pool.query("select * from vw_agentes_empresa where id_empresa = ? and status = ?", [req.user.IdEmpresaCliente, "1"]);
       
       let plantilla = req.session.PlantillaSeleccionada;
       res.render("riesgos/config-agentes", {resultadoCatalogo, plantilla, tipoPersonaMostrar});
    });

    router.post('/riesgos/catalogos/ajx/updAgentes-pm',isLoggedIn,  async (req, res)=>{ 
        pool.query("update  agentes_relacionados set nivel_riesgo = ? where cod_empresa = ? and cod_agente = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    });

    router.get('/riesgos/catalogos/remesadores-pm', isLoggedIn, async (req, res)=>{ 
        if(!req.session.PlantillaSeleccionada)
        {
           res.redirect("/riesgos/catalogos");
        }
        const resultadoCatalogo = await pool.query("select * from vw_remesadores_empresa where id_empresa = ? and status = ?", [req.user.IdEmpresaCliente, "1"]);
       
       let plantilla = req.session.PlantillaSeleccionada;
       res.render("riesgos/config-remesadores", {resultadoCatalogo, plantilla, tipoPersonaMostrar});
    });

    router.post('/riesgos/catalogos/ajx/updRemesador-pm',isLoggedIn,  async (req, res)=>{ 
        pool.query("update  empresa_remesadores set nivel_riesgo = ? where cod_empresa = ? and cod_remesador = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
    });


    router.get('/riesgos/catalogos/tipoServicios-pm', isLoggedIn, async (req, res)=>{ 
        if(!req.session.PlantillaSeleccionada)
        {
           res.redirect("/riesgos/catalogos/pm");
        }
        const resultadoCatalogo = await pool.query("select * from vw_riesgos_cat_tipo_servicios where id_empresa = ? and tipo_servicio = ? order by id asc", [req.user.IdEmpresaCliente, tipoPersonaMostrar]);
       let isInsert = true;
       let plantilla = req.session.PlantillaSeleccionada;
       res.render("riesgos/config-tipo-servicios", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
    });
    
    router.post('/riesgos/catalogos/CargatipoServicios-pm', isLoggedIn,  async (req, res)=>{ 
        pool.query("insert into riesgos_cat_tipo_servicios (select ?, cod_tipo_servicio, ?,0 from cat_tipo_servicio_pm union select ?, '', ?, 0)", [req.user.IdEmpresaCliente, tipoPersonaMostrar, req.user.IdEmpresaCliente, tipoPersonaMostrar]).then(function(result){
            let success_msg = "Catálogo base  cargado correctamente";
            req.flash("success_msg",success_msg);    
            res.redirect("/riesgos/catalogos/tipoServicios-pm");
        }).catch(function(err){
            error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
            res.render("riesgos/config-tipo-servicios",{error_msg, tipoPersonaMostrar});
        }); 
    });
    
    
    router.post('/riesgos/catalogos/ajx/updTipoServicios-pm',isLoggedIn,  async (req, res)=>{ 
        pool.query("update riesgos_cat_tipo_servicios set id_nivel = ?  where cod_empresa = ? and cod_tipo = ? and tipo_servicio = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id, tipoPersonaMostrar]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    });
    router.post('/riesgos/giro/historialRemesaPM', async (req, res)=>{ 
        const cve = req.body.cve;
        const tr = req.body.tr;
        const cor = req.body.cor;
        const historial = await pool.query("select cve_cobro, fecha_registro, upper(descripcion) as descripcion from vw_bitacora_movimientos_remesas_out  where cod_empresa = ? and cod_transmisor = ? and cod_corresponsal = ? and cve_cobro = ? order by id_movimiento desc", [req.user.IdEmpresaCliente,tr,cor,cve] );
      
        let data = {
            result : historial
        }
    
        res.send(data);
      });

      router.post('/riesgos/giro/detalleCalificacionPM', async (req, res)=>{ 
        const cve = req.body.cve;
        const tr = req.body.tr;
        const cor = req.body.cor;
        let tip = req.body.tip;
        var tabla = "";
        var tabla2 ="";
        switch (tip) {
            case "EN":
                tabla = "vw_detalle_calificacion_giro_out_pm";
                tabla2 = "remesas_out";
                break;
            case "EI":
                tabla = "vw_detalle_calificacion_giro_out_pm";
                tabla2 = "remesas_out";
                break;
            case "PN":
                tabla = "vw_detalle_calificacion_giro";
                tabla2 = "remesas_in";
                break;
            case "PI":
                tabla = "vw_detalle_calificacion_giro";
                tabla2 = "remesas_in";
                break;
            default:
                break;
        }
    
        let params = [req.user.IdEmpresaCliente,tr,cor,cve];
        const result = await pool.query("Select * FROM "+ tabla +" where cod_empresa = ? and cod_transmisor = ? and cod_corresponsal = ? and cve_cobro = ? order by id_campo", params );
        const resumen = await pool.query("select a.calificacion, pe.nombre as descripcion_nivel, pe.color as color_nivel, a.total_campos_calificados, a.porcentaje_riesgo, a.plantilla_aplicada from "+ tabla2 +" a left join plantilla_niveles pe on (pe.id_plantilla = a.plantilla_aplicada and pe.id_nivel = a.calificacion)  where a.cod_empresa = ? and a.cod_transmisor = ? and a.cod_corresponsal = ? and a.cve_cobro = ?", params );
        
        let data = {
            result : result,
            resumen : resumen
        }
    
        res.send(data);
      });
    

module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\riesgos-pm.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\riesgos.js ---

const express = require("express");
const pool = require("../database");
const multer = require("multer");
const fs = require('fs');
const path = require("path");
const { userInfo } = require("os");
const { isLoggedIn } = require("../lib/auth");
const { session } = require("passport");
var Enumerable = require('linq');
const upload = require("../lib/upload-excel");
const excelController = require("../lib/excell-controller");
const readXlsxFile = require("read-excel-file/node");
const { response } = require("express");
const fn = require("../lib/catalogosFunctions");
const router = express.Router();
const url = require('url');
const { generateKeyPair } = require("crypto");
const catalogosBD = require("../lib/catalogosBD");
const { Console } = require("console");
let tipoPersonaMostrar = "PF";


router.get('/riesgos/niveles', isLoggedIn, async(req, res)=>{ 
    let sql ="Select * from vw_niveles"

    const result = await pool.query(sql);
   var  grouped =  Enumerable.from(result)
                   .groupBy(x=>x.NombrePlantilla)
                   .select(x=>({Plantilla:x.key(),niveles:x.getSource()}))
                   .toArray();    
    const plantillasresult = await pool.query("select id,nombre from plantilla_nivel_riesgo order by nombre asc");
    const rs = await pool.query("Select a.id_plantilla,b.nombre from plantilla_empresa a inner join plantilla_nivel_riesgo b on (b.id = a.id_plantilla)  where a.id_empresa = ?", req.user.IdEmpresaCliente);                   
    let data = {};
    if (rs.length==1){
    data = {
        id_plantilla : rs[0].id_plantilla,
        nombre : rs[0].nombre
    }};
    res.render("riesgos/config-niveles", {data, grouped, plantillasresult});
});

router.get('/riesgos/catalogos', isLoggedIn, async(req, res)=>{ 
    let idEmpresa = "";
    let reusltEfectivo = [];
    let reusltDeposito = [];
    const rs = await pool.query("Select a.id_plantilla from plantilla_empresa a where a.id_empresa = ?", req.user.IdEmpresaCliente);                   
    if(rs.length==0){
        req.flash("alert_message", "Debes seleccionar una plantilla antes de poder configurar los catálogos correspondientes.<br> Para asociar una plantilla debes ingresar al menú <i>Riesgos - Configuración de Niveles</i>");
        res.redirect("/menu");
    } 

    var sql2P = "select id_nivel, descripcion from niveles_monto where nivel_grupo = 1 order by id_nivel";
    let plantilla_niveles = await pool.query(sql2P); 

    var sql2 = "select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?"
    const plantilla = await pool.query(sql2, req.user.IdEmpresaCliente); 

    var sqlDatosEfectivo = "call usp_getCamposConfiguracionRiesgo(?,'02','PE','PF')";
    var sqlDatosDeposito = "call usp_getCamposConfiguracionRiesgo(?,'03','PE','PF')";

    let rs1 = await pool.query(sqlDatosEfectivo, [req.user.IdEmpresaCliente]);
    let rs2 = await pool.query(sqlDatosDeposito, [req.user.IdEmpresaCliente]);

    let reusltEfectivoSel = rs1[0];
    let reusltEfectivoPor = rs1[1];
    let reusltDepositoSel = rs2[0];
    let reusltDepositoPor = rs2[1];

    for (let index = 0; index < reusltEfectivoSel.length; index++) {
        const elementS = reusltEfectivoSel[index];
        const elementP = reusltEfectivoPor[index];
        reusltEfectivo.push(
            { 
                id_campo: elementS.id_campo,
                categoria: elementS.categoria,
                descripcion: elementS.descripcion,
                tipo_servicio : elementS.tipo_servicio,
                tipo_operacion : elementS.tipo_operacion,
                level1Sel: elementS.level1,
                level2Sel: elementS.level2,
                level3Sel: elementS.level3,
                level4Sel: elementS.level4,
                level1Por: elementP.level1,
                level2Por: elementP.level2,
                level3Por: elementP.level3,
                level4Por: elementP.level4
            }
        );
    }

    for (let index = 0; index < reusltDepositoSel.length; index++) {
        const elementS = reusltDepositoSel[index];
        const elementP = reusltDepositoPor[index];
        reusltDeposito.push(
            { 
                id_campo: elementS.id_campo,
                categoria: elementS.categoria,
                descripcion: elementS.descripcion,
                tipo_servicio : elementS.tipo_servicio,
                tipo_operacion : elementS.tipo_operacion,
                level1Sel: elementS.level1,
                level2Sel: elementS.level2,
                level3Sel: elementS.level3,
                level4Sel: elementS.level4,
                level1Por: elementP.level1,
                level2Por: elementP.level2,
                level3Por: elementP.level3,
                level4Por: elementP.level4
            }
        );
    }
    
    req.session.PlantillaSeleccionada = plantilla;
    res.render("riesgos/config-catalogos",{reusltEfectivo, reusltDeposito, plantilla_niveles});
});

router.get('/riesgos/catalogos-envios', isLoggedIn, async(req, res)=>{ 
    let reusltEfectivo = [];
    let reusltDeposito = [];
    const rs = await pool.query("Select a.id_plantilla from plantilla_empresa a where a.id_empresa = ?", req.user.IdEmpresaCliente);                   
    if(rs.length==0){
        req.flash("alert_message", "Debes seleccionar una plantilla antes de poder configurar los catálogos correspondientes.<br> Para asociar una plantilla debes ingresar al menú <i>Riesgos - Configuración de Niveles</i>");
        res.redirect("/menu");
    } 

    var sql2P = "select id_nivel, descripcion from niveles_monto where nivel_grupo = 1 order by id_nivel";
    let plantilla_niveles = await pool.query(sql2P); 

    var sql2 = "select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?"
    const plantilla = await pool.query(sql2, req.user.IdEmpresaCliente); 

    var sqlDatosEfectivo = "call usp_getCamposConfiguracionRiesgo(?,'02','PEN','PF')";
    var sqlDatosDeposito = "call usp_getCamposConfiguracionRiesgo(?,'03','PEN','PF')";
    
    let rs1 = await pool.query(sqlDatosEfectivo, [req.user.IdEmpresaCliente]);
    let rs2 = await pool.query(sqlDatosDeposito, [req.user.IdEmpresaCliente]);

    let reusltEfectivoSel = rs1[0];
    let reusltEfectivoPor = rs1[1];
    let reusltDepositoSel = rs2[0];
    let reusltDepositoPor = rs2[1];


    for (let index = 0; index < reusltEfectivoSel.length; index++) {
        const elementS = reusltEfectivoSel[index];
        const elementP = reusltEfectivoPor[index];
        reusltEfectivo.push(
            { 
                id_campo: elementS.id_campo,
                categoria: elementS.categoria,
                descripcion: elementS.descripcion,
                tipo_servicio : elementS.tipo_servicio,
                tipo_operacion : elementS.tipo_operacion,
                level1Sel: elementS.level1,
                level2Sel: elementS.level2,
                level3Sel: elementS.level3,
                level4Sel: elementS.level4,
                level1Por: elementP.level1,
                level2Por: elementP.level2,
                level3Por: elementP.level3,
                level4Por: elementP.level4
            }
        );
    }

    for (let index = 0; index < reusltDepositoSel.length; index++) {
        const elementS = reusltDepositoSel[index];
        const elementP = reusltDepositoPor[index];
        reusltDeposito.push(
            { 
                id_campo: elementS.id_campo,
                categoria: elementS.categoria,
                descripcion: elementS.descripcion,
                tipo_servicio : elementS.tipo_servicio,
                tipo_operacion : elementS.tipo_operacion,
                level1Sel: elementS.level1,
                level2Sel: elementS.level2,
                level3Sel: elementS.level3,
                level4Sel: elementS.level4,
                level1Por: elementP.level1,
                level2Por: elementP.level2,
                level3Por: elementP.level3,
                level4Por: elementP.level4
            }
        );
    }
    
    req.session.PlantillaSeleccionada = plantilla;
    res.render("riesgos/config-catalogos-envios",{reusltEfectivo, reusltDeposito, plantilla_niveles});
});

/*router.get('/riesgos/catalogos', isLoggedIn, async(req, res)=>{ 
    let idEmpresa = "";
    const rs = await pool.query("Select a.id_plantilla from plantilla_empresa a where a.id_empresa = ?", req.user.IdEmpresaCliente);                   
    if(rs.length==0){
        req.flash("alert_message", "Debes seleccionar una plantilla antes de poder configurar los catálogos correspondientes.<br> Para asociar una plantilla debes ingresar al menú <i>Riesgos - Configuración de Niveles</i>");
        res.redirect("/menu");
    } 
    var sql2 = "select a.id_empresa, b.id_nivel, b.nombre, b.color from  plantilla_empresa a inner join plantilla_niveles b on (b.id_plantilla = a.id_plantilla) where a.id_empresa = ?"
    const plantilla = await pool.query(sql2, req.user.IdEmpresaCliente); 

    var sqlDatos = "Select a.id_campo as id, a.categoria, a.descripcion as descripcion,b.porcentaje, case when ifnull(b.id_campo,0) = 0 then 0 else 1 end as seleccionado, c.porcentaje as porcentaje_envio, case when ifnull(c.id_campo,0) = 0 then 0 else 1 end as seleccionado_envio from cat_campos_riesgo a "
    sqlDatos = sqlDatos + "left join cat_empresa_campos_riesgo b on (b.id_campo = a.id_campo and b.cod_empresa = ?) "
    sqlDatos = sqlDatos + "left join cat_empresa_campos_riesgo_envios c on (c.id_campo = a.id_campo and c.cod_empresa = ?) where a.tipoPersona = 'PF' and clasificacion  = 'PE'"

    let campos = await pool.query(sqlDatos, [req.user.IdEmpresaCliente,req.user.IdEmpresaCliente]);
    
    req.session.PlantillaSeleccionada = plantilla;
    res.render("riesgos/config-catalogos",{campos});
});
*/


router.post('/ajx_rgo/reg_nivel',isLoggedIn, async (req, res)=>{ 
    const idPlantilla = req.body.idSeleccionado;
    let error_msg = "";
    await pool.query("CALL usp_gestiona_plantillaEmpresa(?,?)", [idPlantilla, req.user.IdEmpresaCliente ])
    .then(function(result) {
            req.session.PlantillaSeleccionada = null;
            res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });
});

router.get('/riesgos/catalogos/parentesco', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const resultadoCatalogo = await pool.query("select * from vw_parentesco_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-parentesco", {resultadoCatalogo, isInsert, plantilla});
});

router.get('/riesgos/catalogos/agentes', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const resultadoCatalogo = await pool.query("select * from vw_agentes_empresa where id_empresa = ? and status = ?", [req.user.IdEmpresaCliente, "1"]);
   
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-agentes", {resultadoCatalogo, plantilla});
});

router.get('/riesgos/catalogos/remesadores', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const resultadoCatalogo = await pool.query("select * from vw_remesadores_empresa where id_empresa = ? and status = ?", [req.user.IdEmpresaCliente, "1"]);
   
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-remesadores", {resultadoCatalogo, plantilla});
});

router.get('/riesgos/catalogos/actividad', isLoggedIn, async (req, res)=>{ 
     if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos");
     }
     const resultadoCatalogo = await pool.query("select * from vw_actividad_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-actividad", {resultadoCatalogo, isInsert, plantilla});
});

router.get('/riesgos/catalogos/estados', isLoggedIn,  async (req, res)=>{ 
    let tipoPersonaMostrar = "PF";
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos");
     }
    const resultadoCatalogo = await pool.query("select * from vw_estados_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-estados", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.get('/riesgos/catalogos/municipios',  async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
   const resultadoCatalogo = await pool.query("select * from vw_municipios_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-municipios", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.get('/riesgos/catalogos/paises', isLoggedIn,  async (req, res)=>{ 
    let tipoPersonaMostrar = "PF";
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos");
     }
    const resultadoCatalogo = await pool.query("select * from vw_paises_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-paises", {resultadoCatalogo, isInsert, plantilla, tipoPersonaMostrar});
});

router.get('/riesgos/catalogos/divisas', isLoggedIn, async  (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const resultadoCatalogo = await pool.query("select * from vw_divisas_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-divisas", {resultadoCatalogo, isInsert, plantilla});
});

router.get('/riesgos/catalogos/productos', isLoggedIn, async  (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const plantilla = req.session.PlantillaSeleccionada;
    
    const resultProductos = await pool.query("Select * from productos_empresa where cod_empresa = ?", req.user.IdEmpresaCliente);
    const resultadoDivisa = await pool.query("select divisa_rango from empresa_datosadicionales where cod_empresa = ?", req.user.IdEmpresaCliente);
   
    let pagos; 
    let envios;
    let divisaRango = "";
    
    if(resultadoDivisa.length == 1){
        divisaRango = resultadoDivisa[0].divisa_rango;
    }
    if(resultProductos.length=='2'){
        let ventanilla = resultProductos[0];
        let deposito = resultProductos[1];
        pagos = {
            pnc: deposito.id_nivel_pagoNacional,
            pnv: ventanilla.id_nivel_pagoNacional ,
            pic: deposito.id_nivel_pagoInternacional,
            piv: ventanilla.id_nivel_pagoInternacional
        };

        envios = {
            enc: deposito.id_nivel_envioNacional,
            env: ventanilla.id_nivel_envioNacional,
            eic: deposito.id_nivel_envioInternacional,
            eiv: ventanilla.id_nivel_envioInternacional
        };
    }
    res.render("riesgos/config-productos", {plantilla, divisaRango, pagos, envios});
});
router.get('/riesgos/catalogos/transacciones', isLoggedIn, async  (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const plantilla = req.session.PlantillaSeleccionada;
    let plantillaRango = [];
    let plantillaOperaciones = [];
    let plantillaAlertamientos = [];
    const resultRangos = await pool.query("Select * from rangos_empresa where cod_empresa = ?", req.user.IdEmpresaCliente);
    const resultOperaciones = await pool.query("Select * from operaciones_empresa where cod_empresa = ?", req.user.IdEmpresaCliente);
    const resultadoDivisa = await pool.query("select divisa_rango from empresa_datosadicionales where cod_empresa = ?", req.user.IdEmpresaCliente);
    const resultAlertamientos = await pool.query("Select * from alertamientos_empresa where cod_empresa = ?", req.user.IdEmpresaCliente);
 
    let pagos; 
    let envios;
    let divisaRango = "";
    
    if(resultadoDivisa.length == 1){
        divisaRango = resultadoDivisa[0].divisa_rango;
    }
    
    plantilla.forEach(element => {
        let ri = "",  rs = "", rio = "", rso = ""; ra1 ="", ra2="";
        resultRangos.forEach(element1 => {
            if(element1.id_nivel == element.id_nivel){
                ri = element1.rango_inferior;
                rs = element1.rango_superior;
            }
        });
        data = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: ri, rango_superior : rs}
        plantillaRango.push(data);
        resultOperaciones.forEach(element2 => {
            if(element2.id_nivel == element.id_nivel){
                rio = element2.rango_inferior;
                rso = element2.rango_superior;
            }
        });
        data2 = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, rango_inferior: rio, rango_superior : rso}
        plantillaOperaciones.push(data2);

        resultAlertamientos.forEach(element3 => {
            if(element3.id_nivel == element.id_nivel){
                ra1 = element3.rango_inferior;
                ra2 = element3.rango_superior;
            }
        });
        data3 = {id_nivel : element.id_nivel, color: element.color, nombre:element.nombre, min: ra1, max : ra2}
        plantillaAlertamientos.push(data3);
    
    });

   
    res.render("riesgos/config-transacciones", {plantilla,plantillaRango, divisaRango,  plantillaOperaciones, plantillaAlertamientos});
});

router.get('/riesgos/catalogos/edades', isLoggedIn, async  (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
        {
           res.redirect("/riesgos/catalogos");
        }
        const resultadoCatalogo = await pool.query("select * from vw_edades_empresa where id_empresa = ? order by id asc", req.user.IdEmpresaCliente);
        
        let plantilla = req.session.PlantillaSeleccionada;
        res.render("riesgos/config-edades", {resultadoCatalogo, plantilla});
});

router.get('/riesgos/catalogos/identificaciones', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const resultadoCatalogo = await pool.query("select * from vw_identificaciones_empresa where id_empresa = ? order by id asc", req.user.IdEmpresaCliente);
   let isInsert = true;
   let plantilla = req.session.PlantillaSeleccionada;
   res.render("riesgos/config-identificaciones", {resultadoCatalogo, isInsert, plantilla});
});

router.get('/riesgos/catalogos/propositos', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const resultadoCatalogo = await pool.query("select * from vw_propositos_empresa where id_empresa = ? order by id asc", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-propositos", {resultadoCatalogo, isInsert, plantilla});
});


router.get('/riesgos/catalogos/origen', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const resultadoCatalogo = await pool.query("select * from vw_origen_recursos_empresa where id_empresa = ? and tipo_producto = 'PE' order by id asc", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-origen", {resultadoCatalogo, isInsert, plantilla});
});


router.get('/riesgos/catalogos/perfil', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    const resultadoCatalogo = {};
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-perfil", {resultadoCatalogo, isInsert, plantilla});
});

router.get('/riesgos/catalogos/vinculacion', isLoggedIn,  async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos");
     }
    const resultadoCatalogo = await pool.query("select * from vw_canal_vinculacion_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-canal-vinculacion", {resultadoCatalogo, isInsert, plantilla});
});

router.get('/riesgos/catalogos/tipoPersona', isLoggedIn,  async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos");
     }
    const resultadoCatalogo = await pool.query("select * from vw_tipo_persona_empresa where id_empresa = ?", req.user.IdEmpresaCliente);
    let isInsert = true;
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-tipo-persona", {resultadoCatalogo, isInsert, plantilla});
});

var type = upload.single('flUpload');
router.post("/riesgos/catalogos/paises", isLoggedIn, type, async(req, res)=>{
    let success_msg="";
    let error_msg="";
    let tipoPersonaMostrar = "PF";
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos");
     }
     let maximoNivel = req.session.PlantillaSeleccionada[req.session.PlantillaSeleccionada.length -1 ]
    try {
        if (req.file == undefined) {
        error_msg = "Por favor sube un archivo de excel";
        res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
        }
        let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
        readXlsxFile(path).then((rows) => {
          rows.shift();
          let datosExcel = [];
          let errores = [];
          let contador = 0;
          rows.forEach((row) => {
              console.log(row);
            if(parseInt(row[2]) < 1 || parseInt(row[2]) > parseInt(maximoNivel.id_nivel))
            {
                errores.push({text:row[1]});
                contador = contador + 1;
            }
            
            if (row[0]== null){
                row[0] = '';
            }

            datosExcel.push([req.user.IdEmpresaCliente,String(row[0]),row[2]]);
          });
          let msgError = "";
          if(contador!=0){
            if(contador < 50){
                msgError = "Los niveles asociados a las siguientes descripciones no son válidos, la información no se ha cargado, verifica el archivo e intenta de nuevo ";
            }else{
                msgError = "Error en la asignación de niveles, favor de verificar el archivo e intenta de nuevo";
                errores = [];
            }
         }
         
          if(msgError != ""){res.render("riesgos/config-paises", {msgError, errores, tipoPersonaMostrar }); return;}  

            pool.query("Delete from paises_empresa where cod_empresa = ?", req.user.IdEmpresaCliente).then(function(result) {
              
                pool.query("Insert into paises_empresa (cod_empresa, cod_pais, id_nivel) values ?", [datosExcel]).then(function(result){
                    success_msg ="La configuración de los niveles de riesgo para el catálogo de paises se ha guardado correctamente."
                    
                    fs.unlinkSync(path);
                    
                    req.flash("success_msg",success_msg);    
                    res.redirect("/riesgos/catalogos/paises");
                }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
            });
            }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
            });
        });
      } catch (error) {
        error_msg = "El archivo no pudo ser cargado correctamente";
        res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
      }
});

router.post('/riesgos/catalogos/CargaPaises', isLoggedIn, async (req, res)=>{ 
    let tipoPersonaMostrar = "PF";
    pool.query("insert into paises_empresa (select ?, cod_pais, 0  from cat_paises union select ?, '', 0 )", [req.user.IdEmpresaCliente,req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/paises");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-paises",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/ajx/updPaises', isLoggedIn, async (req, res)=>{ 
    pool.query("update  paises_empresa set id_nivel = ? where cod_empresa = ? and cod_pais = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });
});

router.post("/riesgos/catalogos/estados", isLoggedIn, type, async(req, res)=>{
    let tipoPersonaMostrar ="PF";
    let success_msg="";
    let error_msg="";
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos");
     }
     let maximoNivel = req.session.PlantillaSeleccionada[req.session.PlantillaSeleccionada.length -1 ]
    try {
        if (req.file == undefined) {
        error_msg = "Por favor sube un archivo de excel";
        res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
        }
        let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
        readXlsxFile(path).then((rows) => {
          rows.shift();
          let datosExcel = [];
          let errores = [];
          let contador = 0;
          rows.forEach((row) => {
            if(parseInt(row[2]) < 1 || parseInt(row[2]) > parseInt(maximoNivel.id_nivel))
            {
                errores.push({text:row[1]});
                contador = contador + 1;
            }
            if (row[0]== null){
                row[0] = '';
            }
            datosExcel.push([req.user.IdEmpresaCliente,row[0],row[2]]);
            
          });
          console.log(datosExcel);
          let msgError = "";
          if(contador!=0){
            if(contador < 50){
                msgError = "Los niveles asociados a las siguientes descripciones no son válidos, la información no se ha cargado, verifica el archivo e intenta de nuevo ";
            }else{
                msgError = "Error en la asignación de niveles, favor de verificar el archivo e intenta de nuevo";
                errores = [];
            }
         }
         
          if(msgError != ""){res.render("riesgos/config-estados", {msgError, errores, tipoPersonaMostrar }); return;}  

            pool.query("Delete from estados_empresa where cod_empresa = ?", req.user.IdEmpresaCliente).then(function(result) {
              
                pool.query("Insert into estados_empresa (cod_empresa, cod_estado, id_nivel) values ?", [datosExcel]).then(function(result){
                    success_msg ="La configuración de los niveles de riesgo para el catálogo de estados se ha guardado correctamente."
                    
                    fs.unlinkSync(path);
                    
                    req.flash("success_msg",success_msg);    
                    res.redirect("/riesgos/catalogos/estados");
                }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
            });
            }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
            });
        });
      } catch (error) {
        
        error_msg = "El archivo no pudo ser cargado correctamente";
        res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
      }
});

router.post('/riesgos/catalogos/CargaEstados', isLoggedIn,  async (req, res)=>{ 
    let tipoPersonaMostrar = "PF";
    pool.query("insert into estados_empresa (select ?, cod_estado, 0 from cat_estados_spmx union select ?, '', 0)", [req.user.IdEmpresaCliente, req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/estados");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-estados",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/CargaTipoPersona', isLoggedIn, async (req, res)=>{ 
    
    pool.query("insert into tipo_persona_empresa (select ?, cod_tipo_persona, 0 from cat_tipo_persona)", [req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/tipoPersona");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-tipo-persona",{error_msg});
    }); 
});

router.post('/riesgos/catalogos/CargaVinculacion', isLoggedIn, async (req, res)=>{ 
    
    pool.query("insert into canal_vinculacion_empresa (select ?, cod_canal_vinculacion, 0 from cat_canal_vinculacion)", [req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/vinculacion");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-canal-vinculacion",{error_msg});
    }); 
});

router.post('/riesgos/catalogos/ajx/updEstados',isLoggedIn,  async (req, res)=>{ 
        pool.query("update  estados_empresa set id_nivel = ? where cod_empresa = ? and cod_estado = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.post('/riesgos/catalogos/ajx/updVinculacion',isLoggedIn,  async (req, res)=>{ 
    pool.query("update canal_vinculacion_empresa set id_nivel = ? where cod_empresa = ? and cod_canal_vinculacion = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });

});

router.post('/riesgos/catalogos/ajx/updTipoPersona',isLoggedIn,  async (req, res)=>{ 
    pool.query("update  tipo_persona_empresa set id_nivel = ? where cod_empresa = ? and cod_tipo_persona = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });

});

router.post("/riesgos/catalogos/actividad", isLoggedIn, type, async(req, res)=>{
    let success_msg="";
    let error_msg="";
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/actividad");
     }
     let maximoNivel = req.session.PlantillaSeleccionada[req.session.PlantillaSeleccionada.length -1 ]
    try {
        if (req.file == undefined) {
        error_msg = "Por favor sube un archivo de excel";
        res.render("riesgos/config-actividad",{error_msg});
        }
        let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
        readXlsxFile(path).then((rows) => {
          rows.shift();
          let datosExcel = [];
          let errores = [];
          let contador = 0;
          rows.forEach((row) => {
            if(parseInt(row[2]) < 1 || parseInt(row[2]) > parseInt(maximoNivel.id_nivel))
            {
                errores.push({text:row[1]});
                contador = contador + 1;
            }
            if (row[0]== null){
                row[0] = '';
            }
            datosExcel.push([req.user.IdEmpresaCliente,row[0],row[2]]);
          });
          let msgError = "";
          if(contador!=0){
            if(contador < 50){
                msgError = "Los niveles asociados a las siguientes descripciones no son válidos, la información no se ha cargado, verifica el archivo e intenta de nuevo ";
            }else{
                msgError = "Error en la asignación de niveles, favor de verificar el archivo e intenta de nuevo";
                errores = [];
            }
         }
         
          if(msgError != ""){res.render("riesgos/config-actividad", {msgError, errores }); return;}  

            pool.query("Delete from actividad_empresa where cod_empresa = ?", req.user.IdEmpresaCliente).then(function(result) {
              
                pool.query("Insert into actividad_empresa (cod_empresa, cod_actividad, id_nivel) values ?", [datosExcel]).then(function(result){
                    success_msg ="La configuración de los niveles de riesgo para el catálogo de actividades económicas se ha guardado correctamente."
                    
                    fs.unlinkSync(path);
                    
                    req.flash("success_msg",success_msg);    
                    res.redirect("/riesgos/catalogos/actividad");
                }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-actividad",{error_msg});
            });
            }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-actividad",{error_msg});
            });
        });
      } catch (error) {
        console.log(error);
        error_msg = "El archivo no pudo ser cargado correctamente";
        res.render("riesgos/config-actividad",{error_msg});
      }
});

router.post('/riesgos/catalogos/CargaActividad', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into actividad_empresa (select ?, cod_actividad, 0  from cat_actividad_economica union select ?, '0', 0)", [req.user.IdEmpresaCliente, req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base  cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/actividad");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-actividad",{error_msg});
    }); 
});

router.post('/riesgos/catalogos/ajx/updActividad',isLoggedIn,  async (req, res)=>{ 
        pool.query("update  actividad_empresa set id_nivel = ? where cod_empresa = ? and cod_actividad = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.post("/riesgos/catalogos/municipios", isLoggedIn, type, async(req, res)=>{
    let success_msg="";
    let error_msg="";
    if(!req.session.PlantillaSeleccionada)
     {
        res.redirect("/riesgos/catalogos");
     }
     let maximoNivel = req.session.PlantillaSeleccionada[req.session.PlantillaSeleccionada.length -1 ]
    try {
        if (req.file == undefined) {
        error_msg = "Por favor sube un archivo de excel";
        res.render("riesgos/config-municipios",{error_msg,tipoPersonaMostrar});
        }
        let path = './src/public/ConfigClientes/' + req.user.IdEmpresaCliente + "/uploadCatalog/" + req.file.filename;
        readXlsxFile(path).then((rows) => {
          rows.shift();
          let datosExcel = [];
          let errores = [];
          let contador = 0;
          rows.forEach((row) => {
            if(parseInt(row[3]) < 1 || parseInt(row[3]) > parseInt(maximoNivel.id_nivel))
            {
                errores.push({text:row[2]});
                contador = contador + 1;
            }
            if (row[0]== null){
                row[0] = '';
            }
            datosExcel.push([req.user.IdEmpresaCliente,row[0],row[3]]);
          });
          let msgError = "";
          if(contador!=0){
            if(contador < 50){
                msgError = "Los niveles asociados a las siguientes descripciones no son válidos, la información no se ha cargado, verifica el archivo e intenta de nuevo ";
            }else{
                msgError = "Error en la asignación de niveles, favor de verificar el archivo e intenta de nuevo";
                errores = [];
            }
         }
          if(msgError != ""){res.render("riesgos/config-municipios", {msgError, errores,tipoPersonaMostrar }); return;}  

            pool.query("Delete from municipios_empresa where cod_empresa = ?", req.user.IdEmpresaCliente).then(function(result) {
              
                pool.query("Insert into municipios_empresa (cod_empresa, cod_edomunicipio, id_nivel) values ?", [datosExcel]).then(function(result){
                    success_msg ="La configuración de los niveles de riesgo para el catálogo de municipios se ha guardado correctamente."
                    
                    fs.unlinkSync(path);
                    
                    req.flash("success_msg",success_msg);    
                    res.redirect("/riesgos/catalogos/municipios");
                }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
            });
            }).catch(function(err){
                    error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
                    res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
            });
        });
      } catch (error) {
        console.log(error);
        error_msg = "El archivo no pudo ser cargado correctamente";
        res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
      }
});

router.post('/riesgos/catalogos/CargaMunicipios', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into municipios_empresa (select ?, cod_edomunicipo, 0  from cat_municipios_cnbv union select ?, '', 0 )", [req.user.IdEmpresaCliente,req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/municipios");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-municipios",{error_msg, tipoPersonaMostrar});
    }); 
});

router.post('/riesgos/catalogos/ajx/updMunicipios',isLoggedIn,  async (req, res)=>{ 
        let params = [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id];
        console.log(params);
        pool.query("update  municipios_empresa set id_nivel = ? where cod_empresa = ? and cod_edomunicipio = ?",params ).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.post('/riesgos/catalogos/CargaDivisas', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into divisas_empresa select ?, cod_divisa, 0  from cat_divisas", req.user.IdEmpresaCliente).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/divisas");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-divisas",{error_msg});
    }); 
});

router.post('/riesgos/catalogos/ajx/updDivisas',isLoggedIn,  async (req, res)=>{ 
        pool.query("update  divisas_empresa set id_nivel = ? where cod_empresa = ? and cod_divisa = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});



router.post('/riesgos/catalogos/CargaParentesco', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into parentesco_empresa select ?, id_parentesco, 0 , 1, '' from cat_parentesco", req.user.IdEmpresaCliente).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/parentesco");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-parentesco",{error_msg});
    }); 
});

router.post('/riesgos/catalogos/ajx/AddParentesco',isLoggedIn,  async (req, res)=>{ 

    let descripionPr = fn.CleanCadena(req.body.descripcion);
    let Params = [req.user.IdEmpresaCliente, req.body.idlevel, descripionPr];
    console.log(Params);
    await pool.query("CALL usp_insertaParentesco(?,?,?)", Params).then(function(result){
        const r = result[0];
        let id =  r[0].Id_Parentesco;
        let data = {codeResult:"OK", idResult :id};
        res.send(data);
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
});

router.post('/riesgos/catalogos/ajx/updParentesco',isLoggedIn,  async (req, res)=>{ 
        pool.query("update parentesco_empresa set id_nivel_riesgo = ?, status=? where cod_empresa = ? and cod_parentesco = ?", [req.body.idlevel, req.body.idStatus, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
            res.send("OK");
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.post('/riesgos/catalogos/CargaIdentificaciones', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into identificaciones_empresa (select ?, id_identificacion,1, 0, ''  from cat_identificaciones union select ?, 0, 1, 0, 'NO EXISTE VALOR' )", [req.user.IdEmpresaCliente, req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/identificaciones");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-identificaciones",{error_msg});
    }); 
});

router.post('/riesgos/catalogos/ajx/AddIdentificaciones',isLoggedIn,  async (req, res)=>{ 

    let descripionPr = fn.CleanCadena(req.body.descripcion);
    let Params = [req.user.IdEmpresaCliente, req.body.idlevel, descripionPr];
    console.log(Params);
    await pool.query("CALL usp_insertaIdentificacion(?,?,?)", Params).then(function(result){
        const r = result[0];
        let id =  r[0].Id_Identificacion;
        let data = {codeResult:"OK", idResult :id};
        console.log(Params);
        res.send(data);
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
});

router.post('/riesgos/catalogos/ajx/updIdentificaciones',isLoggedIn,  async (req, res)=>{ 
    pool.query("update identificaciones_empresa set id_nivel = ?, status=? where cod_empresa = ? and id_identificacion = ?", [req.body.idlevel, req.body.idStatus, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });

});

router.post('/riesgos/catalogos/CargaPropositos', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into propositos_empresa (select ?, id_proposito,null, 1, 0  from cat_propositos union select ?, 0 ,'NO EXISTE VALOR', 1, 0)", [req.user.IdEmpresaCliente,req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/propositos");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-propositos",{error_msg});
    }); 
});

router.post('/riesgos/catalogos/CargaOrigen', isLoggedIn,  async (req, res)=>{ 
    pool.query("insert into origen_recursos_empresa (select ?, id_origen,null, 1, 0,'PE'  from cat_origen_recursos_rsk union select ?, 0 ,'NO EXISTE VALOR', 1, 0, 'PE')", [req.user.IdEmpresaCliente,req.user.IdEmpresaCliente]).then(function(result){
        let success_msg = "Catálogo base cargado correctamente";
        req.flash("success_msg",success_msg);    
        res.redirect("/riesgos/catalogos/origen");
    }).catch(function(err){
        error_msg = err.errno + " - " + err.code + ":"  + err.sqlMessage;
        res.render("riesgos/config-origen",{error_msg});
    }); 
});

router.post('/riesgos/catalogos/ajx/updPropositos',isLoggedIn,  async (req, res)=>{ 
    pool.query("update propositos_empresa set id_nivel = ?, status=? where cod_empresa = ? and id_proposito = ?", [req.body.idlevel, req.body.idStatus, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });

});

router.post('/riesgos/catalogos/ajx/updOrigen',isLoggedIn,  async (req, res)=>{ 
    pool.query("update origen_recursos_empresa set id_nivel = ?, status=? where cod_empresa = ? and id_origen = ? and tipo_producto = 'PE'", [req.body.idlevel, req.body.idStatus, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });

});

router.post('/riesgos/catalogos/ajx/AddPropositos',isLoggedIn,  async (req, res)=>{ 
    let descripionPr = fn.CleanCadena(req.body.descripcion);
    let Params = [req.user.IdEmpresaCliente, req.body.idlevel, descripionPr];
    await pool.query("CALL usp_insertaProposito(?,?,?)", Params).then(function(result){
        const r = result[0];
        let id =  r[0].Id_Proposito;
        let data = {codeResult:"OK", idResult :id};
        console.log(Params);
        res.send(data);
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.post('/riesgos/catalogos/ajx/AddEdades',isLoggedIn,  async (req, res)=>{ 
    let rango_min = fn.CleanCadena(req.body.rango_minimo);
    let rango_max = fn.CleanCadena(req.body.rango_maximo);
    let Params = [req.user.IdEmpresaCliente, req.body.idlevel, rango_min, rango_max];
    await pool.query("CALL usp_insertaEdades(?,?,?,?)", Params).then(function(result){
        const r = result[0];
        let id =  r[0].id_Edad;
        let data = {codeResult:"OK", idResult :id};
        res.send(data);
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.post('/riesgos/catalogos/ajx/AddOrigen',isLoggedIn,  async (req, res)=>{ 
    let descripionPr = fn.CleanCadena(req.body.descripcion);
    let Params = [req.user.IdEmpresaCliente, req.body.idlevel, descripionPr];
    await pool.query("CALL usp_insertaOrigen(?,?,?,'PE')", Params).then(function(result){
        const r = result[0];
        let id =  r[0].Id_Origen;
        let data = {codeResult:"OK", idResult :id};
        res.send(data);
        }).catch(function(err){
            error_msg = err;
            res.send(error_msg);
        });
    
});

router.post('/riesgos/catalogos/ajx/updRangos',isLoggedIn,  async (req, res)=>{ 
   
        const data = req.body.a;
        var parsedData = JSON.parse(data);
        let divisa = req.body.b;
        let mensajeRespuesta = [];
        parsedData.forEach(function(item) {
            item.unshift(req.user.IdEmpresaCliente);
        });
        let contador=1;

        let resultDivisa = pool.query("Call usp_insertaDivisaRango (?,?)",[req.user.IdEmpresaCliente, divisa]);
       
        parsedData.forEach( async function(item){ 
            await pool.query("Call usp_gestiona_rangos (?)", [item]).then(function(result){
                mensajeRespuesta.push("Información correspondiente a nivel de riesgos " + item[1] + " guardada correctamente");
                if(contador==parsedData.length){
                    res.send(mensajeRespuesta);
                }
            }).catch(function(err){
                mensajeRespuesta.push(err);
                if(contador==parsedData.length){
                    res.send(mensajeRespuesta);
                }
            });
            contador++;
        });
   
});

router.post('/riesgos/catalogos/ajx/updOperaciones',isLoggedIn,  async (req, res)=>{ 
   
    const data = req.body.a;
    var parsedData = JSON.parse(data);
    let mensajeRespuesta = [];
    parsedData.forEach(function(item) {
        item.unshift(req.user.IdEmpresaCliente);
    });
    let contador=1;
    parsedData.forEach( async function(item){ 
        await pool.query("Call usp_gestiona_operaciones (?)", [item]).then(function(result){
            mensajeRespuesta.push("Información correspondiente a nivel de riesgos " + item[1] + " guardada correctamente");
            if(contador==parsedData.length){
                res.send(mensajeRespuesta);
            }
        }).catch(function(err){
            mensajeRespuesta.push(err);
            if(contador==parsedData.length){
                res.send(mensajeRespuesta);
            }
        });
        contador++;
    });
    
});
router.post('/riesgos/catalogos/ajx/updEdades',isLoggedIn,  async (req, res)=>{ 
    pool.query("update edades_empresa set id_nivel = ?, status=? where cod_empresa = ? and id_rango = ?", [req.body.idlevel, req.body.idStatus, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });

});
router.post('/riesgos/catalogos/ajx/updAlertamientos',isLoggedIn,  async (req, res)=>{ 
   
    const data = req.body.a;
    var parsedData = JSON.parse(data);
    let mensajeRespuesta = [];
    parsedData.forEach(function(item) {
        item.unshift(req.user.IdEmpresaCliente);
    });
    let contador=1;
    parsedData.forEach( async function(item){ 
        await pool.query("Call usp_gestiona_alertamientos (?)", [item]).then(function(result){
            mensajeRespuesta.push("Información correspondiente a nivel de riesgos " + item[1] + " guardada correctamente");
            if(contador==parsedData.length){
                res.send(mensajeRespuesta);
            }
        }).catch(function(err){
            mensajeRespuesta.push(err);
            if(contador==parsedData.length){
                res.send(mensajeRespuesta);
            }
        });
        contador++;
    });
    
});

router.post('/riesgos/catalogos/ajx/updPagos',isLoggedIn,  async (req, res)=>{ 
let arreglo = [];
let a = req.body.pnv;
let b = req.body.piv;
let c = req.body.pnc;
let d = req.body.pic;

if (a==""){a = 0;}
if (b==""){b = 0;}
if (c==""){c = 0;}
if (d==""){d = 0;}

let data1 = [req.user.IdEmpresaCliente, '02', a, b];
let data2 = [req.user.IdEmpresaCliente, '03', c, d];
arreglo.push(data1);
arreglo.push(data2);
let contador=1;
let mensajeRespuesta = [];
    arreglo.forEach( async function(item){ 
        await pool.query("Call usp_gestiona_nivelPagos (?)", [item]).then(function(result){
            if(contador==arreglo.length){
                res.send("OK");
            }
        }).catch(function(err){
            mensajeRespuesta.push(err);
            if(contador==arreglo.length){
                res.send(mensajeRespuesta);
            }
        });
        contador++;
    });

});

router.post('/riesgos/catalogos/ajx/updEnvios',isLoggedIn,  async (req, res)=>{ 
    let arreglo = [];
    let a = req.body.env;
    let b = req.body.eiv;
    let c = req.body.enc;
    let d = req.body.eic;

    if (a==""){a = 0;}
    if (b==""){b = 0;}
    if (c==""){c = 0;}
    if (d==""){d = 0;}

    let data1 = [req.user.IdEmpresaCliente, '02', a, b];
    let data2 = [req.user.IdEmpresaCliente, '03', c, d];
    arreglo.push(data1);
    arreglo.push(data2);
    
    let contador=1;
    let mensajeRespuesta = [];
        arreglo.forEach( async function(item){ 
            await pool.query("Call usp_gestiona_nivelEnvios (?)", [item]).then(function(result){
                if(contador==arreglo.length){
                    res.send("OK");
                }
            }).catch(function(err){
                mensajeRespuesta.push(err);
                if(contador==arreglo.length){
                    res.send(mensajeRespuesta);
                }
            });
            contador++;
        });
});

router.post('/riesgos/catalogos/ajx/updAgentes',isLoggedIn,  async (req, res)=>{ 
    pool.query("update  agentes_relacionados set nivel_riesgo = ? where cod_empresa = ? and cod_agente = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });

});
module.exports = router;

router.post('/riesgos/catalogos/ajx/updRemesador',isLoggedIn,  async (req, res)=>{ 
    pool.query("update  empresa_remesadores set nivel_riesgo = ? where cod_empresa = ? and cod_remesador = ?", [req.body.idlevel, req.user.IdEmpresaCliente,req.body.id]).then(function(result){
        res.send("OK");
    }).catch(function(err){
        error_msg = err;
        res.send(error_msg);
    });

});

router.post('/riesgos/ajx/updCampos',isLoggedIn,  async (req, res)=>{ 
    let campos = req.body.campos;
    
    let mensajeRespuesta = [];
    let contador=1;
    
if(campos!=""){
    campos = campos.replace("P","");
    campos = campos.replace("E","");
}
    
    let resultado = await pool.query("delete from cat_empresa_campos_riesgo where cod_empresa = ?", req.user.IdEmpresaCliente);
    let resultado2 = await pool.query("delete from cat_empresa_campos_riesgo_envios where cod_empresa = ?", req.user.IdEmpresaCliente);
    let arreglo = campos.split("|");
    arreglo.forEach( async function(item){ 
        var elemento = item.split(":");
        var opcion = elemento[0];
        var tabla ="";
        if(parseInt(opcion)== 0 ){
            tabla ="insert into cat_empresa_campos_riesgo values(?,?,?)";
        }else{
            tabla ="insert into cat_empresa_campos_riesgo_envios values(?,?,?)";
        }
        var id = elemento[1];
        id = id.replace("P","");
        id = id.replace("E","");
        var porcentaje = elemento[2];
        
        let params = [req.user.IdEmpresaCliente, id, porcentaje];
        console.log(tabla);
        console.log(params);
        await pool.query(tabla, params).then(function(result){
            if(contador==arreglo.length){
                res.send("OK");
            }
        }).catch(function(err){
            mensajeRespuesta.push(err);
            if(contador==arreglo.length){
                res.send(mensajeRespuesta);
            }
        });
        contador++;
    });
  });

router.post('/riesgos/ajx/updCamposNV',isLoggedIn,  async (req, res)=>{ 
    let campos =  JSON.parse(req.body.campos);
    let tipo_servicio = req.body.tiposervicio;
    let tipo_operacion = req.body.tipooperacion;
    let nivel_grupo = req.body.nivel_grupo;

    await pool.query("delete from cat_empresa_campos_riesgo where cod_empresa = ? and tipo_servicio = ? and tipo_operacion = ? and nivel_grupo = ? ", [req.user.IdEmpresaCliente, tipo_servicio, tipo_operacion, nivel_grupo]);
    
    console.log(campos);

    for (let index = 0; index < campos.length; index++) {     
        if(campos[index]!=""){    
            let arreglo = campos[index].split("|"); // Obtenemos registros
            var tabla ="";
            arreglo.forEach(async function(item){ 

                var registro = item.split(":"); //separamos check de textbox
                var checks = registro[0];
                var txts = registro[1];
                var descomposicion = checks.split("_"); //descomponemos elemento check
                var a = descomposicion[0];
                var b = descomposicion[1];
                var c = descomposicion[2];
                tabla ="insert into cat_empresa_campos_riesgo (cod_empresa,id_campo,tipo_servicio,id_nivel,tipo_operacion, porcentaje, nivel_grupo) values(?,?,?,?,?,?,?)";
                let params = [req.user.IdEmpresaCliente, c, a, b, tipo_operacion, txts, nivel_grupo]; 
                console.log(params);
    
                await pool.query(tabla, params);         
            });
        }   
    }
    res.send("OK");
/*
    let arreglo = campos.split("|");
    arreglo.forEach( async function(item){ 
        var elemento = item.split(":");
        var opcion = elemento[0];
        var tabla ="";
        if(parseInt(opcion)== 0 ){
            tabla ="insert into cat_empresa_campos_riesgo values(?,?,?)";
        }else{
            tabla ="insert into cat_empresa_campos_riesgo_envios values(?,?,?)";
        }
        var id = elemento[1];
        id = id.replace("P","");
        id = id.replace("E","");
        var porcentaje = elemento[2];
        
        let params = [req.user.IdEmpresaCliente, id, porcentaje];
        console.log(tabla);
        console.log(params);
        await pool.query(tabla, params).then(function(result){
            if(contador==arreglo.length){
                res.send("OK");
            }
        }).catch(function(err){
            mensajeRespuesta.push(err);
            if(contador==arreglo.length){
                res.send(mensajeRespuesta);
            }
        });
        contador++;
    });*/
  });



 /* Seccion para calificacion de Riesgo por usuario */
router.get('/riesgos/calificacion', isLoggedIn, async (req, res)=>{ 
    let parametrosBusqueda = req.session.consultaRiesgoCte;
    let resultReportes = {};
    /*if(resultReportes != undefined){
        let sql = armaConsultaPerfilCte(parametrosBusqueda, req);
        resultReportes = await pool.query( sql);
    }*/
    if(req.session.resultadoReporte != undefined){
        resultReportes = req.session.resultadoReporte;
    }
    res.render("riesgos/calificacionUsuario",{ parametrosBusqueda, resultReportes});
});

function armaConsultaPerfilCte(parametrosBusqueda, req){

    var sql ="";
    var sqlP = "Select * from vw_clientes_con_totales where cod_empresa = '" + req.user.IdEmpresaCliente +"'";
    sql = sql + (parametrosBusqueda.cod_cliente !="" ? " and cod_cliente = '"+ parametrosBusqueda.cod_cliente + "'": "");
    sql = sql + (parametrosBusqueda.cod_cliente_externo !="" ? " and cod_cliente_externo = '"+ parametrosBusqueda.cod_cliente_externo + "'": "");
    sql = sql + (parametrosBusqueda.fechaInicio !="" && parametrosBusqueda.fechaFin ? " and DATE(fec_insert) between '"+ parametrosBusqueda.fechaInicio +"' and '"+ parametrosBusqueda.fechaFin + "'" : "");
    if(parametrosBusqueda.nombre!="")
    {
            sql += " and  nombre_completo LIKE '%" + parametrosBusqueda.nombre + "%'";
    }
    return sqlP + sql + " limit 1000";
}
router.post('/riesgos/calificacion', isLoggedIn, async (req, res)=>{ 
    let resultReportes = {}
    let parametrosBusqueda = {}
    main : {
        parametrosBusqueda = {
            cod_cliente : req.body.txtIdCliente.trim(),
            nombre : fn.CleanCadena(req.body.txtNombre.trim()),
            fechaInicio : req.body.hfstartDate != "" ? fn.ConvierteFechaFormatoBase(req.body.hfstartDate) : "",
            fechaFin : req.body.hfendDate !="" ? fn.ConvierteFechaFormatoBase(req.body.hfendDate) : "",
            fechaInicio_st : req.body.hfstartDate != "" ? req.body.hfstartDate : "",
            fechaFin_st : req.body.hfendDate !="" ? req.body.hfendDate : "",
            cod_cliente_externo : fn.CleanCadena(req.body.txtIdClienteExterno.trim())
          };
        req.session.consultaRiesgoCte = parametrosBusqueda;
       
        let sqlf = armaConsultaPerfilCte(parametrosBusqueda,req)
        resultReportes = await pool.query( sqlf);
        //req.session.resultadoReporte = resultReportes;
    }
    res.render("riesgos/calificacionUsuario",{resultReportes, parametrosBusqueda});
});

router.all('/riesgos/cliente/detalle', isLoggedIn, async (req, res)=>{ 
  let cod_cliente="";
  let result_paisesNac = {};
  let result_genero = {};
  let data = {};
  let result_pagos_nacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0 ,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible" };
  let result_pagos_internacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0 , valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
  let result_envios_nacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
  let result_envios_internacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
  let  resultados = {};
  let result_ltAnios = {};
  let resultIdentificaciones = {};
  if(!req.body.cod){
    if(!req.query.cod){
      res.redirect("/riesgos/calificacion");
    }else{
        cod_cliente = req.query.cod;
    }
  }else{
    cod_cliente = req.body.cod;
  }
  main:{
    result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
    result_genero = await catalogosBD.Cat_genero();
    result_ltAnios = catalogosBD.Get_anios();
    var anioActual = new Date().getFullYear();
    let resultCliente = await pool.query("Select * from vw_clientes where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);
    if (resultCliente.length>0){
        let tipoN =""; tipoI="";
        if(resultCliente[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
        data = {
          cod_cliente : cod_cliente,
          nombre: resultCliente[0].nombre_cliente,
          apaterno: resultCliente[0].apaterno_cliente,
          amaterno: resultCliente[0].amaterno_cliente,
          telefono: resultCliente[0].telefono,
          lada: resultCliente[0].lada,
          fechanacimiento : resultCliente[0].fecha_nacimiento,
          paisNacimiento : resultCliente[0].cod_pais_nacimiento,
          nacionalidad : resultCliente[0].cod_nacionalidad,
          calle: resultCliente[0].calle,
          noint: resultCliente[0].no_int,
          noext: resultCliente[0].no_ext,
          ciudad: resultCliente[0].ciudad,
          cp: resultCliente[0].cp,
          tipoI: tipoI,
          tipoN:tipoN,
          cboColonia : resultCliente[0].cod_asentamiento + "|" + resultCliente[0].cp,
          cboEstado : resultCliente[0].cod_estado,
          cboMuncipio : resultCliente[0].cod_municipio,
          txtColonia : resultCliente[0].asentamiento,
          txtEstado : resultCliente[0].estado,
          txtMunicipio :resultCliente[0].municipio,
          pais : resultCliente[0].cod_pais,
          status: resultCliente[0].status,
          status_descripcion: resultCliente[0].descripcion_status,
          nivel : resultCliente[0].nivel,
          color_nivel : resultCliente[0].color_nivel,
          genero : resultCliente[0].cod_genero,
          esPepConfirmado :  resultCliente[0].esPepconfirmado,
          rfc: resultCliente[0].rfc,
          curp: resultCliente[0].curp,
          email: resultCliente[0].email,
        };

        //Remesas Pagos Nacionales
        let p01 = await pool.query("Select * from vw_remesas_in_calificiacion_riesgo where cod_empresa = ? and cod_cliente_beneficiario = ?", [req.user.IdEmpresaCliente, cod_cliente]);
        let p02 = await pool.query("Select * from vw_remesas_out_calificacion_riesgo where cod_empresa = ? and cod_cliente_beneficiario = ?", [req.user.IdEmpresaCliente, cod_cliente]);
        
        let niveles = await pool.query("Select * from vw_plantilla_empresa where cod_empresa = ?", [req.user.IdEmpresaCliente]);
        var  lq =  Enumerable.from(p01)
        .groupBy(z=>z.tipo_producto)
        .select(z=>(
        {
            tipo_producto:z.key(), 
            remesas:z.getSource(),
            porcentaje_riesgo : fn.roundToTwo(Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.porcentaje_riesgo)})),
            totalRemesas : Enumerable.from(z.getSource()).count(),
            valor_riesgo : Enumerable.from(z.getSource()).sum(function(item){return parseInt(item.calificacion)}),
            nivel_descripcion : "",
            nivel_color :""
        }))
        .toArray();
        /*
         var lq = Enumerable.from(p01)
        .groupBy(z => z.tipo_producto)
        .select(z => ({
            tipo_producto: z.key(),
            sub_grupos: Enumerable.from(z.getSource())
                .groupBy(y => y.anio)
                .select(y => ({
                    anio: y.key(),
                    meses: Enumerable.from(y.getSource())
                        .groupBy(x => x.mes)
                        .select(x => ({
                            mes: x.key(),
                            remesas: x.getSource(), // Las remesas se asignan aquí
                            porcentaje_riesgo: fn.roundToTwo(
                                Enumerable.from(x.getSource()).sum(item => parseFloat(item.porcentaje_riesgo))
                            ),
                            totalRemesas: Enumerable.from(x.getSource()).count(),
                            valor_riesgo: Enumerable.from(x.getSource()).sum(item => parseInt(item.calificacion)),
                        }))
                        .toArray(),
                }))
                .toArray(),
                porcentaje_riesgo: fn.roundToTwo(
                Enumerable.from(z.getSource()).sum(item => parseFloat(item.porcentaje_riesgo))
            ),
            totalRemesas: Enumerable.from(z.getSource()).count(),
            valor_riesgo: Enumerable.from(z.getSource()).sum(item => parseInt(item.calificacion)),
            nivel_descripcion: "",
            nivel_color: "",
        }))
        .toArray();
        
*/

        var  lq2 =  Enumerable.from(p02)
        .groupBy(z=>z.tipo_producto)
        .select(z=>(
        {
            tipo_producto:z.key(), 
            remesas:z.getSource(),
            porcentaje_riesgo : fn.roundToTwo(Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.porcentaje_riesgo)})),
            totalRemesas : Enumerable.from(z.getSource()).count(),
            valor_riesgo : Enumerable.from(z.getSource()).sum(function(item){return parseInt(item.calificacion)}),
            nivel_descripcion : "",
            nivel_color :""
        }))
        .toArray();
/*
        var lq2 = Enumerable.from(p02)
        .groupBy(z => z.tipo_producto)
        .select(z => ({
            tipo_producto: z.key(),
            sub_grupos: Enumerable.from(z.getSource())
                .groupBy(y => y.anio)
                .select(y => ({
                    anio: y.key(),
                    meses: Enumerable.from(y.getSource())
                        .groupBy(x => x.mes)
                        .select(x => ({
                            mes: x.key(),
                            remesas: x.getSource(), // Las remesas se asignan aquí
                            porcentaje_riesgo: fn.roundToTwo(
                                Enumerable.from(x.getSource()).sum(item => parseFloat(item.porcentaje_riesgo))
                            ),
                            totalRemesas: Enumerable.from(x.getSource()).count(),
                            valor_riesgo: Enumerable.from(x.getSource()).sum(item => parseInt(item.calificacion)),
                        }))
                        .toArray(),
                }))
                .toArray(),
            porcentaje_riesgo: fn.roundToTwo(
                Enumerable.from(z.getSource()).sum(item => parseFloat(item.porcentaje_riesgo))
            ),
            totalRemesas: Enumerable.from(z.getSource()).count(),
            valor_riesgo: Enumerable.from(z.getSource()).sum(item => parseInt(item.calificacion)),
            nivel_descripcion: "",
            nivel_color: "",
        }))
        .toArray();

        */

        lq.forEach(element => {
            element.totalRemesas = element.totalRemesas ==""? 0 : element.totalRemesas;
            element.porcentaje_riesgo = fn.roundToTwo(element.totalRemesas == 0 ? 0 : element.porcentaje_riesgo/element.totalRemesas); 
            element.valor_riesgo = Math.round(element.totalRemesas == 0 ? 0 : (element.valor_riesgo = element.valor_riesgo==""? 0 : element.valor_riesgo)/element.totalRemesas); 
            
            if ( element.valor_riesgo!=0){
                niveles.forEach(item => {
                    if(item.id_nivel == element.valor_riesgo){
                        element.nivel_color = item.color;
                        element.nivel_descripcion = item.nombre;
                    }
                });
            }   
            switch(element.tipo_producto){
                case "PN":
                    result_pagos_nacionales = element;
                    break;
                case "PI":
                    result_pagos_internacionales = element;
                    break;
            }

        });
        console.log("PAGOS INTERNACIONALES");
        console.log(result_pagos_internacionales);

        lq2.forEach(element => {
            element.totalRemesas = element.totalRemesas ==""? 0 : element.totalRemesas;
            element.porcentaje_riesgo = fn.roundToTwo(element.totalRemesas == 0 ? 0 : element.porcentaje_riesgo/element.totalRemesas); 
            element.valor_riesgo = Math.round(element.totalRemesas == 0 ? 0 : (element.valor_riesgo = element.valor_riesgo==""? 0 : element.valor_riesgo)/element.totalRemesas); 
            
            if ( element.valor_riesgo!=0){
                niveles.forEach(item => {
                    if(item.id_nivel == element.valor_riesgo){
                        element.nivel_color = item.color;
                        element.nivel_descripcion = item.nombre;
                    }
                });
            }   
            switch(element.tipo_producto){
                case "EN":
                    result_envios_nacionales = element;
                    break;
                case "EI":
                    result_envios_internacionales = element;
                    break;
            }

        });
        
        resultados = {
            result_pagos_nacionales : result_pagos_nacionales,
            result_pagos_internacionales : result_pagos_internacionales,
            result_envios_nacionales : result_envios_nacionales,
            result_envios_internacionales : result_envios_internacionales
        }

        resultIdentificaciones = await pool.query("Select * from vw_cliente_identificacion where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);


      }  
}
  res.render("riesgos/detalleCliente",{result_paisesNac, data, resultados, resultIdentificaciones, result_genero, result_ltAnios, anioActual });
});

/*
router.all('/riesgos/cliente/detalle', isLoggedIn, async (req, res)=>{ 
  let cod_cliente="";
  let result_paisesNac = {};
  let result_genero = {};
  let data = {};
  let result_pagos_nacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0 ,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible" };
  let result_pagos_internacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0 , valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
  let result_envios_nacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};
  let result_envios_internacionales = { tipo_producto : "", porcentaje_riesgo : 0, totalRemesas : 0,  valor_riesgo:0, nivel_color: "#666666", nivel_descripcion : "No disponible"};

  let  resultados = {};
  let result_ltAnios = {};
  let resultIdentificaciones = {};
  if(!req.body.cod){
    if(!req.query.cod){
      res.redirect("/riesgos/calificacion");
    }else{
        cod_cliente = req.query.cod;
    }
  }else{
    cod_cliente = req.body.cod;
  }
  main:{
    result_paisesNac = await pool.query("Select cod_pais, pais, case when gentilicio = '' then pais else gentilicio end as nacionalidad FROM cat_paises");           
    result_genero = await catalogosBD.Cat_genero();
    result_ltAnios = catalogosBD.Get_anios();
    var anioActual = new Date().getFullYear();
    let resultCliente = await pool.query("Select * from vw_clientes where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);
    if (resultCliente.length>0){
        let tipoN =""; tipoI="";
        if(resultCliente[0].tipo_domicilio =="N"){tipoN = "checked";  }else{ tipoI = "checked"; }
        data = {
          cod_cliente : cod_cliente,
          nombre: resultCliente[0].nombre_cliente,
          apaterno: resultCliente[0].apaterno_cliente,
          amaterno: resultCliente[0].amaterno_cliente,
          telefono: resultCliente[0].telefono,
          lada: resultCliente[0].lada,
          fechanacimiento : resultCliente[0].fecha_nacimiento,
          paisNacimiento : resultCliente[0].cod_pais_nacimiento,
          nacionalidad : resultCliente[0].cod_nacionalidad,
          calle: resultCliente[0].calle,
          noint: resultCliente[0].no_int,
          noext: resultCliente[0].no_ext,
          ciudad: resultCliente[0].ciudad,
          cp: resultCliente[0].cp,
          tipoI: tipoI,
          tipoN:tipoN,
          cboColonia : resultCliente[0].cod_asentamiento + "|" + resultCliente[0].cp,
          cboEstado : resultCliente[0].cod_estado,
          cboMuncipio : resultCliente[0].cod_municipio,
          txtColonia : resultCliente[0].asentamiento,
          txtEstado : resultCliente[0].estado,
          txtMunicipio :resultCliente[0].municipio,
          pais : resultCliente[0].cod_pais,
          status: resultCliente[0].status,
          status_descripcion: resultCliente[0].descripcion_status,
          nivel : resultCliente[0].nivel,
          color_nivel : resultCliente[0].color_nivel,
          genero : resultCliente[0].cod_genero
        };

        //Remesas Pagos Nacionales
        let p01 = await pool.query("Select * from vw_remesas_in_calificiacion_riesgo where cod_empresa = ? and cod_cliente_beneficiario = ?", [req.user.IdEmpresaCliente, cod_cliente]);
        let p02 = await pool.query("Select * from vw_remesas_out_calificacion_riesgo where cod_empresa = ? and cod_cliente_beneficiario = ?", [req.user.IdEmpresaCliente, cod_cliente]);
        
        let niveles = await pool.query("Select * from vw_plantilla_empresa where cod_empresa = ?", [req.user.IdEmpresaCliente]);
       
        var  lq =  Enumerable.from(p01)
        .groupBy(z=>z.tipo_producto)
        .select(z=>(
        {
            tipo_producto:z.key(), 
            remesas:z.getSource(),
            porcentaje_riesgo : fn.roundToTwo(Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.porcentaje_riesgo)})),
            totalRemesas : Enumerable.from(z.getSource()).count(),
            valor_riesgo : Enumerable.from(z.getSource()).sum(function(item){return parseInt(item.calificacion)}),
            nivel_descripcion : "",
            nivel_color :""
        }))
        .toArray();

        var  lq2 =  Enumerable.from(p02)
        .groupBy(z=>z.tipo_producto)
        .select(z=>(
        {
            tipo_producto:z.key(), 
            remesas:z.getSource(),
            porcentaje_riesgo : fn.roundToTwo(Enumerable.from(z.getSource()).sum(function(item){return parseFloat(item.porcentaje_riesgo)})),
            totalRemesas : Enumerable.from(z.getSource()).count(),
            valor_riesgo : Enumerable.from(z.getSource()).sum(function(item){return parseInt(item.calificacion)}),
            nivel_descripcion : "",
            nivel_color :""
        }))
        .toArray();

        lq.forEach(element => {
            element.totalRemesas = element.totalRemesas ==""? 0 : element.totalRemesas;
            element.porcentaje_riesgo = fn.roundToTwo(element.totalRemesas == 0 ? 0 : element.porcentaje_riesgo/element.totalRemesas); 
            element.valor_riesgo = Math.round(element.totalRemesas == 0 ? 0 : (element.valor_riesgo = element.valor_riesgo==""? 0 : element.valor_riesgo)/element.totalRemesas); 
            
            if ( element.valor_riesgo!=0){
                niveles.forEach(item => {
                    if(item.id_nivel == element.valor_riesgo){
                        element.nivel_color = item.color;
                        element.nivel_descripcion = item.nombre;
                    }
                });
            }   
            switch(element.tipo_producto){
                case "PN":
                    result_pagos_nacionales = element;
                    break;
                case "PI":
                    result_pagos_internacionales = element;
                    break;
            }

        });

        lq2.forEach(element => {
            element.totalRemesas = element.totalRemesas ==""? 0 : element.totalRemesas;
            element.porcentaje_riesgo = fn.roundToTwo(element.totalRemesas == 0 ? 0 : element.porcentaje_riesgo/element.totalRemesas); 
            element.valor_riesgo = Math.round(element.totalRemesas == 0 ? 0 : (element.valor_riesgo = element.valor_riesgo==""? 0 : element.valor_riesgo)/element.totalRemesas); 
            
            if ( element.valor_riesgo!=0){
                niveles.forEach(item => {
                    if(item.id_nivel == element.valor_riesgo){
                        element.nivel_color = item.color;
                        element.nivel_descripcion = item.nombre;
                    }
                });
            }   
            switch(element.tipo_producto){
                case "EN":
                    result_envios_nacionales = element;
                    break;
                case "EI":
                    result_envios_internacionales = element;
                    break;
            }

        });
        
        resultados = {
            result_pagos_nacionales : result_pagos_nacionales,
            result_pagos_internacionales : result_pagos_internacionales,
            result_envios_nacionales : result_envios_nacionales,
            result_envios_internacionales : result_envios_internacionales
        }
       
        resultIdentificaciones = await pool.query("Select * from vw_cliente_identificacion where cod_empresa = ? and cod_cliente = ?", [req.user.IdEmpresaCliente, cod_cliente]);


      }  
}

  res.render("riesgos/detalleCliente",{result_paisesNac, data, resultados, resultIdentificaciones, result_genero, result_ltAnios, anioActual });
});
*/

router.post('/riesgos/detalleupd', isLoggedIn, async (req, res)=>{ 
    var bandera = false;
    let tipoI = "";
    let tipoN = "";
    let TipoDomicilio = "";
    let Cod_colonia = "";
    let data = {};
    let fecha_NacimientoBase;
    let sql;
main:{
    try{
    if(req.body.cboColonia!="")
      {
        Cod_colonia = req.body.cboColonia.split("|")[0];
      }
    if(req.body.optTipoDom=="N"){tipoN = "checked"; TipoDomicilio="N"; }else{ tipoI = "checked"; TipoDomicilio="I";}
      data = {
      cod_cliente : req.body.hfidva,
      nombre: req.body.txtNombreCte.toUpperCase(),
      apaterno: req.body.txtApaterno.toUpperCase(),
      amaterno: req.body.txtAmaterno.toUpperCase(),
      telefono: req.body.txtTelefono,
      lada: req.body.txtLada,
      fechanacimiento : req.body.txtFechaNacimiento,
      calle: req.body.txtCalle.toUpperCase(),
      noint: req.body.txtNumInt.toUpperCase(),
      noext: req.body.txtNumExt.toUpperCase(),
      ciudad: req.body.txtCiudad.toUpperCase(),
      cp: req.body.txtCP,
      tipoI: tipoI,
      tipoN: tipoN,
      cboColonia : req.body.cboColonia,
      cboEstado : req.body.cboEstado,
      cboMuncipio : req.body.cboMunicipio,
      txtColonia : req.body.txtColonia,
      txtEstado : req.body.txtEstado,
      txtMunicipio : req.body.txtMunicipio,
      pais : req.body.cboPais,
      pais_nacimiento : req.body.cboPaisNacimiento,
      nacionalidad : req.body.cboNacionalidad,
      genero : req.body.cboGenero,
      rfc: req.body.txtRFC,
      curp: req.body.txtCURP,
      email: req.body.txtEmail
    };
    
    fecha_NacimientoBase =  fn.ConvierteFechaFormatoBase(req.body.txtFechaNacimiento);
    
    }catch(e){
        req.flash("error_message", "Error al obtener los datos para modificar el registro del cliente"); 
    }
    sql = "call usp_actualiza_perfil_cliente(?)";
    let Params = [
        req.user.IdEmpresaCliente,
        data.cod_cliente,
        data.nombre,
        data.apaterno,
        data.amaterno,
        data.lada,
        data.telefono,
        TipoDomicilio,
        data.pais,
        data.cboEstado,
        data.cboMuncipio,
        Cod_colonia,
        data.ciudad, 
        data.cp,
        data.txtEstado, 
        data.txtMunicipio, 
        data.txtColonia,
        data.calle, 
        data.noext, 
        data.noint, 
        data.nacionalidad,
        data.pais_nacimiento,
        0,
        '',
        fecha_NacimientoBase,
        data.genero,
        data.rfc,
        data.curp,
        data.email
    ];


        const result = await pool.query(sql, [Params]).then(function(resultadoObtenido) {
            req.flash("success_msg", "Cliente actualizado correctamente");
            res.redirect(url.format({pathname: "/riesgos/cliente/detalle",  query:{"cod": data.cod_cliente }}));
        }).catch(function(err){
            req.flash("error_msg", err); 
            res.redirect(url.format({pathname: "/riesgos/cliente/detalle",  query:{"cod": data.cod_cliente }}));
        });  
        bandera = true;
   
    
}
});


router.post('/riesgos/giro/detalleCalificacion', async (req, res)=>{ 
    const cve = req.body.cve;
    const tr = req.body.tr;
    const cor = req.body.cor;
    let tip = req.body.tip;
    var tabla = "";
    var tabla2 ="";
    switch (tip) {
        case "EN":
            tabla = "vw_detalle_calificacion_giro_out";
            tabla2 = "remesas_out";
            break;
        case "EI":
            tabla = "vw_detalle_calificacion_giro_out";
            tabla2 = "remesas_out";
            break;
        case "PN":
            tabla = "vw_detalle_calificacion_giro";
            tabla2 = "remesas_in";
            break;
        case "PI":
            tabla = "vw_detalle_calificacion_giro";
            tabla2 = "remesas_in";
            break;
        default:
            break;
    }

    let params = [req.user.IdEmpresaCliente,tr,cor,cve];
    const result = await pool.query("Select * FROM "+ tabla +" where cod_empresa = ? and cod_transmisor = ? and cod_corresponsal = ? and cve_cobro = ? order by id_campo", params );
    const resumen = await pool.query("select a.calificacion, pe.nombre as descripcion_nivel, pe.color as color_nivel, a.total_campos_calificados, a.porcentaje_riesgo, a.plantilla_aplicada from "+ tabla2 +" a left join plantilla_niveles pe on (pe.id_plantilla = a.plantilla_aplicada and pe.id_nivel = a.calificacion)  where a.cod_empresa = ? and a.cod_transmisor = ? and a.cod_corresponsal = ? and a.cve_cobro = ?", params );
    
    let data = {
        result : result,
        resumen : resumen
    }

    res.send(data);
  });


  

  router.post('/riesgos/clientes/ajx/updIdentificacion', async (req, res)=>{ 
    const id = req.body.id;
    let arr = id.split("|");
    let ar1 = arr[0];
    let ar2 = arr[1];
    let Params = [
        req.user.IdEmpresaCliente,
        ar1,
        ar2,
        req.body.a,
        req.body.b == ''? null :  fn.ConvierteFechaFormatoBase(req.body.b),
        req.body.c == ''? null :  fn.ConvierteFechaFormatoBase(req.body.c),
        req.body.d == ''? null :  req.body.d,
        req.body.e == ''? null :  req.body.e,
        req.body.f,
        req.user.IdUser
    ]
    
    await pool.query("Call usp_gestiona_identificacion_cliente (?)", [Params]).then(function(result){
        let r =result[0];
              if((r[0]).cod=="00"){
                res.send("OK");
              }else{
                error_msg = r[0].msg;
                res.send(error_msg);
              };
      }).catch(function(err){
        res.send(err);
      });
  });

router.post('/riesgos/giro/historialRemesa', async (req, res)=>{ 
    const cve = req.body.cve;
    const tr = req.body.tr;
    const cor = req.body.cor;
    const historial = await pool.query("select cve_cobro, fecha_registro, upper(descripcion) as descripcion from vw_bitacora_movimientos_remesas  where cod_empresa = ? and cod_transmisor = ? and cod_corresponsal = ? and cve_cobro = ? order by id_movimiento desc", [req.user.IdEmpresaCliente,tr,cor,cve] );
  
    let data = {
        result : historial
    }

    res.send(data);
  });

  router.post('/riesgos/giro/historialRemesaEnv', async (req, res)=>{ 
    const cve = req.body.cve;
    const tr = req.body.tr;
    const cor = req.body.cor;
    const historial = await pool.query("select cve_cobro, fecha_registro, upper(descripcion) as descripcion from vw_bitacora_movimientos_remesas_out  where cod_empresa = ? and cod_transmisor = ? and cod_corresponsal = ? and cve_cobro = ? order by id_movimiento desc", [req.user.IdEmpresaCliente,tr,cor,cve] );
    let data = {
        result : historial
    }
    res.send(data);
  });

  
router.post('/riesgos/giro/detalleStatusCliente', async (req, res)=>{ 
    const codigo = req.body.cve;
   
    const result = await pool.query("Select * FROM vw_bitacora_bloqueo_clientes where cod_empresa = ? and id_cliente = ? order by fecha_registro desc", [req.user.IdEmpresaCliente,codigo] );
    let data = {
        result : result
    }
    res.send(data);
});

  router.post('/riesgos/giro/cambiastatuscliente', async (req, res)=>{ 
    const id = req.body.cve;
    const obs = req.body.tr;
    const st = req.body.st;
    let Params = [
        req.user.IdEmpresaCliente,
        id,
        obs,
        st,
        req.user.IdEmpresa,
        req.user.IdUser
    ]
    await pool.query("Call usp_actualiza_statusCliente (?)", [Params]).then(function(result){
        let r =result[0];
              if((r[0]).cod=="00"){
                let data = {
                    cod : "OK",
                    msg : '',
                    status : r[0].status,
                    descripcion_status : r[0].descripcion_status
                }
                res.send(data);
              }else{
                error_msg = r[0].msg;
                let data = {
                    cod : "99",
                    msg : r[0].msg,
                    status : '',
                    descripcion_status : ''
                }
                res.send(data);
              };
      }).catch(function(err){
            let data = {
                cod : "99",
                msg : r[0].msg,
                status : '',
                descripcion_status : ''
            }
            res.send(data);
      });
  });

 /* Fin Seccion para calificacion de Riesgo por usuario */

 router.post('/riesgos/ajx/GetComportamientoTransaccional',isLoggedIn,  async (req, res)=>{ 
    
    let cod_cliente = req.body.cod_cliente;
    let anio = req.body.anio;
    let params = [req.user.IdEmpresaCliente, anio, cod_cliente];
    let operaciones = await pool.query("Call usp_clientes_comportamiento_perfil_transaccional_operaciones(?)", [params]);
    let montos = await pool.query("Call usp_clientes_comportamiento_perfil_transaccional_monto(?)", [params]);
    let factor = await pool.query("Call usp_clientes_comportamiento_perfil_transaccional_factor(?)",[params]);
    let op = operaciones[0];
    let mt = montos[0];
    let ft = factor[0];

    let resultados = {
        operaciones : op,
        montos : mt,
        factor : ft
    }
    res.send(resultados);
  });

  router.get('/riesgos/catalogos/pep', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    str = "select id_nivel from pep_empresa where cod_empresa = ?";
    let result = await pool.query(str, [req.user.IdEmpresaCliente]);
    let idnivel = "";
    if (result.length>0){
        idnivel = result[0].id_nivel;
    }
    data = {
        id_nivel_pep:idnivel
    }
   
    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-pep", {plantilla, data});
});


router.post('/riesgos/catalogos/updpep', isLoggedIn, async (req, res)=>{ 
    if(!req.session.PlantillaSeleccionada)
    {
       res.redirect("/riesgos/catalogos");
    }
    let idnivel = req.body.cboNivel;
    let Params = [
        req.user.IdEmpresaCliente,
        idnivel
    ]
    console.log(Params);
    let success_msg = "";
    let error_msg = "";
    if(idnivel != ""){
        let result = await pool.query("Call usp_gestiona_pep_empresa (?)", [Params]);
        console.log(result);
        let r =result[0];
            if((r[0]).code=="00"){
                success_msg = "Nivel actualizado correctamente";
            }else{
                error_msg = "Error al actualizar el nivel";
            };
    }
    else
    {
        error_msg = "Debes seleccionar un nivel";
    }
    str = "select id_nivel from pep_empresa where cod_empresa = ?";
    let resultados = await pool.query(str, [req.user.IdEmpresaCliente]);
    if (resultados.length>0){
        idnivel = resultados[0].id_nivel;
    }
    data = {
        id_nivel_pep:idnivel
    }

    let plantilla = req.session.PlantillaSeleccionada;
    res.render("riesgos/config-pep", {plantilla, data, success_msg, error_msg});
});


module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\riesgos.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\test.js ---

const express = require("express");
const router = express.Router();
const {  isNotLoggedIn, isLoggedIn } = require("../lib/auth");
const funciones = require("../lib/catalogosFunctions");
const CajaService = require("../lib/Apis/CajaService");
const { cod_empresa } = require("../lib/bitacoras");


router.all('/test',  async function(req, res) {
  let rs = await registra();
 // let rs = await confirma();
  //let rs = await despago();
  res.send(rs);
}); 


async function registra(){
  const proxyInstance = new CajaService.CajaService();
  let request = {
    cod_empresa:  process.env.EMPRESA_CODE,
    cod_sucursal: 221,
    usuario: "dsandoval",
    codigo_rastreo:"TESTPBA0006",
    tipo_movimiento: "PAG",
    transmisor: "MONEYGRAM",
    id_usuario: 0,
    fecha_registro: "2025-04-29 01:13:02",
    cve_cobro: "TESTPBA0006",
    divisa_origen: "USD",
    divisa_destino: "MXN",
    tipoCambio: 18.00, 
    importeEnviado: 10.00, 
    comision: 0, 
    montoPago: 180.00, 
    paisOrigen: "Somalia", 
    paisDestino: "Mexico",
    nombres: "Juan Thomas", //str 100
    apPaterno: "Perez", //str 100
    apMaterno: "Santiz", //str 100
    paisNacimiento: "Mexico", //str 100
    estadoNacimiento: "Yucatan", //str 100
    nacionalidad: "Mexicano", //str 100
    fechaNacimiento: "1980-01-01", //str 10 yyyy-mm-dd
    genero: "M", //str 50 "M" "F"
    tipoIdentificacion: "pasaporte", //str 100
    numIdentificacion: "QWER123AS", //str 13
    identificacionFechaVencimiento: "2010", //str 20
    identificacionFechaExpedicion: "1998-01-01", //str 10 --> yyyy-mm-dd
    identificacionPaisEmision: "Mexico" //str 100
  };
  let rs = await proxyInstance.registrar_operacion_caja(request);
  
  return rs;
}
async function confirma(){
  const proxyInstance = new CajaService.CajaService();
  let rq = {
    cod_empresa :  process.env.EMPRESA_CODE,
    cod_sucursal : 221,
    operacion : 800000001,
    cve_cobro: "TESTPBA0004",
    folio : "IT011025042815353539027046"
  }
  rs = await proxyInstance.confirmar_operacion_caja(rq);
  return rs;
}

async function despago(){
  const proxyInstance = new CajaService.CajaService();
  let rq = {
    folio : "IT011025042815353539027046",
    codigo_rastreo:"TESTPBA0004",
    transmisor: "MONEYGRAM",
    id_usuario: 13400,
    usuario: "mtome",
    cod_sucursal: 110,
    fecha_registro: "2025-04-28 15:37:02",
    operacion : 800000001,
    cve_cobro: "TESTPBA0004",
    montoPago: 180.00, 
  }
  rs = await proxyInstance.registrar_despago_caja(rq);
  return rs;
}


module.exports = router;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\routes\test.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\database.js ---

const mysql = require("mysql2");
const {database} = require("./keys");
const { promisify } = require("util");

const pool = mysql.createPool(database);
pool.getConnection((err,connection)=>{
    if(err){
        if(err.code==="PROTOCOL_CONNECTION_LOST")
        {
            console.error("LA BASE DE DATOS ESTA CERRADA");
        }
        if(err.code==="ER_CON_COUNT_ERROR")
        {
            console.error("LA BASE DE DATOS TIENE MUCHAS CONEXIONES");
        }
        if(err.code==="ECONNREFUSED")
        {
            console.error("LA CONEXION FUE RECHAZADA");
        }
    }

    if(connection) connection.release();
    console.log("Base de datos Conectada");
    return;
});
pool.query = promisify(pool.query);

module.exports = pool;

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\database.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\index.js ---

const dotenv = require("dotenv");
dotenv.config({path: ".env"});
const express = require("express");
const bodyparser = require("body-parser");
const morgan = require("morgan");
const handlebars = require("express-handlebars");
const {allowInsecurePrototypeAccess} = require('@handlebars/allow-prototype-access');
const path = require("path");
const Handlebars = require('handlebars');
const hbsHelpers = require('./helpers/helperExtended');
const flash = require("connect-flash");
const session = require("express-session");
const MySqlStore = require("express-mysql-session");
const passport = require("passport");
const { env } = require("process");
//initializacion
const app = express();
require("./lib/passport");


//settings

var port = process.env.PORT || 4010;

app.set("port", port);
app.set("views", path.join(__dirname,"views"));

app.engine(".hbs", handlebars({
    defaultLayout:"main",
    layoutsDir: path.join(app.get("views"),"layouts"),
    partialsDir: path.join(app.get("views"),"partials"),
    helpers: hbsHelpers,
    extname:".hbs",
    handlebars: allowInsecurePrototypeAccess(Handlebars)
}));
const sessionTimeoutMinutes = parseInt(process.env.SESSION_TIMEOUT_MINUTES || '10', 10); 
const sessionTimeoutMs = sessionTimeoutMinutes * 60 * 1000;
app.set("view engine",".hbs");
//middlewares
app.use(morgan("dev"));
app.use(session({
    secret: "cc2e9358fef6b828d-74d8731838b3a713e2-2956304de-8107-",
    resave: false,
    saveUninitialized: true,
    rolling: true, // 🔁 Renueva la expiración con cada petición
    cookie: {
        maxAge: sessionTimeoutMs
    }
}));

// Pasar al frontend desde locals o directamente en la ruta
app.locals.sessionTimeoutMs = sessionTimeoutMs;

app.use(express.urlencoded({extended:false}));
app.use(express.json());
app.use(bodyparser.json());
app.use(bodyparser.urlencoded({extended:false}));
app.use(flash());
app.use(passport.initialize());
app.use(passport.session());
app.set('trust proxy', true);

//Global Variables
app.use((req, res, next)=>{
   
    res.locals.success_msg = req.flash("success_msg");
    res.locals.error_msg = req.flash("error_msg");
    res.locals.message = req.flash("message");
    res.locals.alert_message = req.flash("alert_message");
    res.locals.session = req.session;
    if (req.session.user) {
        req.user = req.session.user; // Recuperar usuario de la sesión
    }
    res.locals.user = req.user || null;
    next();
});

//Routes,
app.use( require('./routes/test'));
app.use( require("./routes"));
app.use( require("./routes/authentication"));
app.use( require("./routes/authenticationAD"));
app.use( require('./routes/remesas'));
app.use( require('./routes/remesas-pago'));
app.use( require('./routes/remesas-envio'));
app.use( require('./routes/remesas-cancelacion'));
app.use( require('./routes/pld'));
app.use( require('./routes/pld-pm'));
app.use( require('./routes/riesgos'));
app.use( require('./routes/riesgos-pm'));
app.use( require('./routes/catalogos-empresas'));
app.use( require('./routes/ajax-petitions'));
app.use( require('./routes/catalogos-agentes'));
app.use( require('./routes/catalogos-sucursales'));
app.use( require('./routes/catalogos-empleados'));
app.use( require('./routes/catalogos-remesadores'));
app.use( require('./routes/operaciones-buzon'));
app.use( require('./routes/miscelaneos'));
app.use( require('./routes/reportes'));
app.use( require('./routes/operaciones'));
app.use( require('./routes/configuraciones-generales'));
app.use( require('./routes/dashboard'));
app.use( require('./routes/catalogos-persona-moral'));
app.use( require('./routes/operaciones-pm'));
app.use( require('./routes/document-manager'));
app.use( require('./routes/perfiles'));
app.use( require('./routes/persona-moral'));
app.use( require('./routes/logs'));

//Public
app.use(express.static(path.join(__dirname,"public")));

app.use(function(req, res){
    res.status(404).render("not-found.hbs", { title: "Página no encontrada" });
});
//Starting Server

app.listen(port, "0.0.0.0", function() {
console.log(`Listening on Port: ${port}`);
});



--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\index.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\keys.js ---

module.exports = {
    
   /* database:{
        connectionLimit: 10,
        host: "localhost",
        user: "root",
        password:"Tl1lp0t0nqu1",
        database: "remmitancesystem"
    }*/
    database:{
        connectionLimit : 100,
        host: "db-mysql-avgenvios-do-user-9263806-0.b.db.ondigitalocean.com",
        port : "25060", 
        user: "doadmin",
        password:"k2ixr2n9rl4p7zw8",
        database: "remmitancesystem"
    }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\src\keys.js ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\package-lock.json ---

{
  "name": "sistema-pagos-remesas",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "sistema-pagos-remesas",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@azure/msal-node": "^3.2.3",
        "@handlebars/allow-prototype-access": "^1.0.3",
        "axios": "^0.21.4",
        "bcryptjs": "^2.4.3",
        "body-parser": "^1.20.3",
        "connect-flash": "^0.1.1",
        "dotenv": "^16.4.7",
        "exceljs": "^4.4.0",
        "express": "^4.21.2",
        "express-handlebars": "^5.2.0",
        "express-mysql-session": "^2.1.4",
        "express-session": "^1.18.1",
        "express-validator": "^6.8.0",
        "git": "^0.1.5",
        "googleapis": "^104.0.0",
        "handlebars": "^4.7.6",
        "html-pdf": "^3.0.1",
        "jsonwebtoken": "^9.0.2",
        "linq": "^3.2.3",
        "luxon": "^3.6.1",
        "memorystore": "^1.6.6",
        "moment": "^2.29.1",
        "morgan": "^1.10.0",
        "multer": "^1.4.2",
        "mysql": "^2.18.1",
        "mysql2": "^2.2.5",
        "nodemailer": "^6.7.7",
        "nodemon": "^2.0.6",
        "numeros_a_letras": "^1.0.7",
        "passport": "^0.4.1",
        "passport-azure-ad": "^4.3.5",
        "passport-local": "^1.0.0",
        "read-excel-file": "^5.0.0",
        "rfc-facil": "^1.1.0",
        "soap": "^1.1.5",
        "tableexport": "^5.2.0",
        "timeago.js": "^4.0.2",
        "uuid": "^8.3.2",
        "xml-formatter": "^3.6.6",
        "xml2js": "^0.4.23"
      }
    },
    "node_modules/@azure/msal-common": {
      "version": "15.2.0",
      "resolved": "https://registry.npmjs.org/@azure/msal-common/-/msal-common-15.2.0.tgz",
      "integrity": "sha512-HiYfGAKthisUYqHG1nImCf/uzcyS31wng3o+CycWLIM9chnYJ9Lk6jZ30Y6YiYYpTQ9+z/FGUpiKKekd3Arc0A==",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/@azure/msal-node": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/@azure/msal-node/-/msal-node-3.2.3.tgz",
      "integrity": "sha512-0eaPqBIWEAizeYiXdeHb09Iq0tvHJ17ztvNEaLdr/KcJJhJxbpkkEQf09DB+vKlFE0tzYi7j4rYLTXtES/InEQ==",
      "dependencies": {
        "@azure/msal-common": "15.2.0",
        "jsonwebtoken": "^9.0.0",
        "uuid": "^8.3.0"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/@fast-csv/format": {
      "version": "4.3.5",
      "resolved": "https://registry.npmjs.org/@fast-csv/format/-/format-4.3.5.tgz",
      "integrity": "sha512-8iRn6QF3I8Ak78lNAa+Gdl5MJJBM5vRHivFtMRUWINdevNo00K7OXxS2PshawLKTejVwieIlPmK5YlLu6w4u8A==",
      "dependencies": {
        "@types/node": "^14.0.1",
        "lodash.escaperegexp": "^4.1.2",
        "lodash.isboolean": "^3.0.3",
        "lodash.isequal": "^4.5.0",
        "lodash.isfunction": "^3.0.9",
        "lodash.isnil": "^4.0.0"
      }
    },
    "node_modules/@fast-csv/parse": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/@fast-csv/parse/-/parse-4.3.6.tgz",
      "integrity": "sha512-uRsLYksqpbDmWaSmzvJcuApSEe38+6NQZBUsuAyMZKqHxH0g1wcJgsKUvN3WC8tewaqFjBMMGrkHmC+T7k8LvA==",
      "dependencies": {
        "@types/node": "^14.0.1",
        "lodash.escaperegexp": "^4.1.2",
        "lodash.groupby": "^4.6.0",
        "lodash.isfunction": "^3.0.9",
        "lodash.isnil": "^4.0.0",
        "lodash.isundefined": "^3.0.1",
        "lodash.uniq": "^4.5.0"
      }
    },
    "node_modules/@handlebars/allow-prototype-access": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@handlebars/allow-prototype-access/-/allow-prototype-access-1.0.3.tgz",
      "integrity": "sha512-UjIJnXYirTtSuRAC/3Sq+2XCRd3+JBW5+wQVu7cRCXisvEj/u/913QKH3D5+YVyJkz6cAyD70sQkaL5zvXql5Q==",
      "peerDependencies": {
        "handlebars": "^4.7.2"
      }
    },
    "node_modules/@sindresorhus/is": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
      "integrity": "sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@szmarczak/http-timer": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-1.1.2.tgz",
      "integrity": "sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==",
      "dependencies": {
        "defer-to-connect": "^1.0.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@types/node": {
      "version": "14.14.37",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-14.14.37.tgz",
      "integrity": "sha512-XYmBiy+ohOR4Lh5jE379fV2IU+6Jn4g5qASinhitfyO71b/sCo6MKsMLF5tc7Zf2CE8hViVQyYSobJNke8OvUw=="
    },
    "node_modules/@xmldom/is-dom-node": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@xmldom/is-dom-node/-/is-dom-node-1.0.1.tgz",
      "integrity": "sha512-CJDxIgE5I0FH+ttq/Fxy6nRpxP70+e2O048EPe85J2use3XKdatVM7dDVvFNjQudd9B49NPoZ+8PG49zj4Er8Q==",
      "engines": {
        "node": ">= 16"
      }
    },
    "node_modules/@xmldom/xmldom": {
      "version": "0.8.10",
      "resolved": "https://registry.npmjs.org/@xmldom/xmldom/-/xmldom-0.8.10.tgz",
      "integrity": "sha512-2WALfTl4xo2SkGCYRt6rDTFfk9R1czmBvUQy12gK2KuRKIpWEhcbbzy8EZXtz/jkRqHX8bFEc6FC1HjX4TUWYw==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/adler-32": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/adler-32/-/adler-32-1.2.0.tgz",
      "integrity": "sha1-aj5r8KY5ALoVZSgIyxXGgT0aXyU=",
      "dependencies": {
        "exit-on-epipe": "~1.0.1",
        "printj": "~1.1.0"
      },
      "bin": {
        "adler32": "bin/adler32.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agent-base/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/agent-base/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-align": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/ansi-align/-/ansi-align-3.0.0.tgz",
      "integrity": "sha512-ZpClVKqXN3RGBmKibdfWzqCY4lnjEuoNzU5T0oEFpfd/z5qJHVarukridD4juLO2FXMiwUQxr9WqQtaYa8XRYw==",
      "dependencies": {
        "string-width": "^3.0.0"
      }
    },
    "node_modules/ansi-align/node_modules/string-width": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
      "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
      "dependencies": {
        "emoji-regex": "^7.0.1",
        "is-fullwidth-code-point": "^2.0.0",
        "strip-ansi": "^5.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/ansi-regex": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.0.tgz",
      "integrity": "sha512-1apePfXM1UOSqw0o9IiFAovVz9M5S1Dg+4TrDwfMewQ6p/rmMueb7tWZjQ1rx4Loy1ArBggoqGpfqqdI4rondg==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.1.tgz",
      "integrity": "sha512-mM8522psRCqzV+6LhomX5wgp25YVibjh8Wj23I5RPkPppSVSjyKD2A2mBJmWGa+KN7f2D6LNh9jkBCeyLktzjg==",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha1-HjRA6RXwsSA9I3SOeO3XubW0PlY="
    },
    "node_modules/archiver": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/archiver/-/archiver-5.3.0.tgz",
      "integrity": "sha512-iUw+oDwK0fgNpvveEsdQ0Ase6IIKztBJU2U0E9MzszMfmVVUyv1QJhS2ITW9ZCqx8dktAxVAjWWkKehuZE8OPg==",
      "dependencies": {
        "archiver-utils": "^2.1.0",
        "async": "^3.2.0",
        "buffer-crc32": "^0.2.1",
        "readable-stream": "^3.6.0",
        "readdir-glob": "^1.0.0",
        "tar-stream": "^2.2.0",
        "zip-stream": "^4.1.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/archiver-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/archiver-utils/-/archiver-utils-2.1.0.tgz",
      "integrity": "sha512-bEL/yUb/fNNiNTuUz979Z0Yg5L+LzLxGJz8x79lYmR54fmTIb6ob/hNQgkQnIUDWIFjZVQwl9Xs356I6BAMHfw==",
      "dependencies": {
        "glob": "^7.1.4",
        "graceful-fs": "^4.2.0",
        "lazystream": "^1.0.0",
        "lodash.defaults": "^4.2.0",
        "lodash.difference": "^4.5.0",
        "lodash.flatten": "^4.4.0",
        "lodash.isplainobject": "^4.0.6",
        "lodash.union": "^4.6.0",
        "normalize-path": "^3.0.0",
        "readable-stream": "^2.0.0"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/archiver/node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
    },
    "node_modules/arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA=="
    },
    "node_modules/asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "optional": true,
      "dependencies": {
        "safer-buffer": "~2.1.0"
      }
    },
    "node_modules/assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
      "optional": true,
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA=="
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k="
    },
    "node_modules/aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=",
      "optional": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/aws4": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.11.0.tgz",
      "integrity": "sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA==",
      "optional": true
    },
    "node_modules/axios": {
      "version": "0.21.4",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.21.4.tgz",
      "integrity": "sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==",
      "dependencies": {
        "follow-redirects": "^1.14.0"
      }
    },
    "node_modules/axios-ntlm": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/axios-ntlm/-/axios-ntlm-1.4.2.tgz",
      "integrity": "sha512-8mS/uhmSWiRBiFKQvysPbX1eDBp6e+eXskmasuAXRHrn1Zjgji3O/oGXzXLw7tOhyD9nho1vGjZ2OYOD3cCvHg==",
      "dependencies": {
        "axios": "^1.6.1",
        "des.js": "^1.1.0",
        "dev-null": "^0.1.1",
        "js-md4": "^0.3.2"
      }
    },
    "node_modules/axios-ntlm/node_modules/axios": {
      "version": "1.7.7",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.7.tgz",
      "integrity": "sha512-S4kL7XrjgBmvdGut0sN3yJxqYzrDOnivkBiN0OFs6hLiUam3UPvswUo0kqGyhqUZGEOytHyumEdXsAkgCOUf3Q==",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/axios-ntlm/node_modules/form-data": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.1.tgz",
      "integrity": "sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz",
      "integrity": "sha1-ibTRmasr7kneFk6gK4nORi1xt2c="
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/base64url": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/base64url/-/base64url-3.0.1.tgz",
      "integrity": "sha512-ir1UPr3dkwexU7FdV8qBBbNDRUhMmIekYMFZfi+C/sLNnRESKPl23nB9b2pltqfOQNnGzsDdId90AEtG5tCx4A==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/basic-auth": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
      "dependencies": {
        "safe-buffer": "5.1.2"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
      "optional": true,
      "dependencies": {
        "tweetnacl": "^0.14.3"
      }
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "node_modules/big-integer": {
      "version": "1.6.48",
      "resolved": "https://registry.npmjs.org/big-integer/-/big-integer-1.6.48.tgz",
      "integrity": "sha512-j51egjPa7/i+RdiRuJbPdJ2FIUYYPhvYLjzoYbcMMm62ooO6F94fETG4MTs46zPAF9Brs04OajboA/qTGuz78w==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/bignumber.js": {
      "version": "9.0.0",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.0.0.tgz",
      "integrity": "sha512-t/OYhhJ2SD+YGBQcjY8GzzDHEk9f3nerxjtfa6tlMXfe7frs/WozhvCNoGvpM0P3bNf3Gq5ZRMlGr5f3r4/N8A==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/binary/-/binary-0.3.0.tgz",
      "integrity": "sha1-n2BVO8XOjDOG87VTz/R0Yq3sqnk=",
      "dependencies": {
        "buffers": "~0.1.1",
        "chainsaw": "~0.1.0"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.1.0.tgz",
      "integrity": "sha512-1Yj8h9Q+QDF5FzhMs/c9+6UntbD5MkRfRwac8DoEm9ZfUBZ7tZ55YcGVAzEe4bXsdQHEk+s9S5wsOKVdZrw0tQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "dependencies": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      }
    },
    "node_modules/bl/node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/blobjs": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/blobjs/-/blobjs-1.1.1.tgz",
      "integrity": "sha1-VEr224h7HGL0XqjgfOtFwTtZlao="
    },
    "node_modules/bluebird": {
      "version": "3.4.7",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.4.7.tgz",
      "integrity": "sha1-9y12C+Cbf3bQjtj66Ysomo0F+rM="
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/bootstrap": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/bootstrap/-/bootstrap-3.4.1.tgz",
      "integrity": "sha512-yN5oZVmRCwe5aKwzRj6736nSmKDX7pLYwsXiCj/EYmo16hODaBiT4En5btW/jhBF/seV+XMx3aYwukYC3A49DA==",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/boxen": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/boxen/-/boxen-4.2.0.tgz",
      "integrity": "sha512-eB4uT9RGzg2odpER62bBwSLvUeGC+WbRjjyyFhGsKnc8wp/m0+hQsMUvUe3H2V0D5vw0nBdO1hCJoZo5mKeuIQ==",
      "dependencies": {
        "ansi-align": "^3.0.0",
        "camelcase": "^5.3.1",
        "chalk": "^3.0.0",
        "cli-boxes": "^2.2.0",
        "string-width": "^4.1.0",
        "term-size": "^2.1.0",
        "type-fest": "^0.8.1",
        "widest-line": "^3.1.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-crc32": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
      "integrity": "sha1-DTM+PwDqxQqhRUq9MO+MKl2ackI=",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "node_modules/buffer-from": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.1.tgz",
      "integrity": "sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A=="
    },
    "node_modules/buffer-indexof-polyfill": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/buffer-indexof-polyfill/-/buffer-indexof-polyfill-1.0.2.tgz",
      "integrity": "sha512-I7wzHwA3t1/lwXQh+A5PbNvJxgfo5r3xulgpYDB5zckTu/Z9oUK9biouBKQUjEqzaz3HnAT6TYoovmE+GqSf7A==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/buffers": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/buffers/-/buffers-0.1.1.tgz",
      "integrity": "sha1-skV5w77U1tOWru5tmorn9Ugqt7s=",
      "engines": {
        "node": ">=0.2.0"
      }
    },
    "node_modules/bunyan": {
      "version": "1.8.15",
      "resolved": "https://registry.npmjs.org/bunyan/-/bunyan-1.8.15.tgz",
      "integrity": "sha512-0tECWShh6wUysgucJcBAoYegf3JJoZWibxdqhTm7OHPeT42qdjkZ29QCMcKwbgU1kiH+auSIasNRXMLWXafXig==",
      "engines": [
        "node >=0.10.0"
      ],
      "bin": {
        "bunyan": "bin/bunyan"
      },
      "optionalDependencies": {
        "dtrace-provider": "~0.8",
        "moment": "^2.19.3",
        "mv": "~2",
        "safe-json-stringify": "~1"
      }
    },
    "node_modules/busboy": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-0.2.14.tgz",
      "integrity": "sha1-bCpiLvz0fFe7vh4qnDetNseSVFM=",
      "dependencies": {
        "dicer": "0.2.5",
        "readable-stream": "1.1.x"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/busboy/node_modules/isarray": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
      "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
    },
    "node_modules/busboy/node_modules/readable-stream": {
      "version": "1.1.14",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz",
      "integrity": "sha1-fPTFTvZI44EwhMY23SB54WbAgdk=",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.1",
        "isarray": "0.0.1",
        "string_decoder": "~0.10.x"
      }
    },
    "node_modules/busboy/node_modules/string_decoder": {
      "version": "0.10.31",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
      "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/cache-manager": {
      "version": "3.6.3",
      "resolved": "https://registry.npmjs.org/cache-manager/-/cache-manager-3.6.3.tgz",
      "integrity": "sha512-dS4DnV6c6cQcVH5OxzIU1XZaACXwvVIiUPkFytnRmLOACuBGv3GQgRQ1RJGRRw4/9DF14ZK2RFlZu1TUgDniMg==",
      "dependencies": {
        "async": "3.2.3",
        "lodash.clonedeep": "^4.5.0",
        "lru-cache": "6.0.0"
      }
    },
    "node_modules/cache-manager/node_modules/async": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.3.tgz",
      "integrity": "sha512-spZRyzKL5l5BZQrr/6m/SqFdBN0q3OCI0f9rjfBzCMBIP4p75P620rR3gTmaksNOhmzgdxcaxdNfMy6anrbM0g=="
    },
    "node_modules/cacheable-request": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-6.1.0.tgz",
      "integrity": "sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==",
      "dependencies": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^3.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^4.1.0",
        "responselike": "^1.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cacheable-request/node_modules/get-stream": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cacheable-request/node_modules/lowercase-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=",
      "optional": true
    },
    "node_modules/cfb": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/cfb/-/cfb-1.2.0.tgz",
      "integrity": "sha512-sXMvHsKCICVR3Naq+J556K+ExBo9n50iKl6LGarlnvuA2035uMlGA/qVrc0wQtow5P1vJEw9UyrKLCbtIKz+TQ==",
      "dependencies": {
        "adler-32": "~1.2.0",
        "crc-32": "~1.2.0",
        "printj": "~1.1.2"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/chainsaw": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/chainsaw/-/chainsaw-0.1.0.tgz",
      "integrity": "sha1-XqtQsor+WAdNDVgpE4iCi15fvJg=",
      "dependencies": {
        "traverse": ">=0.3.0 <0.4"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/chalk": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-3.0.0.tgz",
      "integrity": "sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chalk/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chalk/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chokidar": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.4.3.tgz",
      "integrity": "sha512-DtM3g7juCXQxFVSNPNByEC2+NImtBuxQQvWlHunpJIS5Ocr0lG306cC7FCi7cEA0fzmybPUIl4txBIobk1gGOQ==",
      "dependencies": {
        "anymatch": "~3.1.1",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.0",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.5.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.1.2"
      }
    },
    "node_modules/ci-info": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-2.0.0.tgz",
      "integrity": "sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ=="
    },
    "node_modules/cli-boxes": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-2.2.1.tgz",
      "integrity": "sha512-y4coMcylgSCdVinjiDBuR8PCC2bLjyGTwEmPb9NHR/QaNU6EUOXcTY/s6VjGMD6ENSEaeQYHCY0GNGS5jfMwPw==",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/clone-response": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.2.tgz",
      "integrity": "sha1-0dyXOSAxTfZ/vrlCI7TuNQI56Ws=",
      "dependencies": {
        "mimic-response": "^1.0.0"
      }
    },
    "node_modules/codepage": {
      "version": "1.14.0",
      "resolved": "https://registry.npmjs.org/codepage/-/codepage-1.14.0.tgz",
      "integrity": "sha1-jL4lSBMjVZ19MHVxsP/5HnodL5k=",
      "dependencies": {
        "commander": "~2.14.1",
        "exit-on-epipe": "~1.0.1"
      },
      "bin": {
        "codepage": "bin/codepage.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/codepage/node_modules/commander": {
      "version": "2.14.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.14.1.tgz",
      "integrity": "sha512-+YR16o3rK53SmWHU3rEM3tPAh2rwb1yPcQX5irVn7mb0gXbwuCCrnkbV5+PBfETdfg1vui07nM6PCG1zndcjQw=="
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "2.17.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.17.1.tgz",
      "integrity": "sha512-wPMUt6FnH2yzG95SA6mzjQOEKUU3aLaDEmzs1ti+1E9h+CsrZghRlqEM/EJ4KscsQVG8uNN4uVreUeT8+drlgg=="
    },
    "node_modules/compress-commons": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/compress-commons/-/compress-commons-4.1.0.tgz",
      "integrity": "sha512-ofaaLqfraD1YRTkrRKPCrGJ1pFeDG/MVCkVVV2FNGeWquSlqw5wOrwOfPQ1xF2u+blpeWASie5EubHz+vsNIgA==",
      "dependencies": {
        "buffer-crc32": "^0.2.13",
        "crc32-stream": "^4.0.1",
        "normalize-path": "^3.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/compress-commons/node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
    },
    "node_modules/concat-stream": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
      "engines": [
        "node >= 0.8"
      ],
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^2.2.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/configstore": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/configstore/-/configstore-5.0.1.tgz",
      "integrity": "sha512-aMKprgk5YhBNyH25hj8wGt2+D52Sw1DRRIzqBwLp2Ya9mFmY8KPvvtvmna8SxVR9JMZ4kzMD68N22vlaRpkeFA==",
      "dependencies": {
        "dot-prop": "^5.2.0",
        "graceful-fs": "^4.1.2",
        "make-dir": "^3.0.0",
        "unique-string": "^2.0.0",
        "write-file-atomic": "^3.0.0",
        "xdg-basedir": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/connect-flash": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/connect-flash/-/connect-flash-0.1.1.tgz",
      "integrity": "sha1-2GMPJtlaf4UfmVax6MxnMvO2qjA=",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-disposition/node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.0.tgz",
      "integrity": "sha512-+Hp8fLp57wnUSt0tY0tHEXh4voZRDnoIrZPqlo3DPiI4y9lwg/jqx+1Om94/W6ZaPDOUbnjOt/99w66zk+l1Xg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw="
    },
    "node_modules/core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
    },
    "node_modules/crc-32": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.0.tgz",
      "integrity": "sha512-1uBwHxF+Y/4yF5G48fwnKq6QsIXheor3ZLPT80yGBV1oEUwpPojlEhQbWKVw1VwcTQyMGHK1/XMmTjmlsmTTGA==",
      "dependencies": {
        "exit-on-epipe": "~1.0.1",
        "printj": "~1.1.0"
      },
      "bin": {
        "crc32": "bin/crc32.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/crc32-stream": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/crc32-stream/-/crc32-stream-4.0.2.tgz",
      "integrity": "sha512-DxFZ/Hk473b/muq1VJ///PMNLj0ZMnzye9thBpmjpJKCc5eMgB95aK8zCGrGfQ90cWo561Te6HK9D+j4KPdM6w==",
      "dependencies": {
        "crc-32": "^1.2.0",
        "readable-stream": "^3.4.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/crc32-stream/node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
      "optional": true,
      "dependencies": {
        "assert-plus": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/dayjs": {
      "version": "1.10.4",
      "resolved": "https://registry.npmjs.org/dayjs/-/dayjs-1.10.4.tgz",
      "integrity": "sha512-RI/Hh4kqRc1UKLOAf/T5zdMMX5DQIlDxwUe3wSyMMnEbGunnpENCdbUgM+dW7kXidZqCttBrmw7BhN4TMddkCw=="
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/decompress-response": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-3.3.0.tgz",
      "integrity": "sha1-gKTdMjdIOEv6JICDYirt7Jgq3/M=",
      "dependencies": {
        "mimic-response": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/defer-to-connect": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-1.1.3.tgz",
      "integrity": "sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ=="
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk=",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/denque": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-1.5.0.tgz",
      "integrity": "sha512-CYiCSgIF1p6EUByQPlGkKnP1M9g0ZV3qMIrqMqZqdwazygIA/YP2vrbcyl1h/WppKJTdl1F85cXIle+394iDAQ==",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/des.js": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/des.js/-/des.js-1.1.0.tgz",
      "integrity": "sha512-r17GxjhUCjSRy8aiJpr8/UadFIzMzJGexI3Nmz4ADi9LYSFx4gTBp80+NaX/YsXWWLhpZ7v/v/ubEc/bCNfKwg==",
      "dependencies": {
        "inherits": "^2.0.1",
        "minimalistic-assert": "^1.0.0"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/dev-null": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/dev-null/-/dev-null-0.1.1.tgz",
      "integrity": "sha512-nMNZG0zfMgmdv8S5O0TM5cpwNbGKRGPCxVsr0SmA3NZZy9CYBbuNLL0PD3Acx9e5LIUgwONXtM9kM6RlawPxEQ=="
    },
    "node_modules/dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dependencies": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "node_modules/dicer": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/dicer/-/dicer-0.2.5.tgz",
      "integrity": "sha1-WZbAhrszIYyBLAkL3cCc0S+stw8=",
      "dependencies": {
        "readable-stream": "1.1.x",
        "streamsearch": "0.1.2"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/dicer/node_modules/isarray": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
      "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
    },
    "node_modules/dicer/node_modules/readable-stream": {
      "version": "1.1.14",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz",
      "integrity": "sha1-fPTFTvZI44EwhMY23SB54WbAgdk=",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.1",
        "isarray": "0.0.1",
        "string_decoder": "~0.10.x"
      }
    },
    "node_modules/dicer/node_modules/string_decoder": {
      "version": "0.10.31",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
      "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
    },
    "node_modules/dot-prop": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-5.3.0.tgz",
      "integrity": "sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==",
      "dependencies": {
        "is-obj": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dotenv": {
      "version": "16.4.7",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dtrace-provider": {
      "version": "0.8.8",
      "resolved": "https://registry.npmjs.org/dtrace-provider/-/dtrace-provider-0.8.8.tgz",
      "integrity": "sha512-b7Z7cNtHPhH9EJhNNbbeqTcXB8LGFFZhq1PGgEvpeHlzd36bhbdTWoE/Ba/YguqpBSlAPKnARWhVlhunCMwfxg==",
      "hasInstallScript": true,
      "optional": true,
      "dependencies": {
        "nan": "^2.14.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/duplexer2": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer2/-/duplexer2-0.1.4.tgz",
      "integrity": "sha1-ixLauHjA1p4+eJEFFmKjL8a93ME=",
      "dependencies": {
        "readable-stream": "^2.0.2"
      }
    },
    "node_modules/duplexer3": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.4.tgz",
      "integrity": "sha1-7gHdHKwO08vH/b6jfcCo8c4ALOI="
    },
    "node_modules/ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
      "optional": true,
      "dependencies": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
    },
    "node_modules/emoji-regex": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-7.0.3.tgz",
      "integrity": "sha512-CwBLREIQ7LvYFB0WyRvwhq5N5qPhc6PMjD6bYggFlI5YyDgl+0vxq5VHbMOFqLg7hfWzmu8T5Z1QofhmTIhItA=="
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es6-promise": {
      "version": "4.2.8",
      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
      "integrity": "sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w=="
    },
    "node_modules/escape-goat": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/escape-goat/-/escape-goat-2.1.1.tgz",
      "integrity": "sha512-8/uIhbG12Csjy2JEW7D9pHbreaVaS/OpN3ycnyvElTdwM5n6GY6W6e2IPemfvGZeUMqZ9A/3GqIZMgKnBhAw/Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/exceljs": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/exceljs/-/exceljs-4.4.0.tgz",
      "integrity": "sha512-XctvKaEMaj1Ii9oDOqbW/6e1gXknSY4g/aLCDicOXqBE4M0nRWkUu0PTp++UPNzoFY12BNHMfs/VadKIS6llvg==",
      "dependencies": {
        "archiver": "^5.0.0",
        "dayjs": "^1.8.34",
        "fast-csv": "^4.3.1",
        "jszip": "^3.10.1",
        "readable-stream": "^3.6.0",
        "saxes": "^5.0.1",
        "tmp": "^0.2.0",
        "unzipper": "^0.10.11",
        "uuid": "^8.3.0"
      },
      "engines": {
        "node": ">=8.3.0"
      }
    },
    "node_modules/exceljs/node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/exceljs/node_modules/unzipper": {
      "version": "0.10.11",
      "resolved": "https://registry.npmjs.org/unzipper/-/unzipper-0.10.11.tgz",
      "integrity": "sha512-+BrAq2oFqWod5IESRjL3S8baohbevGcVA+teAIOYWM3pDVdseogqbzhhvvmiyQrUNKFUnDMtELW3X8ykbyDCJw==",
      "dependencies": {
        "big-integer": "^1.6.17",
        "binary": "~0.3.0",
        "bluebird": "~3.4.1",
        "buffer-indexof-polyfill": "~1.0.0",
        "duplexer2": "~0.1.4",
        "fstream": "^1.0.12",
        "graceful-fs": "^4.2.2",
        "listenercount": "~1.0.1",
        "readable-stream": "~2.3.6",
        "setimmediate": "~1.0.4"
      }
    },
    "node_modules/exceljs/node_modules/unzipper/node_modules/readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/exit-on-epipe": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/exit-on-epipe/-/exit-on-epipe-1.0.1.tgz",
      "integrity": "sha512-h2z5mrROTxce56S+pnvAV890uu7ls7f1kEvVGJbw1OlFH3/mlJ5bkXu0KRyW94v37zzHPiUd55iLn3DA7TjWpw==",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-handlebars": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/express-handlebars/-/express-handlebars-5.2.0.tgz",
      "integrity": "sha512-kkty9fsldSuqDI/5ohU+EWNOWaPhJOPmVUZewMH+7522atj8QF8WbXzjZKBRloafxRcsPDG68jmfW7MGCYT/1g==",
      "dependencies": {
        "glob": "^7.1.6",
        "graceful-fs": "^4.2.4",
        "handlebars": "^4.7.6"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/express-mysql-session": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/express-mysql-session/-/express-mysql-session-2.1.4.tgz",
      "integrity": "sha512-Fcq168xVI8jtIJLhVHLJvBCvJlHnFWCcPmtt93UrWH38T2YsB919KrMCCh57/YkECkfff/L5zTQ95K1DxfOixg==",
      "dependencies": {
        "debug": "4.1.1",
        "express-session": "1.17.0",
        "mysql": "2.18.1",
        "underscore": "1.9.2"
      },
      "funding": {
        "type": "individual",
        "url": "https://degreesofzero.com/donate.html"
      }
    },
    "node_modules/express-mysql-session/node_modules/debug": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
      "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
      "deprecated": "Debug versions >=3.2.0 <3.2.7 || >=4 <4.3.1 have a low-severity ReDos regression when used in a Node.js environment. It is recommended you upgrade to 3.2.7 or 4.3.1. (https://github.com/visionmedia/debug/issues/797)",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/express-mysql-session/node_modules/express-session": {
      "version": "1.17.0",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.0.tgz",
      "integrity": "sha512-t4oX2z7uoSqATbMfsxWMbNjAL0T5zpvcJCk3Z9wnPPN7ibddhnmDZXHfEcoBMG2ojKXZoCyPMc5FbtK+G7SoDg==",
      "dependencies": {
        "cookie": "0.4.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.0",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-mysql-session/node_modules/express-session/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express-mysql-session/node_modules/express-session/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "node_modules/express-mysql-session/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/express-mysql-session/node_modules/safe-buffer": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.0.tgz",
      "integrity": "sha512-fZEwUGbVl7kouZs1jCdMLdt95hdIv0ZeHg6L7qPeciMZhZ+/gdesW4wgTARkrFWEpspjEATAzUGPG8N2jJiwbg=="
    },
    "node_modules/express-session": {
      "version": "1.18.1",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.18.1.tgz",
      "integrity": "sha512-a5mtTqEaZvBCL9A9aqkrtfz+3SMDhOVUnjafjo+s7A9Txkq+SVX2DLvSp1Zrv4uCXa3lMSK3viWnh9Gg07PBUA==",
      "dependencies": {
        "cookie": "0.7.2",
        "cookie-signature": "1.0.7",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/express-session/node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express-session/node_modules/cookie-signature": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.7.tgz",
      "integrity": "sha512-NXdYc3dLr47pBkpUCHtKSwIOQXLVn8dZEuywboCOJY/osA0wFSLlSawr3KN8qXJEyX66FcONTH8EIlVuK0yyFA=="
    },
    "node_modules/express-session/node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/express-validator": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-6.8.0.tgz",
      "integrity": "sha512-zEHxjly2Rx0vzJOgWJBCTk1vNNwxqp0a8S8WtKaW912oTmnQGSdh/XuuNzkt+tRBgw66z9u+ah+Sv8SH5SJyUQ==",
      "dependencies": {
        "lodash": "^4.17.20",
        "validator": "^13.5.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/express/node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express/node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/express/node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
    },
    "node_modules/extract-zip": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-1.7.0.tgz",
      "integrity": "sha512-xoh5G1W/PB0/27lXgMQyIhP5DSY/LhoCsOyZgb+6iMmRtCwVBo55uKaMoEYrDCKQhWvqEip5ZPKAc6eFNyf/MA==",
      "optional": true,
      "dependencies": {
        "concat-stream": "^1.6.2",
        "debug": "^2.6.9",
        "mkdirp": "^0.5.4",
        "yauzl": "^2.10.0"
      },
      "bin": {
        "extract-zip": "cli.js"
      }
    },
    "node_modules/extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=",
      "engines": [
        "node >=0.6.0"
      ],
      "optional": true
    },
    "node_modules/fast-csv": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/fast-csv/-/fast-csv-4.3.6.tgz",
      "integrity": "sha512-2RNSpuwwsJGP0frGsOmTb9oUF+VkFSM4SyLTDgwf2ciHWTarN0lQTC+F2f/t5J9QjW+c65VFIAAu85GsvMIusw==",
      "dependencies": {
        "@fast-csv/format": "4.3.5",
        "@fast-csv/parse": "4.3.6"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "optional": true
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "optional": true
    },
    "node_modules/fast-text-encoding": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/fast-text-encoding/-/fast-text-encoding-1.0.4.tgz",
      "integrity": "sha512-x6lDDm/tBAzX9kmsPcZsNbvDs3Zey3+scsxaZElS8xWLgUMAg/oFLeewfUz0mu1CblHhhsu15jGkraldkFh8KQ=="
    },
    "node_modules/fd-slicer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
      "integrity": "sha1-JcfInLH5B3+IkbvmHY85Dq4lbx4=",
      "optional": true,
      "dependencies": {
        "pend": "~1.2.0"
      }
    },
    "node_modules/file-saverjs": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/file-saverjs/-/file-saverjs-1.3.6.tgz",
      "integrity": "sha1-t6RU4Sb1bPcfy3AVm4NWFCZU544="
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=",
      "optional": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "optional": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/formidable": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-3.5.2.tgz",
      "integrity": "sha512-Jqc1btCy3QzRbJaICGwKcBfGWuLADRerLzDqi2NwSt/UkXLsHJw2TVResiaoBufHVHy9aSgClOHCeJsSsFLTbg==",
      "dependencies": {
        "dezalgo": "^1.0.4",
        "hexoid": "^2.0.0",
        "once": "^1.4.0"
      },
      "funding": {
        "url": "https://ko-fi.com/tunnckoCore/commissions"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/frac": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/frac/-/frac-1.1.2.tgz",
      "integrity": "sha512-w/XBfkibaTl3YDqASwfDUqkna4Z2p9cFSr1aHDt0WoMTECnRfBOv2WArlZILlqgWlmdIlALXGpM2AOhEk5W3IA==",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-constants": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz",
      "integrity": "sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow=="
    },
    "node_modules/fs-extra": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz",
      "integrity": "sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA=",
      "optional": true,
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "jsonfile": "^2.1.0",
        "klaw": "^1.0.0"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
    },
    "node_modules/fsevents": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.1.3.tgz",
      "integrity": "sha512-Auw9a4AxqWpa9GUfj370BMPzzyncfBABW8Mab7BGWBYDj4Isgq+cDKtx0i6u9jcX9pQDnswsaaOTgTmA5pEjuQ==",
      "deprecated": "\"Please update to latest v2.3 or v2.2\"",
      "hasInstallScript": true,
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/fstream": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/fstream/-/fstream-1.0.12.tgz",
      "integrity": "sha512-WvJ193OHa0GHPEL+AycEJgxvBEwyfRkN1vhjca23OaPVMCaLCXTd5qAu82AjTcgP1UJmytkOKb63Ypde7raDIg==",
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "inherits": "~2.0.0",
        "mkdirp": ">=0.5 0",
        "rimraf": "2"
      },
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gaxios": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-5.0.0.tgz",
      "integrity": "sha512-VD/yc5ln6XU8Ch1hyYY6kRMBE0Yc2np3fPyeJeYHhrPs1i8rgnsApPMWyrugkl7LLoSqpOJVBWlQIa87OAvt8Q==",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "extend": "^3.0.2",
        "https-proxy-agent": "^5.0.0",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.7"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/gaxios/node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gcp-metadata": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-5.0.0.tgz",
      "integrity": "sha512-gfwuX3yA3nNsHSWUL4KG90UulNiq922Ukj3wLTrcnX33BB7PwB1o0ubR8KVvXu9nJH+P5w1j2SQSNNqto+H0DA==",
      "dependencies": {
        "gaxios": "^5.0.0",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/generate-function": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
      "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",
      "dependencies": {
        "is-property": "^1.0.2"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-stream": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
      "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
      "optional": true,
      "dependencies": {
        "assert-plus": "^1.0.0"
      }
    },
    "node_modules/git": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/git/-/git-0.1.5.tgz",
      "integrity": "sha1-nvYt+T+FHCdUIUO/UtHGixAXyhU=",
      "dependencies": {
        "mime": "1.2.9"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/git/node_modules/mime": {
      "version": "1.2.9",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.2.9.tgz",
      "integrity": "sha1-AJzUCGe9Nd5SGzuWbwTi+NTRPQk="
    },
    "node_modules/glob": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.6.tgz",
      "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.1.tgz",
      "integrity": "sha512-FnI+VGOpnlGHWZxthPGR+QhR78fuiK0sNLkHQv+bL9fQi57lNNdquIbna/WrfROrolq8GK5Ek6BiMwqL/voRYQ==",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/global-dirs": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/global-dirs/-/global-dirs-2.0.1.tgz",
      "integrity": "sha512-5HqUqdhkEovj2Of/ms3IeS/EekcO54ytHRLV4PEY2rhRwrHXLQjeVEES0Lhka0xwNDtGYn58wyC4s5+MHsOO6A==",
      "dependencies": {
        "ini": "^1.3.5"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/google-auth-library": {
      "version": "8.0.3",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-8.0.3.tgz",
      "integrity": "sha512-1eC6yaCrPfkv3bwtb3e0AOct7E7xR/uikDyXNo/j8Wd6a1ldRgAey5FmaDGNJnHNDPLtDiENQLYsA69eXOF5sA==",
      "dependencies": {
        "arrify": "^2.0.0",
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "fast-text-encoding": "^1.0.0",
        "gaxios": "^5.0.0",
        "gcp-metadata": "^5.0.0",
        "gtoken": "^6.0.0",
        "jws": "^4.0.0",
        "lru-cache": "^6.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/google-p12-pem": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/google-p12-pem/-/google-p12-pem-4.0.0.tgz",
      "integrity": "sha512-lRTMn5ElBdDixv4a86bixejPSRk1boRtUowNepeKEVvYiFlkLuAJUVpEz6PfObDHYEKnZWq/9a2zC98xu62A9w==",
      "dependencies": {
        "node-forge": "^1.3.1"
      },
      "bin": {
        "gp12-pem": "build/src/bin/gp12-pem.js"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/googleapis": {
      "version": "104.0.0",
      "resolved": "https://registry.npmjs.org/googleapis/-/googleapis-104.0.0.tgz",
      "integrity": "sha512-5UItkob9BgC2S1Ekm16ZMiCxaD0bU0n3EauiNAMB7KejmlACDIfNnHiC0GUYUL9/fU2jrJx1ngY89oQP9ZAPeA==",
      "dependencies": {
        "google-auth-library": "^8.0.2",
        "googleapis-common": "^6.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/googleapis-common": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/googleapis-common/-/googleapis-common-6.0.0.tgz",
      "integrity": "sha512-ieZouiuoyTHCckOgu7NU+n5UvA8kAzGTRRMQD+3bobCX9npnRvYDmTHZjM5lQLzf0cGz1xQ1ABCxGQ+xSsMkCw==",
      "dependencies": {
        "extend": "^3.0.2",
        "gaxios": "^4.0.0",
        "google-auth-library": "^8.0.2",
        "qs": "^6.7.0",
        "url-template": "^2.0.8",
        "uuid": "^8.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/googleapis-common/node_modules/gaxios": {
      "version": "4.3.3",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-4.3.3.tgz",
      "integrity": "sha512-gSaYYIO1Y3wUtdfHmjDUZ8LWaxJQpiavzbF5Kq53akSzvmVg0RfyOcFDbO1KJ/KCGRFz2qG+lS81F0nkr7cRJA==",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "extend": "^3.0.2",
        "https-proxy-agent": "^5.0.0",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.7"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/googleapis-common/node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/got": {
      "version": "9.6.0",
      "resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
      "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
      "dependencies": {
        "@sindresorhus/is": "^0.14.0",
        "@szmarczak/http-timer": "^1.1.2",
        "cacheable-request": "^6.0.0",
        "decompress-response": "^3.3.0",
        "duplexer3": "^0.1.4",
        "get-stream": "^4.1.0",
        "lowercase-keys": "^1.0.1",
        "mimic-response": "^1.0.1",
        "p-cancelable": "^1.0.0",
        "to-readable-stream": "^1.0.0",
        "url-parse-lax": "^3.0.0"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.4.tgz",
      "integrity": "sha512-WjKPNJF79dtJAVniUlGGWHYGz2jWxT6VhN/4m1NdkbZ2nOsEF+cI1Edgql5zCRhs/VsQYRvrXctxktVXZUkixw=="
    },
    "node_modules/gtoken": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-6.0.1.tgz",
      "integrity": "sha512-J0vebk6u6i4rLTM0lQq25SdusCLMvujYNZeAouyPvSbGlcjw7P8L3W9INIFnlXUx+AUD7TDoM1mgdhzH+XX7DQ==",
      "dependencies": {
        "gaxios": "^4.0.0",
        "google-p12-pem": "^4.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/gtoken/node_modules/gaxios": {
      "version": "4.3.3",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-4.3.3.tgz",
      "integrity": "sha512-gSaYYIO1Y3wUtdfHmjDUZ8LWaxJQpiavzbF5Kq53akSzvmVg0RfyOcFDbO1KJ/KCGRFz2qG+lS81F0nkr7cRJA==",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "extend": "^3.0.2",
        "https-proxy-agent": "^5.0.0",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.7"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/gtoken/node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/handlebars": {
      "version": "4.7.6",
      "resolved": "https://registry.npmjs.org/handlebars/-/handlebars-4.7.6.tgz",
      "integrity": "sha512-1f2BACcBfiwAfStCKZNrUCgqNZkGsAT7UM3kkYtXuLo0KnaVfjKOyf7PRzB6++aK9STyT1Pd2ZCPe3EGOXleXA==",
      "dependencies": {
        "minimist": "^1.2.5",
        "neo-async": "^2.6.0",
        "source-map": "^0.6.1",
        "wordwrap": "^1.0.0"
      },
      "bin": {
        "handlebars": "bin/handlebars"
      },
      "engines": {
        "node": ">=0.4.7"
      },
      "optionalDependencies": {
        "uglify-js": "^3.1.4"
      }
    },
    "node_modules/har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=",
      "optional": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "deprecated": "this library is no longer supported",
      "optional": true,
      "dependencies": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-yarn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/has-yarn/-/has-yarn-2.1.0.tgz",
      "integrity": "sha512-UqBRqi4ju7T+TqGNdqAO0PaSVGsDGJUBQvk9eUWNGRY1CFGDzYhLWoM7JQEemnlvVcv/YEmc2wNW8BC24EnUsw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/hasha": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/hasha/-/hasha-2.2.0.tgz",
      "integrity": "sha1-eNfL/B5tZjA/55g3NlmEUXsvbuE=",
      "optional": true,
      "dependencies": {
        "is-stream": "^1.0.1",
        "pinkie-promise": "^2.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/hexoid": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-2.0.0.tgz",
      "integrity": "sha512-qlspKUK7IlSQv2o+5I7yhUd7TxlOG2Vr5LTa3ve2XSNVKAL/n/u/7KLvKmFNimomDIKvZFXWHv0T12mv7rT8Aw==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/html-pdf": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/html-pdf/-/html-pdf-3.0.1.tgz",
      "integrity": "sha512-CKNSacmQn+CKJ2GNfT4UYKaPy/T3Ndj82yJ2aju/UPmnvWNjIpyumqRqkFU0mwT6BTHBFhFGTnXN8dBn4Bdj0Q==",
      "bin": {
        "html-pdf": "bin/index.js"
      },
      "engines": {
        "node": ">=4.0.0"
      },
      "optionalDependencies": {
        "phantomjs-prebuilt": "^2.1.16"
      }
    },
    "node_modules/http-cache-semantics": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ=="
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
      "optional": true,
      "dependencies": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      },
      "engines": {
        "node": ">=0.8",
        "npm": ">=1.3.7"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha1-SMptcvbGo68Aqa1K5odr44ieKwk="
    },
    "node_modules/immediate": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz",
      "integrity": "sha1-nbHb0Pr43m++D13V5Wu2BigN5ps="
    },
    "node_modules/import-lazy": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/import-lazy/-/import-lazy-2.1.0.tgz",
      "integrity": "sha1-BWmOPUXIjo1+nZLLBYTnfwlvPkM=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ini": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.6.tgz",
      "integrity": "sha512-IZUoxEjNjubzrmvzZU4lKP7OnYmX72XRl3sqkfJhBKweKi5rnGi5+IUdlj/H1M+Ip5JQ1WzaDMOBRY90Ajc5jg==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-ci": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-ci/-/is-ci-2.0.0.tgz",
      "integrity": "sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==",
      "dependencies": {
        "ci-info": "^2.0.0"
      },
      "bin": {
        "is-ci": "bin.js"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
      "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.1.tgz",
      "integrity": "sha512-5G0tKtBTFImOqDnLB2hG6Bp2qcKEFduo4tZu9MT/H6NQv/ghhy30o55ufafxJ/LdH79LLs2Kfrn85TLKyA7BUg==",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-installed-globally": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-installed-globally/-/is-installed-globally-0.3.2.tgz",
      "integrity": "sha512-wZ8x1js7Ia0kecP/CHM/3ABkAmujX7WPvQk6uu3Fly/Mk44pySulQpnHG46OMjHGXApINnV4QhY3SWnECO2z5g==",
      "dependencies": {
        "global-dirs": "^2.0.1",
        "is-path-inside": "^3.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-npm": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-npm/-/is-npm-4.0.0.tgz",
      "integrity": "sha512-96ECIfh9xtDDlPylNPXhzjsykHsMJZ18ASpaWzQyBr4YRTcVjUvzaHayDAES2oU/3KpljhHUjtSRNiDwi0F0ig==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-obj": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-2.0.0.tgz",
      "integrity": "sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.2.tgz",
      "integrity": "sha512-/2UGPSgmtqwo1ktx8NDHjuPwZWmHhO+gj0f93EkhLB5RgW9RZevWYYlIkS6zePc6U2WpOdQYIwHe9YC4DWEBVg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-property": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",
      "integrity": "sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ="
    },
    "node_modules/is-stream": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
      "integrity": "sha1-EtSj3U5o4Lec6428hBc66A2RykQ=",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="
    },
    "node_modules/is-yarn-global": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/is-yarn-global/-/is-yarn-global-0.3.0.tgz",
      "integrity": "sha512-VjSeb/lHmkoyd8ryPVIKvOCn4D1koMqY+vqyjjUfc3xyKtP4dYOxM44sZrnqQSzSds3xyOrUTLTC9LVCVgLngw=="
    },
    "node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
      "optional": true
    },
    "node_modules/isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
      "optional": true
    },
    "node_modules/jquery": {
      "version": "3.7.1",
      "resolved": "https://registry.npmjs.org/jquery/-/jquery-3.7.1.tgz",
      "integrity": "sha512-m4avr8yL8kmFN8psrbFFFmB/If14iN5o9nw/NgnnM+kybDJpRsAynV2BsfpTYrTRysYUdADVD7CkUUizgkpLfg==",
      "peer": true
    },
    "node_modules/js-md4": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/js-md4/-/js-md4-0.3.2.tgz",
      "integrity": "sha512-/GDnfQYsltsjRswQhN9fhv3EMw2sCpUdrdxyWDOUK7eyD++r3gRhzgiQgc/x4MAv2i1iuQ4lxO5mvqM3vj4bwA=="
    },
    "node_modules/jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
      "optional": true
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
      "integrity": "sha1-Wx85evx11ne96Lz8Dkfh+aPZqJg="
    },
    "node_modules/json-schema": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz",
      "integrity": "sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=",
      "optional": true
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "optional": true
    },
    "node_modules/json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=",
      "optional": true
    },
    "node_modules/jsonfile": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz",
      "integrity": "sha1-NzaitCi4e72gzIO1P6PWM6NcKug=",
      "optional": true,
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/jsonwebtoken/node_modules/semver": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jsprim": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz",
      "integrity": "sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=",
      "engines": [
        "node >=0.6.0"
      ],
      "optional": true,
      "dependencies": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.2.3",
        "verror": "1.10.0"
      }
    },
    "node_modules/jszip": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz",
      "integrity": "sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==",
      "dependencies": {
        "lie": "~3.3.0",
        "pako": "~1.0.2",
        "readable-stream": "~2.3.6",
        "setimmediate": "^1.0.5"
      }
    },
    "node_modules/jwa": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
      "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kew": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/kew/-/kew-0.7.0.tgz",
      "integrity": "sha1-edk9LTM2PW/dKXCzNdkUGtWR15s=",
      "optional": true
    },
    "node_modules/keyv": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-3.1.0.tgz",
      "integrity": "sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==",
      "dependencies": {
        "json-buffer": "3.0.0"
      }
    },
    "node_modules/klaw": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz",
      "integrity": "sha1-QIhDO0azsbolnXh4XY6W9zugJDk=",
      "optional": true,
      "optionalDependencies": {
        "graceful-fs": "^4.1.9"
      }
    },
    "node_modules/latest-version": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/latest-version/-/latest-version-5.1.0.tgz",
      "integrity": "sha512-weT+r0kTkRQdCdYCNtkMwWXQTMEswKrFBkm4ckQOMVhhqhIMI1UT2hMj+1iigIhgSZm5gTmrRXBNoGUgaTY1xA==",
      "dependencies": {
        "package-json": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lazystream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/lazystream/-/lazystream-1.0.0.tgz",
      "integrity": "sha1-9plf4PggOS9hOWvolGJAe7dxaOQ=",
      "dependencies": {
        "readable-stream": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.6.3"
      }
    },
    "node_modules/lie": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/lie/-/lie-3.3.0.tgz",
      "integrity": "sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==",
      "dependencies": {
        "immediate": "~3.0.5"
      }
    },
    "node_modules/linq": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/linq/-/linq-3.2.3.tgz",
      "integrity": "sha512-OI48ncDVi29Hc4g5+hPd58AkI8YtLUFkZWWvvyC+w1+j8PsDi28tLZnbv3+8PvxSiJUEQDihkQjrIrPkFzEFqQ==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/listenercount": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/listenercount/-/listenercount-1.0.1.tgz",
      "integrity": "sha1-hMinKrWcRyUyFIDJdeZQg0LnCTc="
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "node_modules/lodash.clonedeep": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ=="
    },
    "node_modules/lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw="
    },
    "node_modules/lodash.difference": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.difference/-/lodash.difference-4.5.0.tgz",
      "integrity": "sha1-nMtOUF1Ia5FlE0V3KIWi3yf9AXw="
    },
    "node_modules/lodash.escaperegexp": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.escaperegexp/-/lodash.escaperegexp-4.1.2.tgz",
      "integrity": "sha1-ZHYsSGGAglGKw99Mz11YhtriA0c="
    },
    "node_modules/lodash.flatten": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz",
      "integrity": "sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8="
    },
    "node_modules/lodash.groupby": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/lodash.groupby/-/lodash.groupby-4.6.0.tgz",
      "integrity": "sha1-Cwih3PaDl8OXhVwyOXg4Mt90A9E="
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w=="
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha1-bC4XHbKiV82WgC/UOwGyDV9YcPY="
    },
    "node_modules/lodash.isequal": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.isequal/-/lodash.isequal-4.5.0.tgz",
      "integrity": "sha1-QVxEePK8wwEgwizhDtMib30+GOA="
    },
    "node_modules/lodash.isfunction": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/lodash.isfunction/-/lodash.isfunction-3.0.9.tgz",
      "integrity": "sha512-AirXNj15uRIMMPihnkInB4i3NHeb4iBtNg9WRWuK2o31S+ePwwNmDPaTL3o7dTJ+VXNZim7rFs4rxN4YU1oUJw=="
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA=="
    },
    "node_modules/lodash.isnil": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/lodash.isnil/-/lodash.isnil-4.0.0.tgz",
      "integrity": "sha1-SeKM1VkBNFjIFMVHnTxmOiG/qmw="
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw=="
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha1-fFJqUtibRcRcxpC4gWO+BJf1UMs="
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
    },
    "node_modules/lodash.isundefined": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isundefined/-/lodash.isundefined-3.0.1.tgz",
      "integrity": "sha1-I+89lTVWUgOmbO/VuDD4SJEa+0g="
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
    },
    "node_modules/lodash.union": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/lodash.union/-/lodash.union-4.6.0.tgz",
      "integrity": "sha1-SLtQiECfFvGCFmZkHETdGqrjzYg="
    },
    "node_modules/lodash.uniq": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz",
      "integrity": "sha1-0CJTc662Uq3BvILklFM5qEJ1R3M="
    },
    "node_modules/long": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/long/-/long-4.0.0.tgz",
      "integrity": "sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA=="
    },
    "node_modules/lowercase-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/luxon": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.6.1.tgz",
      "integrity": "sha512-tJLxrKJhO2ukZ5z0gyjY1zPh3Rh88Ej9P7jNrZiHMUXHae1yvI2imgOZtL1TO8TW6biMMKfTtAOoEJANgtWBMQ==",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memorystore": {
      "version": "1.6.6",
      "resolved": "https://registry.npmjs.org/memorystore/-/memorystore-1.6.6.tgz",
      "integrity": "sha512-EbLl1xg9+DlnjXkZK/eMUoWyhZ1IxcWMpSuFyqyA/Z4BNuH7BR+E0yC40WbLZZ6G8LxHiUZ2DPhqV8DR8+9UQQ==",
      "dependencies": {
        "debug": "^4.3.0",
        "lru-cache": "^4.0.3"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/memorystore/node_modules/debug": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.1.tgz",
      "integrity": "sha512-doEwdvm4PCeK4K3RQN2ZC2BYUBaxwLARCqZmMjtF8a51J2Rb0xpVloFRnCODwqjpwnAoao4pelN8l3RJdv3gRQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/memorystore/node_modules/lru-cache": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
      "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
      "dependencies": {
        "pseudomap": "^1.0.2",
        "yallist": "^2.1.2"
      }
    },
    "node_modules/memorystore/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/memorystore/node_modules/yallist": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
      "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A=="
    },
    "node_modules/minimatch": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.5.tgz",
      "integrity": "sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw=="
    },
    "node_modules/mkdirp": {
      "version": "0.5.5",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.5.tgz",
      "integrity": "sha512-NKmAlESf6jMGym1++R0Ra7wvhV+wFW63FaSOFPwRahvea0gMUcGUhVeAg/0BC0wiv9ih5NYPB1Wn1UEI1/L+xQ==",
      "dependencies": {
        "minimist": "^1.2.5"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/moment": {
      "version": "2.29.1",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.1.tgz",
      "integrity": "sha512-kHmoybcPV8Sqy59DwNDY3Jefr64lK/by/da0ViFcuA4DH0vQg5Q6Ze5VimxkfQNSC+Mls/Kx53s7TjP1RhFEDQ==",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/morgan": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz",
      "integrity": "sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==",
      "dependencies": {
        "basic-auth": "~2.0.1",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-finished": "~2.3.0",
        "on-headers": "~1.0.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "node_modules/multer": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.2.tgz",
      "integrity": "sha512-xY8pX7V+ybyUpbYMxtjM9KAiD9ixtg5/JkeKUTD6xilfDv0vzzOFcCp4Ljb1UU3tSOM3VTZtKo63OmzOrGi3Cg==",
      "dependencies": {
        "append-field": "^1.0.0",
        "busboy": "^0.2.11",
        "concat-stream": "^1.5.2",
        "mkdirp": "^0.5.1",
        "object-assign": "^4.1.1",
        "on-finished": "^2.3.0",
        "type-is": "^1.6.4",
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/mv": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/mv/-/mv-2.1.1.tgz",
      "integrity": "sha512-at/ZndSy3xEGJ8i0ygALh8ru9qy7gWW1cmkaqBN29JmMlIvM//MEO9y1sk/avxuwnPcfhkejkLsuPxH81BrkSg==",
      "optional": true,
      "dependencies": {
        "mkdirp": "~0.5.1",
        "ncp": "~2.0.0",
        "rimraf": "~2.4.0"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/mv/node_modules/glob": {
      "version": "6.0.4",
      "resolved": "https://registry.npmjs.org/glob/-/glob-6.0.4.tgz",
      "integrity": "sha512-MKZeRNyYZAVVVG1oZeLaWie1uweH40m9AZwIwxyPbTSX4hHrVYSzLg0Ro5Z5R7XKkIX+Cc6oD1rqeDJnwsB8/A==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "optional": true,
      "dependencies": {
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "2 || 3",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/mv/node_modules/rimraf": {
      "version": "2.4.5",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.4.5.tgz",
      "integrity": "sha512-J5xnxTyqaiw06JjMftq7L9ouA448dw/E7dKghkP9WpKNuwmARNNg+Gk8/u5ryb9N/Yo2+z3MCwuqFK/+qPOPfQ==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "optional": true,
      "dependencies": {
        "glob": "^6.0.1"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/mysql": {
      "version": "2.18.1",
      "resolved": "https://registry.npmjs.org/mysql/-/mysql-2.18.1.tgz",
      "integrity": "sha512-Bca+gk2YWmqp2Uf6k5NFEurwY/0td0cpebAucFpY/3jhrwrVGuxU2uQFCHjU19SJfje0yQvi+rVWdq78hR5lig==",
      "dependencies": {
        "bignumber.js": "9.0.0",
        "readable-stream": "2.3.7",
        "safe-buffer": "5.1.2",
        "sqlstring": "2.3.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mysql2": {
      "version": "2.2.5",
      "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-2.2.5.tgz",
      "integrity": "sha512-XRqPNxcZTpmFdXbJqb+/CtYVLCx14x1RTeNMD4954L331APu75IC74GDqnZMEt1kwaXy6TySo55rF2F3YJS78g==",
      "dependencies": {
        "denque": "^1.4.1",
        "generate-function": "^2.3.1",
        "iconv-lite": "^0.6.2",
        "long": "^4.0.0",
        "lru-cache": "^6.0.0",
        "named-placeholders": "^1.1.2",
        "seq-queue": "^0.0.5",
        "sqlstring": "^2.3.2"
      },
      "engines": {
        "node": ">= 8.0"
      }
    },
    "node_modules/mysql2/node_modules/iconv-lite": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.2.tgz",
      "integrity": "sha512-2y91h5OpQlolefMPmUlivelittSWy0rP+oYVpn6A7GwVHNE8AWzoYOBNmlwks3LobaJxgHCYZAnyNo2GgpNRNQ==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/mysql2/node_modules/sqlstring": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.2.tgz",
      "integrity": "sha512-vF4ZbYdKS8OnoJAWBmMxCQDkiEBkGQYU7UZPtL8flbDRSNkhaXvRJ279ZtI6M+zDaQovVU4tuRgzK5fVhvFAhg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/named-placeholders": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.2.tgz",
      "integrity": "sha512-wiFWqxoLL3PGVReSZpjLVxyJ1bRqe+KKJVbr4hGs1KWfTZTQyezHFBbuKj9hsizHyGV2ne7EMjHdxEGAybD5SA==",
      "dependencies": {
        "lru-cache": "^4.1.3"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/named-placeholders/node_modules/lru-cache": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
      "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
      "dependencies": {
        "pseudomap": "^1.0.2",
        "yallist": "^2.1.2"
      }
    },
    "node_modules/named-placeholders/node_modules/yallist": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
      "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
    },
    "node_modules/nan": {
      "version": "2.22.2",
      "resolved": "https://registry.npmjs.org/nan/-/nan-2.22.2.tgz",
      "integrity": "sha512-DANghxFkS1plDdRsX0X9pm0Z6SJNN6gBdtXfanwoZ8hooC5gosGFSBGRYHUVPz1asKA/kMRqDRdHrluZ61SpBQ==",
      "optional": true
    },
    "node_modules/ncp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ncp/-/ncp-2.0.0.tgz",
      "integrity": "sha512-zIdGUrPRFTUELUvr3Gmc7KZ2Sw/h1PiVM0Af/oHB6zgnV1ikqSfRk+TOufi79aHYCW3NiOXmr1BP5nWbzojLaA==",
      "optional": true,
      "bin": {
        "ncp": "bin/ncp"
      }
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw=="
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/node-jose": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/node-jose/-/node-jose-2.2.0.tgz",
      "integrity": "sha512-XPCvJRr94SjLrSIm4pbYHKLEaOsDvJCpyFw/6V/KK/IXmyZ6SFBzAUDO9HQf4DB/nTEFcRGH87mNciOP23kFjw==",
      "dependencies": {
        "base64url": "^3.0.1",
        "buffer": "^6.0.3",
        "es6-promise": "^4.2.8",
        "lodash": "^4.17.21",
        "long": "^5.2.0",
        "node-forge": "^1.2.1",
        "pako": "^2.0.4",
        "process": "^0.11.10",
        "uuid": "^9.0.0"
      }
    },
    "node_modules/node-jose/node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/node-jose/node_modules/long": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/long/-/long-5.3.1.tgz",
      "integrity": "sha512-ka87Jz3gcx/I7Hal94xaN2tZEOPoUOEVftkQqZx2EeQRN7LGdfLlI3FvZ+7WDplm+vK2Urx9ULrvSowtdCieng=="
    },
    "node_modules/node-jose/node_modules/pako": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/pako/-/pako-2.1.0.tgz",
      "integrity": "sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug=="
    },
    "node_modules/node-jose/node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/nodemailer": {
      "version": "6.7.7",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.7.7.tgz",
      "integrity": "sha512-pOLC/s+2I1EXuSqO5Wa34i3kXZG3gugDssH+ZNCevHad65tc8vQlCQpOLaUjopvkRQKm2Cki2aME7fEOPRy3bA==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/nodemon": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.6.tgz",
      "integrity": "sha512-4I3YDSKXg6ltYpcnZeHompqac4E6JeAMpGm8tJnB9Y3T0ehasLa4139dJOcCrB93HHrUMsCrKtoAlXTqT5n4AQ==",
      "hasInstallScript": true,
      "dependencies": {
        "chokidar": "^3.2.2",
        "debug": "^3.2.6",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.0.4",
        "pstree.remy": "^1.1.7",
        "semver": "^5.7.1",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.3",
        "update-notifier": "^4.1.0"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha1-bd0hvSoxQXuScn3Vhfim83YI6+4=",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-url": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-4.5.0.tgz",
      "integrity": "sha512-2s47yzUxdexf1OhyRi4Em83iQk0aPvwTddtFz4hnSSw9dCEsLEGf6SwIO8ss/19S9iBb5sJaOuTvTGDeZI00BQ==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/numeros_a_letras": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/numeros_a_letras/-/numeros_a_letras-1.0.7.tgz",
      "integrity": "sha512-1fJUTETNmiDRQTBQBwWsdfLpk9AKLutRp9H5Pmu63TAMKTH+rPsaC95qxejw0gnt8ONEJSDlO4rehxFh6Hq7mA=="
    },
    "node_modules/oauth": {
      "version": "0.9.15",
      "resolved": "https://registry.npmjs.org/oauth/-/oauth-0.9.15.tgz",
      "integrity": "sha512-a5ERWK1kh38ExDEfoO6qUHJb32rd7aYmPHuyCu3Fta/cnICvYmgd2uhuKXvPD+PXB+gCEYYEaQdIRAjCOwAKNA=="
    },
    "node_modules/oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
      "optional": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/p-cancelable": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-1.1.0.tgz",
      "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/package-json/-/package-json-6.5.0.tgz",
      "integrity": "sha512-k3bdm2n25tkyxcjSKzB5x8kfVxlMdgsbPr0GkZcwHsLpba6cBjqCt1KlcChKEvxHIcTB1FVMuwoijZ26xex5MQ==",
      "dependencies": {
        "got": "^9.6.0",
        "registry-auth-token": "^4.0.0",
        "registry-url": "^5.0.0",
        "semver": "^6.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/package-json/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/pako": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
      "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw=="
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/passport": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.4.1.tgz",
      "integrity": "sha512-IxXgZZs8d7uFSt3eqNjM9NQ3g3uQCW5avD8mRNoXV99Yig50vjuaez6dQK2qC0kVWPRTujxY0dWgGfT09adjYg==",
      "dependencies": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/passport-azure-ad": {
      "version": "4.3.5",
      "resolved": "https://registry.npmjs.org/passport-azure-ad/-/passport-azure-ad-4.3.5.tgz",
      "integrity": "sha512-LBpXEght7hCMuMNFK4oegdN0uPBa3lpDMy71zQoB0zPg1RrGwdzpjwTiN1WzN0hY77fLyjz9tBr3TGAxnSgtEg==",
      "deprecated": "This package is deprecated and no longer supported. For more please visit https://github.com/AzureAD/passport-azure-ad?tab=readme-ov-file#node-js-validation-replacement-for-passportjs",
      "dependencies": {
        "async": "^3.2.3",
        "base64url": "^3.0.0",
        "bunyan": "^1.8.14",
        "cache-manager": "^3.6.1",
        "https-proxy-agent": "^5.0.0",
        "jws": "^3.1.3",
        "lodash": "^4.11.2",
        "node-jose": "^2.2.0",
        "oauth": "0.9.15",
        "passport": "^0.6.0",
        "valid-url": "^1.0.6"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/passport-azure-ad/node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/passport-azure-ad/node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/passport-azure-ad/node_modules/passport": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
      "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
      "dependencies": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1",
        "utils-merge": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/jaredhanson"
      }
    },
    "node_modules/passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha1-H+YyaMkudWBmJkN+O5BmYsFbpu4=",
      "dependencies": {
        "passport-strategy": "1.x.x"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha1-tVOaqPwiWj0a0XlHbd8ja0QPUuQ=",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ=="
    },
    "node_modules/pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha1-HUCLP9t2kjuVQ9lvtMnf1TXZy10="
    },
    "node_modules/pend": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
      "integrity": "sha1-elfrVQpng/kRUzH89GY9XI4AelA=",
      "optional": true
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=",
      "optional": true
    },
    "node_modules/phantomjs-prebuilt": {
      "version": "2.1.16",
      "resolved": "https://registry.npmjs.org/phantomjs-prebuilt/-/phantomjs-prebuilt-2.1.16.tgz",
      "integrity": "sha1-79ISpKOWbTZHaE6ouniFSb4q7+8=",
      "deprecated": "this package is now deprecated",
      "hasInstallScript": true,
      "optional": true,
      "dependencies": {
        "es6-promise": "^4.0.3",
        "extract-zip": "^1.6.5",
        "fs-extra": "^1.0.0",
        "hasha": "^2.2.0",
        "kew": "^0.7.0",
        "progress": "^1.1.8",
        "request": "^2.81.0",
        "request-progress": "^2.0.1",
        "which": "^1.2.10"
      },
      "bin": {
        "phantomjs": "bin/phantomjs"
      }
    },
    "node_modules/picomatch": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.2.2.tgz",
      "integrity": "sha512-q0M/9eZHzmr0AulXyPwNfZjtwZ/RBZlbN3K3CErVrk50T2ASYI7Bye0EvekFY3IP1Nt2DHu0re+V2ZHIpMkuWg==",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pinkie": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz",
      "integrity": "sha1-clVrgM+g1IqXToDnckjoDtT3+HA=",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pinkie-promise": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz",
      "integrity": "sha1-ITXW36ejWMBprJsXh3YogihFD/o=",
      "optional": true,
      "dependencies": {
        "pinkie": "^2.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/prepend-http": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-2.0.0.tgz",
      "integrity": "sha1-6SQ0v6XqjBn0HN/UAddBo8gZ2Jc=",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/printj": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/printj/-/printj-1.1.2.tgz",
      "integrity": "sha512-zA2SmoLaxZyArQTOPj5LXecR+RagfPSU5Kw1qP+jkWeNlrq+eJZyY2oS68SU1Z/7/myXM4lo9716laOFAVStCQ==",
      "bin": {
        "printj": "bin/printj.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/process": {
      "version": "0.11.10",
      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
      "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
    },
    "node_modules/progress": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/progress/-/progress-1.1.8.tgz",
      "integrity": "sha1-4mDHj2Fhzdmw5WzD4Khd4Xx6V74=",
      "optional": true,
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "node_modules/pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
    },
    "node_modules/psl": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.8.0.tgz",
      "integrity": "sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ==",
      "optional": true
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w=="
    },
    "node_modules/pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pupa": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/pupa/-/pupa-2.1.1.tgz",
      "integrity": "sha512-l1jNAspIBSFqbT+y+5FosojNpVpF94nlI+wDUpqP9enwOTfHx9f0gh5nB96vl+6yTpsJsypeNrwfzPrKuHB41A==",
      "dependencies": {
        "escape-goat": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha1-T2ih3Arli9P7lYSMMDJNt11kNgs=",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "dependencies": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "bin": {
        "rc": "cli.js"
      }
    },
    "node_modules/read-excel-file": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/read-excel-file/-/read-excel-file-5.0.0.tgz",
      "integrity": "sha512-Lk2rRORUA6ugz1gWemBqyO/9xynxWfmEURnT9oEL7GwyC1I6fsRYWMNaIyu614iZGLZsxYZlFlZMrF/LOe8jdQ==",
      "dependencies": {
        "jszip": "^3.5.0",
        "unzipper": "^0.9.15",
        "xmldom": "^0.1.27",
        "xpath": "0.0.27"
      }
    },
    "node_modules/readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/readdir-glob": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/readdir-glob/-/readdir-glob-1.1.1.tgz",
      "integrity": "sha512-91/k1EzZwDx6HbERR+zucygRFfiPl2zkIYZtv3Jjr6Mn7SkKcVct8aVO+sSRiGMc6fLf72du3d92/uY63YPdEA==",
      "dependencies": {
        "minimatch": "^3.0.4"
      }
    },
    "node_modules/readdirp": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.5.0.tgz",
      "integrity": "sha512-cMhu7c/8rdhkHXWsY+osBhfSy0JikwpHK/5+imo+LpeasTF8ouErHrlYkwT0++njiyuDvc7OFY5T3ukvZ8qmFQ==",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/registry-auth-token": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-4.2.1.tgz",
      "integrity": "sha512-6gkSb4U6aWJB4SF2ZvLb76yCBjcvufXBqvvEx1HbmKPkutswjW1xNVRY0+daljIYRbogN7O0etYSlbiaEQyMyw==",
      "dependencies": {
        "rc": "^1.2.8"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/registry-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-5.1.0.tgz",
      "integrity": "sha512-8acYXXTI0AkQv6RAOjE3vOaIXZkT9wo4LOFbBKYQEEnnMNBpKqdUrI6S4NT0KPIo/WVvJ5tE/X5LF/TQUf0ekw==",
      "dependencies": {
        "rc": "^1.2.8"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
      "optional": true,
      "dependencies": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/request-progress": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/request-progress/-/request-progress-2.0.1.tgz",
      "integrity": "sha1-XTa7V5YcZzqlt4jbyBQf3yO0Tgg=",
      "optional": true,
      "dependencies": {
        "throttleit": "^1.0.0"
      }
    },
    "node_modules/request/node_modules/qs": {
      "version": "6.5.2",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
      "integrity": "sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==",
      "optional": true,
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/request/node_modules/uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
      "optional": true,
      "bin": {
        "uuid": "bin/uuid"
      }
    },
    "node_modules/responselike": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-1.0.2.tgz",
      "integrity": "sha1-kYcg7ztjHFZCvgaPFa3lpG9Loec=",
      "dependencies": {
        "lowercase-keys": "^1.0.0"
      }
    },
    "node_modules/rfc-facil": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/rfc-facil/-/rfc-facil-1.1.0.tgz",
      "integrity": "sha512-ImGh2qCMEn3kbuvv+YkH2oqwRDbGVi6t4rrycHUoIxIuFGxqap0GhGFE6oNrbtLzMOcSgcLPfPn7iq14XaBqQQ==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/rimraf": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
      "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "node_modules/safe-json-stringify": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/safe-json-stringify/-/safe-json-stringify-1.2.0.tgz",
      "integrity": "sha512-gH8eh2nZudPQO6TytOvbxnuhYBOvDBBLW52tz5q6X58lJcd/tkmqFR+5Z9adS8aJtURSXWThWy/xJtJwixErvg==",
      "optional": true
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/sax": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.4.1.tgz",
      "integrity": "sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg=="
    },
    "node_modules/saxes": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/saxes/-/saxes-5.0.1.tgz",
      "integrity": "sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==",
      "dependencies": {
        "xmlchars": "^2.2.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/semver-diff": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/semver-diff/-/semver-diff-3.1.1.tgz",
      "integrity": "sha512-GX0Ix/CJcHyB8c4ykpHGIAvLyOwOobtM/8d+TQkAd81/bEjgPHrfba41Vpesr7jX/t8Uh+R3EX9eAS5be+jQYg==",
      "dependencies": {
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/semver-diff/node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/send/node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/seq-queue": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",
      "integrity": "sha1-1WgS4cAXpuTnw+Ojeh2m143TyT4="
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha1-KQy7Iy4waULX1+qbg3Mqt4VvgoU="
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.3.tgz",
      "integrity": "sha512-VUJ49FC8U1OxwZLxIbTTrDvLnf/6TDgxZcK8wxR8zs13xpx7xbG60ndBlhNrFi2EMuFRoeDoJO7wthSLq42EjA=="
    },
    "node_modules/soap": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/soap/-/soap-1.1.5.tgz",
      "integrity": "sha512-6YJrwY+tXHwlk/wtS7+XSc0jyEWgNw8xJQYvY9m1jZlPaGkc2nzmwKAq98fwGIw51acywhsraaeq/6GFggaNYw==",
      "dependencies": {
        "axios": "^1.7.7",
        "axios-ntlm": "^1.4.2",
        "debug": "^4.3.6",
        "formidable": "^3.5.1",
        "get-stream": "^6.0.1",
        "lodash": "^4.17.21",
        "sax": "^1.4.1",
        "strip-bom": "^3.0.0",
        "whatwg-mimetype": "4.0.0",
        "xml-crypto": "^6.0.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/soap/node_modules/axios": {
      "version": "1.7.7",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.7.tgz",
      "integrity": "sha512-S4kL7XrjgBmvdGut0sN3yJxqYzrDOnivkBiN0OFs6hLiUam3UPvswUo0kqGyhqUZGEOytHyumEdXsAkgCOUf3Q==",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/soap/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/soap/node_modules/form-data": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.1.tgz",
      "integrity": "sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/soap/node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/soap/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sqlstring": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz",
      "integrity": "sha1-R1OT/56RR5rqYtyvDKPRSYOn+0A=",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ssf": {
      "version": "0.10.3",
      "resolved": "https://registry.npmjs.org/ssf/-/ssf-0.10.3.tgz",
      "integrity": "sha512-pRuUdW0WwyB2doSqqjWyzwCD6PkfxpHAHdZp39K3dp/Hq7f+xfMwNAWIi16DyrRg4gg9c/RvLYkJTSawTPTm1w==",
      "dependencies": {
        "frac": "~1.1.2"
      },
      "bin": {
        "ssf": "bin/ssf.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/sshpk": {
      "version": "1.16.1",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.16.1.tgz",
      "integrity": "sha512-HXXqVUq7+pcKeLqqZj6mHFUMvXtOJt1uoUx09pFW6011inTMxqI8BA8PM95myrIyyKwdnzjdFjLiE6KBPVtJIg==",
      "optional": true,
      "dependencies": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      },
      "bin": {
        "sshpk-conv": "bin/sshpk-conv",
        "sshpk-sign": "bin/sshpk-sign",
        "sshpk-verify": "bin/sshpk-verify"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/streamsearch": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-0.1.2.tgz",
      "integrity": "sha1-gIudDlb8Jz2Am6VzOOkpkZoanxo=",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.0.tgz",
      "integrity": "sha512-zUz5JD+tgqtuDjMhwIg5uFVV3dtqZ9yQJlZVfq4I01/K5Paj5UHj7VyrQOJvzawSVlKpObApbfD0Ed6yJc+1eg==",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width/node_modules/ansi-regex": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.0.tgz",
      "integrity": "sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "node_modules/string-width/node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width/node_modules/strip-ansi": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz",
      "integrity": "sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==",
      "dependencies": {
        "ansi-regex": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
      "dependencies": {
        "ansi-regex": "^4.1.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo=",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/tableexport": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/tableexport/-/tableexport-5.2.0.tgz",
      "integrity": "sha512-Ux3mepRxwi7d4H3ArEXETpnBaxV4Wl3yoYQOByFMyIkOzslwgWSUYcB7InHyCEnwlsLgtQjRtLqjb0f2gpW+vg==",
      "dependencies": {
        "blobjs": "^1.1.1",
        "file-saverjs": "^1.3.6",
        "xlsx": "^0.14.0"
      },
      "peerDependencies": {
        "bootstrap": ">= 3 < 4",
        "jquery": ">= 1.1.2"
      }
    },
    "node_modules/tar-stream": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.2.0.tgz",
      "integrity": "sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==",
      "dependencies": {
        "bl": "^4.0.3",
        "end-of-stream": "^1.4.1",
        "fs-constants": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tar-stream/node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/term-size": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/term-size/-/term-size-2.2.1.tgz",
      "integrity": "sha512-wK0Ri4fOGjv/XPy8SBHZChl8CM7uMc5VML7SqiQ0zG7+J5Vr+RMQDoHa2CNT6KHUnTGIXH34UDMkPzAUyapBZg==",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/throttleit": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/throttleit/-/throttleit-1.0.0.tgz",
      "integrity": "sha1-nnhYNtr0Z0MUWlmEtiaNgoUorGw=",
      "optional": true
    },
    "node_modules/timeago.js": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/timeago.js/-/timeago.js-4.0.2.tgz",
      "integrity": "sha512-a7wPxPdVlQL7lqvitHGGRsofhdwtkoSXPGATFuSOA2i1ZNQEPLrGnj68vOp2sOJTCFAQVXPeNMX/GctBaO9L2w=="
    },
    "node_modules/tmp": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.2.1.tgz",
      "integrity": "sha512-76SUhtfqR2Ijn+xllcI5P1oyannHNHByD80W1q447gU3mp9G9PSpGdWmjUOHRDPiHYacIk66W7ubDTuPF3BEtQ==",
      "dependencies": {
        "rimraf": "^3.0.0"
      },
      "engines": {
        "node": ">=8.17.0"
      }
    },
    "node_modules/tmp/node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/to-readable-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/to-readable-stream/-/to-readable-stream-1.0.0.tgz",
      "integrity": "sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q==",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "dependencies": {
        "nopt": "~1.0.10"
      },
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "optional": true,
      "dependencies": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/traverse": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/traverse/-/traverse-0.3.9.tgz",
      "integrity": "sha1-cXuPIgzAu3tE5AUUwisui7xw2Lk=",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
      "optional": true,
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=",
      "optional": true
    },
    "node_modules/type-fest": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c="
    },
    "node_modules/typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "dependencies": {
        "is-typedarray": "^1.0.0"
      }
    },
    "node_modules/uglify-js": {
      "version": "3.12.1",
      "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-3.12.1.tgz",
      "integrity": "sha512-o8lHP20KjIiQe5b/67Rh68xEGRrc2SRsCuuoYclXXoC74AfSRGblU1HKzJWH3HxPZ+Ort85fWHpSX7KwBUC9CQ==",
      "optional": true,
      "bin": {
        "uglifyjs": "bin/uglifyjs"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "dependencies": {
        "random-bytes": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.3.tgz",
      "integrity": "sha512-nrXZwwXrD/T/JXeygJqdCO6NZZ1L66HrxM/Z7mIq2oPanoN0F1nLx3lwJMu6AwJY69hdixaFQOuoYsMjE5/C2A==",
      "dependencies": {
        "debug": "^2.2.0"
      }
    },
    "node_modules/underscore": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.9.2.tgz",
      "integrity": "sha512-D39qtimx0c1fI3ya1Lnhk3E9nONswSKhnffBI0gME9C99fYOkNi04xs8K6pePLhvl1frbDemkaBQ5ikWllR2HQ=="
    },
    "node_modules/unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "dependencies": {
        "crypto-random-string": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/unzipper": {
      "version": "0.9.15",
      "resolved": "https://registry.npmjs.org/unzipper/-/unzipper-0.9.15.tgz",
      "integrity": "sha512-2aaUvO4RAeHDvOCuEtth7jrHFaCKTSXPqUkXwADaLBzGbgZGzUDccoEdJ5lW+3RmfpOZYNx0Rw6F6PUzM6caIA==",
      "dependencies": {
        "big-integer": "^1.6.17",
        "binary": "~0.3.0",
        "bluebird": "~3.4.1",
        "buffer-indexof-polyfill": "~1.0.0",
        "duplexer2": "~0.1.4",
        "fstream": "^1.0.12",
        "listenercount": "~1.0.1",
        "readable-stream": "~2.3.6",
        "setimmediate": "~1.0.4"
      }
    },
    "node_modules/update-notifier": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/update-notifier/-/update-notifier-4.1.3.tgz",
      "integrity": "sha512-Yld6Z0RyCYGB6ckIjffGOSOmHXj1gMeE7aROz4MG+XMkmixBX4jUngrGXNYz7wPKBmtoD4MnBa2Anu7RSKht/A==",
      "dependencies": {
        "boxen": "^4.2.0",
        "chalk": "^3.0.0",
        "configstore": "^5.0.1",
        "has-yarn": "^2.1.0",
        "import-lazy": "^2.1.0",
        "is-ci": "^2.0.0",
        "is-installed-globally": "^0.3.1",
        "is-npm": "^4.0.0",
        "is-yarn-global": "^0.3.0",
        "latest-version": "^5.0.0",
        "pupa": "^2.0.1",
        "semver-diff": "^3.1.1",
        "xdg-basedir": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/yeoman/update-notifier?sponsor=1"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "optional": true,
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url-parse-lax": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-3.0.0.tgz",
      "integrity": "sha1-FrXK/Afb42dsGxmZF3gj1lA6yww=",
      "dependencies": {
        "prepend-http": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/url-template": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/url-template/-/url-template-2.0.8.tgz",
      "integrity": "sha512-XdVKMF4SJ0nP/O7XIPB0JwAEuT9lDIYnNsK8yGVe43y0AWoKeJNdv3ZNWh7ksJ6KqQFjOO6ox/VEitLnaVNufw=="
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/valid-url": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/valid-url/-/valid-url-1.0.9.tgz",
      "integrity": "sha512-QQDsV8OnSf5Uc30CKSwG9lnhMPe6exHtTXLRYX8uMwKENy640pU+2BgBL0LRbDh/eYRahNCS7aewCx0wf3NYVA=="
    },
    "node_modules/validator": {
      "version": "13.5.1",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.5.1.tgz",
      "integrity": "sha512-s+7LW1Xi0OzPNfGN7Hb2vk0YB/epp9KFHHGC5JtqZOE1dUkN4ULPFZAQ1inCu7ceAsWmOJu6sn9cnwm3R+ghWQ==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
      "engines": [
        "node >=0.6.0"
      ],
      "optional": true,
      "dependencies": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/whatwg-mimetype": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
      "integrity": "sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "optional": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/widest-line": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-3.1.0.tgz",
      "integrity": "sha512-NsmoXalsWVDMGupxZ5R08ka9flZjjiLvHVAWYOKtiKM8ujtZWr9cRffak+uSE48+Ob8ObalXpwyeUiyDD6QFgg==",
      "dependencies": {
        "string-width": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wordwrap": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz",
      "integrity": "sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
    },
    "node_modules/write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "node_modules/xdg-basedir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/xdg-basedir/-/xdg-basedir-4.0.0.tgz",
      "integrity": "sha512-PSNhEJDejZYV7h50BohL09Er9VaIefr2LMAf3OEmpCkjOi34eYyQYAXUTjEQtZJTKcF0E2UKTh+osDLsgNim9Q==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/xlsx": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/xlsx/-/xlsx-0.14.5.tgz",
      "integrity": "sha512-s/5f4/mjeWREmIWZ+HtDfh/rnz51ar+dZ4LWKZU3u9VBx2zLdSIWTdXgoa52/pnZ9Oe/Vu1W1qzcKzLVe+lq4w==",
      "dependencies": {
        "adler-32": "~1.2.0",
        "cfb": "^1.1.2",
        "codepage": "~1.14.0",
        "commander": "~2.17.1",
        "crc-32": "~1.2.0",
        "exit-on-epipe": "~1.0.1",
        "ssf": "~0.10.2"
      },
      "bin": {
        "xlsx": "bin/xlsx.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/xml-crypto": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/xml-crypto/-/xml-crypto-6.0.0.tgz",
      "integrity": "sha512-L3RgnkaDrHaYcCnoENv4Idzt1ZRj5U1z1BDH98QdDTQfssScx8adgxhd9qwyYo+E3fXbQZjEQH7aiXHLVgxGvw==",
      "dependencies": {
        "@xmldom/is-dom-node": "^1.0.1",
        "@xmldom/xmldom": "^0.8.10",
        "xpath": "^0.0.33"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/xml-crypto/node_modules/xpath": {
      "version": "0.0.33",
      "resolved": "https://registry.npmjs.org/xpath/-/xpath-0.0.33.tgz",
      "integrity": "sha512-NNXnzrkDrAzalLhIUc01jO2mOzXGXh1JwPgkihcLLzw98c0WgYDmmjSh1Kl3wzaxSVWMuA+fe0WTWOBDWCBmNA==",
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/xml-formatter": {
      "version": "3.6.6",
      "resolved": "https://registry.npmjs.org/xml-formatter/-/xml-formatter-3.6.6.tgz",
      "integrity": "sha512-yfofQht42x2sN1YThT6Er6GFXiQinfDAsMTNvMPi2uZw5/Vtc2PYHfvALR8U+b2oN2ekBxLd2tGWV06rAM8nQA==",
      "dependencies": {
        "xml-parser-xo": "^4.1.4"
      },
      "engines": {
        "node": ">= 16"
      }
    },
    "node_modules/xml-parser-xo": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/xml-parser-xo/-/xml-parser-xo-4.1.4.tgz",
      "integrity": "sha512-wo+yWDNeMwd1ctzH4CsiGXaAappDsxuR+VnmPewOzHk/zvefksT2ZlcWpAePl11THOWgnIZM4GjvumevurNWZw==",
      "engines": {
        "node": ">= 16"
      }
    },
    "node_modules/xml2js": {
      "version": "0.4.23",
      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.4.23.tgz",
      "integrity": "sha512-ySPiMjM0+pLDftHgXY4By0uswI3SPKLDw/i3UXbnO8M/p28zqexCUoPmQFrYD+/1BzhGJSs2i1ERWKJAtiLrug==",
      "dependencies": {
        "sax": ">=0.6.0",
        "xmlbuilder": "~11.0.0"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/xmlbuilder": {
      "version": "11.0.1",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA==",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/xmlchars": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
      "integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw=="
    },
    "node_modules/xmldom": {
      "version": "0.1.31",
      "resolved": "https://registry.npmjs.org/xmldom/-/xmldom-0.1.31.tgz",
      "integrity": "sha512-yS2uJflVQs6n+CyjHoaBmVSqIDevTAWrzMmjG1Gc7h1qQ7uVozNhEPJAwZXWyGQ/Gafo3fCwrcaokezLPupVyQ==",
      "deprecated": "Deprecated due to CVE-2021-21366 resolved in 0.5.0",
      "engines": {
        "node": ">=0.1"
      }
    },
    "node_modules/xpath": {
      "version": "0.0.27",
      "resolved": "https://registry.npmjs.org/xpath/-/xpath-0.0.27.tgz",
      "integrity": "sha512-fg03WRxtkCV6ohClePNAECYsmpKKTv5L8y/X3Dn1hQrec3POx2jHZ/0P2qQ6HvsrU1BmeqXcof3NGGueG6LxwQ==",
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/yauzl": {
      "version": "2.10.0",
      "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
      "integrity": "sha1-x+sXyT4RLLEIb6bY5R+wZnt5pfk=",
      "optional": true,
      "dependencies": {
        "buffer-crc32": "~0.2.3",
        "fd-slicer": "~1.1.0"
      }
    },
    "node_modules/zip-stream": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/zip-stream/-/zip-stream-4.1.0.tgz",
      "integrity": "sha512-zshzwQW7gG7hjpBlgeQP9RuyPGNxvJdzR8SUM3QhxCnLjWN2E7j3dOvpeDcQoETfHx0urRS7EtmVToql7YpU4A==",
      "dependencies": {
        "archiver-utils": "^2.1.0",
        "compress-commons": "^4.1.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/zip-stream/node_modules/readable-stream": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
      "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    }
  },
  "dependencies": {
    "@azure/msal-common": {
      "version": "15.2.0",
      "resolved": "https://registry.npmjs.org/@azure/msal-common/-/msal-common-15.2.0.tgz",
      "integrity": "sha512-HiYfGAKthisUYqHG1nImCf/uzcyS31wng3o+CycWLIM9chnYJ9Lk6jZ30Y6YiYYpTQ9+z/FGUpiKKekd3Arc0A=="
    },
    "@azure/msal-node": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/@azure/msal-node/-/msal-node-3.2.3.tgz",
      "integrity": "sha512-0eaPqBIWEAizeYiXdeHb09Iq0tvHJ17ztvNEaLdr/KcJJhJxbpkkEQf09DB+vKlFE0tzYi7j4rYLTXtES/InEQ==",
      "requires": {
        "@azure/msal-common": "15.2.0",
        "jsonwebtoken": "^9.0.0",
        "uuid": "^8.3.0"
      }
    },
    "@fast-csv/format": {
      "version": "4.3.5",
      "resolved": "https://registry.npmjs.org/@fast-csv/format/-/format-4.3.5.tgz",
      "integrity": "sha512-8iRn6QF3I8Ak78lNAa+Gdl5MJJBM5vRHivFtMRUWINdevNo00K7OXxS2PshawLKTejVwieIlPmK5YlLu6w4u8A==",
      "requires": {
        "@types/node": "^14.0.1",
        "lodash.escaperegexp": "^4.1.2",
        "lodash.isboolean": "^3.0.3",
        "lodash.isequal": "^4.5.0",
        "lodash.isfunction": "^3.0.9",
        "lodash.isnil": "^4.0.0"
      }
    },
    "@fast-csv/parse": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/@fast-csv/parse/-/parse-4.3.6.tgz",
      "integrity": "sha512-uRsLYksqpbDmWaSmzvJcuApSEe38+6NQZBUsuAyMZKqHxH0g1wcJgsKUvN3WC8tewaqFjBMMGrkHmC+T7k8LvA==",
      "requires": {
        "@types/node": "^14.0.1",
        "lodash.escaperegexp": "^4.1.2",
        "lodash.groupby": "^4.6.0",
        "lodash.isfunction": "^3.0.9",
        "lodash.isnil": "^4.0.0",
        "lodash.isundefined": "^3.0.1",
        "lodash.uniq": "^4.5.0"
      }
    },
    "@handlebars/allow-prototype-access": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@handlebars/allow-prototype-access/-/allow-prototype-access-1.0.3.tgz",
      "integrity": "sha512-UjIJnXYirTtSuRAC/3Sq+2XCRd3+JBW5+wQVu7cRCXisvEj/u/913QKH3D5+YVyJkz6cAyD70sQkaL5zvXql5Q==",
      "requires": {}
    },
    "@sindresorhus/is": {
      "version": "0.14.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-0.14.0.tgz",
      "integrity": "sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ=="
    },
    "@szmarczak/http-timer": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-1.1.2.tgz",
      "integrity": "sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==",
      "requires": {
        "defer-to-connect": "^1.0.1"
      }
    },
    "@types/node": {
      "version": "14.14.37",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-14.14.37.tgz",
      "integrity": "sha512-XYmBiy+ohOR4Lh5jE379fV2IU+6Jn4g5qASinhitfyO71b/sCo6MKsMLF5tc7Zf2CE8hViVQyYSobJNke8OvUw=="
    },
    "@xmldom/is-dom-node": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@xmldom/is-dom-node/-/is-dom-node-1.0.1.tgz",
      "integrity": "sha512-CJDxIgE5I0FH+ttq/Fxy6nRpxP70+e2O048EPe85J2use3XKdatVM7dDVvFNjQudd9B49NPoZ+8PG49zj4Er8Q=="
    },
    "@xmldom/xmldom": {
      "version": "0.8.10",
      "resolved": "https://registry.npmjs.org/@xmldom/xmldom/-/xmldom-0.8.10.tgz",
      "integrity": "sha512-2WALfTl4xo2SkGCYRt6rDTFfk9R1czmBvUQy12gK2KuRKIpWEhcbbzy8EZXtz/jkRqHX8bFEc6FC1HjX4TUWYw=="
    },
    "abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q=="
    },
    "abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "requires": {
        "event-target-shim": "^5.0.0"
      }
    },
    "accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "requires": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      }
    },
    "adler-32": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/adler-32/-/adler-32-1.2.0.tgz",
      "integrity": "sha1-aj5r8KY5ALoVZSgIyxXGgT0aXyU=",
      "requires": {
        "exit-on-epipe": "~1.0.1",
        "printj": "~1.1.0"
      }
    },
    "agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "requires": {
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "optional": true,
      "requires": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      }
    },
    "ansi-align": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/ansi-align/-/ansi-align-3.0.0.tgz",
      "integrity": "sha512-ZpClVKqXN3RGBmKibdfWzqCY4lnjEuoNzU5T0oEFpfd/z5qJHVarukridD4juLO2FXMiwUQxr9WqQtaYa8XRYw==",
      "requires": {
        "string-width": "^3.0.0"
      },
      "dependencies": {
        "string-width": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
          "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
          "requires": {
            "emoji-regex": "^7.0.1",
            "is-fullwidth-code-point": "^2.0.0",
            "strip-ansi": "^5.1.0"
          }
        }
      }
    },
    "ansi-regex": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.0.tgz",
      "integrity": "sha512-1apePfXM1UOSqw0o9IiFAovVz9M5S1Dg+4TrDwfMewQ6p/rmMueb7tWZjQ1rx4Loy1ArBggoqGpfqqdI4rondg=="
    },
    "ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "requires": {
        "color-convert": "^2.0.1"
      }
    },
    "anymatch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.1.tgz",
      "integrity": "sha512-mM8522psRCqzV+6LhomX5wgp25YVibjh8Wj23I5RPkPppSVSjyKD2A2mBJmWGa+KN7f2D6LNh9jkBCeyLktzjg==",
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha1-HjRA6RXwsSA9I3SOeO3XubW0PlY="
    },
    "archiver": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/archiver/-/archiver-5.3.0.tgz",
      "integrity": "sha512-iUw+oDwK0fgNpvveEsdQ0Ase6IIKztBJU2U0E9MzszMfmVVUyv1QJhS2ITW9ZCqx8dktAxVAjWWkKehuZE8OPg==",
      "requires": {
        "archiver-utils": "^2.1.0",
        "async": "^3.2.0",
        "buffer-crc32": "^0.2.1",
        "readable-stream": "^3.6.0",
        "readdir-glob": "^1.0.0",
        "tar-stream": "^2.2.0",
        "zip-stream": "^4.1.0"
      },
      "dependencies": {
        "readable-stream": {
          "version": "3.6.0",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
          "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        }
      }
    },
    "archiver-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/archiver-utils/-/archiver-utils-2.1.0.tgz",
      "integrity": "sha512-bEL/yUb/fNNiNTuUz979Z0Yg5L+LzLxGJz8x79lYmR54fmTIb6ob/hNQgkQnIUDWIFjZVQwl9Xs356I6BAMHfw==",
      "requires": {
        "glob": "^7.1.4",
        "graceful-fs": "^4.2.0",
        "lazystream": "^1.0.0",
        "lodash.defaults": "^4.2.0",
        "lodash.difference": "^4.5.0",
        "lodash.flatten": "^4.4.0",
        "lodash.isplainobject": "^4.0.6",
        "lodash.union": "^4.6.0",
        "normalize-path": "^3.0.0",
        "readable-stream": "^2.0.0"
      }
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
    },
    "arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug=="
    },
    "asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA=="
    },
    "asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "optional": true,
      "requires": {
        "safer-buffer": "~2.1.0"
      }
    },
    "assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
      "optional": true
    },
    "async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA=="
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k="
    },
    "aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=",
      "optional": true
    },
    "aws4": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.11.0.tgz",
      "integrity": "sha512-xh1Rl34h6Fi1DC2WWKfxUTVqRsNnr6LsKz2+hfwDxQJWmrx8+c7ylaqBMcHfl1U1r2dsifOvKX3LQuLNZ+XSvA==",
      "optional": true
    },
    "axios": {
      "version": "0.21.4",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.21.4.tgz",
      "integrity": "sha512-ut5vewkiu8jjGBdqpM44XxjuCjq9LAKeHVmoVfHVzy8eHgxxq8SbAVQNovDA8mVi05kP0Ea/n/UzcSHcTJQfNg==",
      "requires": {
        "follow-redirects": "^1.14.0"
      }
    },
    "axios-ntlm": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/axios-ntlm/-/axios-ntlm-1.4.2.tgz",
      "integrity": "sha512-8mS/uhmSWiRBiFKQvysPbX1eDBp6e+eXskmasuAXRHrn1Zjgji3O/oGXzXLw7tOhyD9nho1vGjZ2OYOD3cCvHg==",
      "requires": {
        "axios": "^1.6.1",
        "des.js": "^1.1.0",
        "dev-null": "^0.1.1",
        "js-md4": "^0.3.2"
      },
      "dependencies": {
        "axios": {
          "version": "1.7.7",
          "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.7.tgz",
          "integrity": "sha512-S4kL7XrjgBmvdGut0sN3yJxqYzrDOnivkBiN0OFs6hLiUam3UPvswUo0kqGyhqUZGEOytHyumEdXsAkgCOUf3Q==",
          "requires": {
            "follow-redirects": "^1.15.6",
            "form-data": "^4.0.0",
            "proxy-from-env": "^1.1.0"
          }
        },
        "form-data": {
          "version": "4.0.1",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.1.tgz",
          "integrity": "sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        }
      }
    },
    "balanced-match": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz",
      "integrity": "sha1-ibTRmasr7kneFk6gK4nORi1xt2c="
    },
    "base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA=="
    },
    "base64url": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/base64url/-/base64url-3.0.1.tgz",
      "integrity": "sha512-ir1UPr3dkwexU7FdV8qBBbNDRUhMmIekYMFZfi+C/sLNnRESKPl23nB9b2pltqfOQNnGzsDdId90AEtG5tCx4A=="
    },
    "basic-auth": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
      "requires": {
        "safe-buffer": "5.1.2"
      }
    },
    "bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
      "optional": true,
      "requires": {
        "tweetnacl": "^0.14.3"
      }
    },
    "bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ=="
    },
    "big-integer": {
      "version": "1.6.48",
      "resolved": "https://registry.npmjs.org/big-integer/-/big-integer-1.6.48.tgz",
      "integrity": "sha512-j51egjPa7/i+RdiRuJbPdJ2FIUYYPhvYLjzoYbcMMm62ooO6F94fETG4MTs46zPAF9Brs04OajboA/qTGuz78w=="
    },
    "bignumber.js": {
      "version": "9.0.0",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.0.0.tgz",
      "integrity": "sha512-t/OYhhJ2SD+YGBQcjY8GzzDHEk9f3nerxjtfa6tlMXfe7frs/WozhvCNoGvpM0P3bNf3Gq5ZRMlGr5f3r4/N8A=="
    },
    "binary": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/binary/-/binary-0.3.0.tgz",
      "integrity": "sha1-n2BVO8XOjDOG87VTz/R0Yq3sqnk=",
      "requires": {
        "buffers": "~0.1.1",
        "chainsaw": "~0.1.0"
      }
    },
    "binary-extensions": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.1.0.tgz",
      "integrity": "sha512-1Yj8h9Q+QDF5FzhMs/c9+6UntbD5MkRfRwac8DoEm9ZfUBZ7tZ55YcGVAzEe4bXsdQHEk+s9S5wsOKVdZrw0tQ=="
    },
    "bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "requires": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      },
      "dependencies": {
        "readable-stream": {
          "version": "3.6.0",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
          "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        }
      }
    },
    "blobjs": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/blobjs/-/blobjs-1.1.1.tgz",
      "integrity": "sha1-VEr224h7HGL0XqjgfOtFwTtZlao="
    },
    "bluebird": {
      "version": "3.4.7",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.4.7.tgz",
      "integrity": "sha1-9y12C+Cbf3bQjtj66Ysomo0F+rM="
    },
    "body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "requires": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "dependencies": {
        "on-finished": {
          "version": "2.4.1",
          "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
          "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
          "requires": {
            "ee-first": "1.1.1"
          }
        }
      }
    },
    "bootstrap": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/bootstrap/-/bootstrap-3.4.1.tgz",
      "integrity": "sha512-yN5oZVmRCwe5aKwzRj6736nSmKDX7pLYwsXiCj/EYmo16hODaBiT4En5btW/jhBF/seV+XMx3aYwukYC3A49DA==",
      "peer": true
    },
    "boxen": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/boxen/-/boxen-4.2.0.tgz",
      "integrity": "sha512-eB4uT9RGzg2odpER62bBwSLvUeGC+WbRjjyyFhGsKnc8wp/m0+hQsMUvUe3H2V0D5vw0nBdO1hCJoZo5mKeuIQ==",
      "requires": {
        "ansi-align": "^3.0.0",
        "camelcase": "^5.3.1",
        "chalk": "^3.0.0",
        "cli-boxes": "^2.2.0",
        "string-width": "^4.1.0",
        "term-size": "^2.1.0",
        "type-fest": "^0.8.1",
        "widest-line": "^3.1.0"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "requires": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "buffer-crc32": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
      "integrity": "sha1-DTM+PwDqxQqhRUq9MO+MKl2ackI="
    },
    "buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA=="
    },
    "buffer-from": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.1.tgz",
      "integrity": "sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A=="
    },
    "buffer-indexof-polyfill": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/buffer-indexof-polyfill/-/buffer-indexof-polyfill-1.0.2.tgz",
      "integrity": "sha512-I7wzHwA3t1/lwXQh+A5PbNvJxgfo5r3xulgpYDB5zckTu/Z9oUK9biouBKQUjEqzaz3HnAT6TYoovmE+GqSf7A=="
    },
    "buffers": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/buffers/-/buffers-0.1.1.tgz",
      "integrity": "sha1-skV5w77U1tOWru5tmorn9Ugqt7s="
    },
    "bunyan": {
      "version": "1.8.15",
      "resolved": "https://registry.npmjs.org/bunyan/-/bunyan-1.8.15.tgz",
      "integrity": "sha512-0tECWShh6wUysgucJcBAoYegf3JJoZWibxdqhTm7OHPeT42qdjkZ29QCMcKwbgU1kiH+auSIasNRXMLWXafXig==",
      "requires": {
        "dtrace-provider": "~0.8",
        "moment": "^2.19.3",
        "mv": "~2",
        "safe-json-stringify": "~1"
      }
    },
    "busboy": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-0.2.14.tgz",
      "integrity": "sha1-bCpiLvz0fFe7vh4qnDetNseSVFM=",
      "requires": {
        "dicer": "0.2.5",
        "readable-stream": "1.1.x"
      },
      "dependencies": {
        "isarray": {
          "version": "0.0.1",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
        },
        "readable-stream": {
          "version": "1.1.14",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz",
          "integrity": "sha1-fPTFTvZI44EwhMY23SB54WbAgdk=",
          "requires": {
            "core-util-is": "~1.0.0",
            "inherits": "~2.0.1",
            "isarray": "0.0.1",
            "string_decoder": "~0.10.x"
          }
        },
        "string_decoder": {
          "version": "0.10.31",
          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
          "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
        }
      }
    },
    "bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg=="
    },
    "cache-manager": {
      "version": "3.6.3",
      "resolved": "https://registry.npmjs.org/cache-manager/-/cache-manager-3.6.3.tgz",
      "integrity": "sha512-dS4DnV6c6cQcVH5OxzIU1XZaACXwvVIiUPkFytnRmLOACuBGv3GQgRQ1RJGRRw4/9DF14ZK2RFlZu1TUgDniMg==",
      "requires": {
        "async": "3.2.3",
        "lodash.clonedeep": "^4.5.0",
        "lru-cache": "6.0.0"
      },
      "dependencies": {
        "async": {
          "version": "3.2.3",
          "resolved": "https://registry.npmjs.org/async/-/async-3.2.3.tgz",
          "integrity": "sha512-spZRyzKL5l5BZQrr/6m/SqFdBN0q3OCI0f9rjfBzCMBIP4p75P620rR3gTmaksNOhmzgdxcaxdNfMy6anrbM0g=="
        }
      }
    },
    "cacheable-request": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-6.1.0.tgz",
      "integrity": "sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==",
      "requires": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^3.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^4.1.0",
        "responselike": "^1.0.2"
      },
      "dependencies": {
        "get-stream": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
          "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
          "requires": {
            "pump": "^3.0.0"
          }
        },
        "lowercase-keys": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
          "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA=="
        }
      }
    },
    "call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "requires": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      }
    },
    "call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "requires": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      }
    },
    "camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg=="
    },
    "caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=",
      "optional": true
    },
    "cfb": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/cfb/-/cfb-1.2.0.tgz",
      "integrity": "sha512-sXMvHsKCICVR3Naq+J556K+ExBo9n50iKl6LGarlnvuA2035uMlGA/qVrc0wQtow5P1vJEw9UyrKLCbtIKz+TQ==",
      "requires": {
        "adler-32": "~1.2.0",
        "crc-32": "~1.2.0",
        "printj": "~1.1.2"
      }
    },
    "chainsaw": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/chainsaw/-/chainsaw-0.1.0.tgz",
      "integrity": "sha1-XqtQsor+WAdNDVgpE4iCi15fvJg=",
      "requires": {
        "traverse": ">=0.3.0 <0.4"
      }
    },
    "chalk": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-3.0.0.tgz",
      "integrity": "sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==",
      "requires": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "dependencies": {
        "has-flag": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ=="
        },
        "supports-color": {
          "version": "7.2.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
          "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "chokidar": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.4.3.tgz",
      "integrity": "sha512-DtM3g7juCXQxFVSNPNByEC2+NImtBuxQQvWlHunpJIS5Ocr0lG306cC7FCi7cEA0fzmybPUIl4txBIobk1gGOQ==",
      "requires": {
        "anymatch": "~3.1.1",
        "braces": "~3.0.2",
        "fsevents": "~2.1.2",
        "glob-parent": "~5.1.0",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.5.0"
      }
    },
    "ci-info": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-2.0.0.tgz",
      "integrity": "sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ=="
    },
    "cli-boxes": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/cli-boxes/-/cli-boxes-2.2.1.tgz",
      "integrity": "sha512-y4coMcylgSCdVinjiDBuR8PCC2bLjyGTwEmPb9NHR/QaNU6EUOXcTY/s6VjGMD6ENSEaeQYHCY0GNGS5jfMwPw=="
    },
    "clone-response": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.2.tgz",
      "integrity": "sha1-0dyXOSAxTfZ/vrlCI7TuNQI56Ws=",
      "requires": {
        "mimic-response": "^1.0.0"
      }
    },
    "codepage": {
      "version": "1.14.0",
      "resolved": "https://registry.npmjs.org/codepage/-/codepage-1.14.0.tgz",
      "integrity": "sha1-jL4lSBMjVZ19MHVxsP/5HnodL5k=",
      "requires": {
        "commander": "~2.14.1",
        "exit-on-epipe": "~1.0.1"
      },
      "dependencies": {
        "commander": {
          "version": "2.14.1",
          "resolved": "https://registry.npmjs.org/commander/-/commander-2.14.1.tgz",
          "integrity": "sha512-+YR16o3rK53SmWHU3rEM3tPAh2rwb1yPcQX5irVn7mb0gXbwuCCrnkbV5+PBfETdfg1vui07nM6PCG1zndcjQw=="
        }
      }
    },
    "color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "requires": {
        "color-name": "~1.1.4"
      }
    },
    "color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "commander": {
      "version": "2.17.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.17.1.tgz",
      "integrity": "sha512-wPMUt6FnH2yzG95SA6mzjQOEKUU3aLaDEmzs1ti+1E9h+CsrZghRlqEM/EJ4KscsQVG8uNN4uVreUeT8+drlgg=="
    },
    "compress-commons": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/compress-commons/-/compress-commons-4.1.0.tgz",
      "integrity": "sha512-ofaaLqfraD1YRTkrRKPCrGJ1pFeDG/MVCkVVV2FNGeWquSlqw5wOrwOfPQ1xF2u+blpeWASie5EubHz+vsNIgA==",
      "requires": {
        "buffer-crc32": "^0.2.13",
        "crc32-stream": "^4.0.1",
        "normalize-path": "^3.0.0",
        "readable-stream": "^3.6.0"
      },
      "dependencies": {
        "readable-stream": {
          "version": "3.6.0",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
          "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        }
      }
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
    },
    "concat-stream": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
      "requires": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^2.2.2",
        "typedarray": "^0.0.6"
      }
    },
    "configstore": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/configstore/-/configstore-5.0.1.tgz",
      "integrity": "sha512-aMKprgk5YhBNyH25hj8wGt2+D52Sw1DRRIzqBwLp2Ya9mFmY8KPvvtvmna8SxVR9JMZ4kzMD68N22vlaRpkeFA==",
      "requires": {
        "dot-prop": "^5.2.0",
        "graceful-fs": "^4.1.2",
        "make-dir": "^3.0.0",
        "unique-string": "^2.0.0",
        "write-file-atomic": "^3.0.0",
        "xdg-basedir": "^4.0.0"
      }
    },
    "connect-flash": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/connect-flash/-/connect-flash-0.1.1.tgz",
      "integrity": "sha1-2GMPJtlaf4UfmVax6MxnMvO2qjA="
    },
    "content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "requires": {
        "safe-buffer": "5.2.1"
      },
      "dependencies": {
        "safe-buffer": {
          "version": "5.2.1",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
          "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
        }
      }
    },
    "content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA=="
    },
    "cookie": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.0.tgz",
      "integrity": "sha512-+Hp8fLp57wnUSt0tY0tHEXh4voZRDnoIrZPqlo3DPiI4y9lwg/jqx+1Om94/W6ZaPDOUbnjOt/99w66zk+l1Xg=="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw="
    },
    "core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
    },
    "crc-32": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.0.tgz",
      "integrity": "sha512-1uBwHxF+Y/4yF5G48fwnKq6QsIXheor3ZLPT80yGBV1oEUwpPojlEhQbWKVw1VwcTQyMGHK1/XMmTjmlsmTTGA==",
      "requires": {
        "exit-on-epipe": "~1.0.1",
        "printj": "~1.1.0"
      }
    },
    "crc32-stream": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/crc32-stream/-/crc32-stream-4.0.2.tgz",
      "integrity": "sha512-DxFZ/Hk473b/muq1VJ///PMNLj0ZMnzye9thBpmjpJKCc5eMgB95aK8zCGrGfQ90cWo561Te6HK9D+j4KPdM6w==",
      "requires": {
        "crc-32": "^1.2.0",
        "readable-stream": "^3.4.0"
      },
      "dependencies": {
        "readable-stream": {
          "version": "3.6.0",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
          "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        }
      }
    },
    "crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA=="
    },
    "dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
      "optional": true,
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "dayjs": {
      "version": "1.10.4",
      "resolved": "https://registry.npmjs.org/dayjs/-/dayjs-1.10.4.tgz",
      "integrity": "sha512-RI/Hh4kqRc1UKLOAf/T5zdMMX5DQIlDxwUe3wSyMMnEbGunnpENCdbUgM+dW7kXidZqCttBrmw7BhN4TMddkCw=="
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "decompress-response": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-3.3.0.tgz",
      "integrity": "sha1-gKTdMjdIOEv6JICDYirt7Jgq3/M=",
      "requires": {
        "mimic-response": "^1.0.0"
      }
    },
    "deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA=="
    },
    "defer-to-connect": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-1.1.3.tgz",
      "integrity": "sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ=="
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk="
    },
    "denque": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/denque/-/denque-1.5.0.tgz",
      "integrity": "sha512-CYiCSgIF1p6EUByQPlGkKnP1M9g0ZV3qMIrqMqZqdwazygIA/YP2vrbcyl1h/WppKJTdl1F85cXIle+394iDAQ=="
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "des.js": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/des.js/-/des.js-1.1.0.tgz",
      "integrity": "sha512-r17GxjhUCjSRy8aiJpr8/UadFIzMzJGexI3Nmz4ADi9LYSFx4gTBp80+NaX/YsXWWLhpZ7v/v/ubEc/bCNfKwg==",
      "requires": {
        "inherits": "^2.0.1",
        "minimalistic-assert": "^1.0.0"
      }
    },
    "destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg=="
    },
    "dev-null": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/dev-null/-/dev-null-0.1.1.tgz",
      "integrity": "sha512-nMNZG0zfMgmdv8S5O0TM5cpwNbGKRGPCxVsr0SmA3NZZy9CYBbuNLL0PD3Acx9e5LIUgwONXtM9kM6RlawPxEQ=="
    },
    "dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "requires": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "dicer": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/dicer/-/dicer-0.2.5.tgz",
      "integrity": "sha1-WZbAhrszIYyBLAkL3cCc0S+stw8=",
      "requires": {
        "readable-stream": "1.1.x",
        "streamsearch": "0.1.2"
      },
      "dependencies": {
        "isarray": {
          "version": "0.0.1",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
        },
        "readable-stream": {
          "version": "1.1.14",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.1.14.tgz",
          "integrity": "sha1-fPTFTvZI44EwhMY23SB54WbAgdk=",
          "requires": {
            "core-util-is": "~1.0.0",
            "inherits": "~2.0.1",
            "isarray": "0.0.1",
            "string_decoder": "~0.10.x"
          }
        },
        "string_decoder": {
          "version": "0.10.31",
          "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
          "integrity": "sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ="
        }
      }
    },
    "dot-prop": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/dot-prop/-/dot-prop-5.3.0.tgz",
      "integrity": "sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==",
      "requires": {
        "is-obj": "^2.0.0"
      }
    },
    "dotenv": {
      "version": "16.4.7",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ=="
    },
    "dtrace-provider": {
      "version": "0.8.8",
      "resolved": "https://registry.npmjs.org/dtrace-provider/-/dtrace-provider-0.8.8.tgz",
      "integrity": "sha512-b7Z7cNtHPhH9EJhNNbbeqTcXB8LGFFZhq1PGgEvpeHlzd36bhbdTWoE/Ba/YguqpBSlAPKnARWhVlhunCMwfxg==",
      "optional": true,
      "requires": {
        "nan": "^2.14.0"
      }
    },
    "dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "requires": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      }
    },
    "duplexer2": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer2/-/duplexer2-0.1.4.tgz",
      "integrity": "sha1-ixLauHjA1p4+eJEFFmKjL8a93ME=",
      "requires": {
        "readable-stream": "^2.0.2"
      }
    },
    "duplexer3": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/duplexer3/-/duplexer3-0.1.4.tgz",
      "integrity": "sha1-7gHdHKwO08vH/b6jfcCo8c4ALOI="
    },
    "ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
      "optional": true,
      "requires": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
    },
    "emoji-regex": {
      "version": "7.0.3",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-7.0.3.tgz",
      "integrity": "sha512-CwBLREIQ7LvYFB0WyRvwhq5N5qPhc6PMjD6bYggFlI5YyDgl+0vxq5VHbMOFqLg7hfWzmu8T5Z1QofhmTIhItA=="
    },
    "encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg=="
    },
    "end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "requires": {
        "once": "^1.4.0"
      }
    },
    "es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g=="
    },
    "es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw=="
    },
    "es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "requires": {
        "es-errors": "^1.3.0"
      }
    },
    "es6-promise": {
      "version": "4.2.8",
      "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
      "integrity": "sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w=="
    },
    "escape-goat": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/escape-goat/-/escape-goat-2.1.1.tgz",
      "integrity": "sha512-8/uIhbG12Csjy2JEW7D9pHbreaVaS/OpN3ycnyvElTdwM5n6GY6W6e2IPemfvGZeUMqZ9A/3GqIZMgKnBhAw/Q=="
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg=="
    },
    "event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ=="
    },
    "exceljs": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/exceljs/-/exceljs-4.4.0.tgz",
      "integrity": "sha512-XctvKaEMaj1Ii9oDOqbW/6e1gXknSY4g/aLCDicOXqBE4M0nRWkUu0PTp++UPNzoFY12BNHMfs/VadKIS6llvg==",
      "requires": {
        "archiver": "^5.0.0",
        "dayjs": "^1.8.34",
        "fast-csv": "^4.3.1",
        "jszip": "^3.10.1",
        "readable-stream": "^3.6.0",
        "saxes": "^5.0.1",
        "tmp": "^0.2.0",
        "unzipper": "^0.10.11",
        "uuid": "^8.3.0"
      },
      "dependencies": {
        "readable-stream": {
          "version": "3.6.0",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
          "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        },
        "unzipper": {
          "version": "0.10.11",
          "resolved": "https://registry.npmjs.org/unzipper/-/unzipper-0.10.11.tgz",
          "integrity": "sha512-+BrAq2oFqWod5IESRjL3S8baohbevGcVA+teAIOYWM3pDVdseogqbzhhvvmiyQrUNKFUnDMtELW3X8ykbyDCJw==",
          "requires": {
            "big-integer": "^1.6.17",
            "binary": "~0.3.0",
            "bluebird": "~3.4.1",
            "buffer-indexof-polyfill": "~1.0.0",
            "duplexer2": "~0.1.4",
            "fstream": "^1.0.12",
            "graceful-fs": "^4.2.2",
            "listenercount": "~1.0.1",
            "readable-stream": "~2.3.6",
            "setimmediate": "~1.0.4"
          },
          "dependencies": {
            "readable-stream": {
              "version": "2.3.7",
              "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
              "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
              "requires": {
                "core-util-is": "~1.0.0",
                "inherits": "~2.0.3",
                "isarray": "~1.0.0",
                "process-nextick-args": "~2.0.0",
                "safe-buffer": "~5.1.1",
                "string_decoder": "~1.1.1",
                "util-deprecate": "~1.0.1"
              }
            }
          }
        }
      }
    },
    "exit-on-epipe": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/exit-on-epipe/-/exit-on-epipe-1.0.1.tgz",
      "integrity": "sha512-h2z5mrROTxce56S+pnvAV890uu7ls7f1kEvVGJbw1OlFH3/mlJ5bkXu0KRyW94v37zzHPiUd55iLn3DA7TjWpw=="
    },
    "express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "requires": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "dependencies": {
        "cookie": {
          "version": "0.7.1",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
          "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w=="
        },
        "on-finished": {
          "version": "2.4.1",
          "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
          "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
          "requires": {
            "ee-first": "1.1.1"
          }
        },
        "safe-buffer": {
          "version": "5.2.1",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
          "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
        }
      }
    },
    "express-handlebars": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/express-handlebars/-/express-handlebars-5.2.0.tgz",
      "integrity": "sha512-kkty9fsldSuqDI/5ohU+EWNOWaPhJOPmVUZewMH+7522atj8QF8WbXzjZKBRloafxRcsPDG68jmfW7MGCYT/1g==",
      "requires": {
        "glob": "^7.1.6",
        "graceful-fs": "^4.2.4",
        "handlebars": "^4.7.6"
      }
    },
    "express-mysql-session": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/express-mysql-session/-/express-mysql-session-2.1.4.tgz",
      "integrity": "sha512-Fcq168xVI8jtIJLhVHLJvBCvJlHnFWCcPmtt93UrWH38T2YsB919KrMCCh57/YkECkfff/L5zTQ95K1DxfOixg==",
      "requires": {
        "debug": "4.1.1",
        "express-session": "1.17.0",
        "mysql": "2.18.1",
        "underscore": "1.9.2"
      },
      "dependencies": {
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "express-session": {
          "version": "1.17.0",
          "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.17.0.tgz",
          "integrity": "sha512-t4oX2z7uoSqATbMfsxWMbNjAL0T5zpvcJCk3Z9wnPPN7ibddhnmDZXHfEcoBMG2ojKXZoCyPMc5FbtK+G7SoDg==",
          "requires": {
            "cookie": "0.4.0",
            "cookie-signature": "1.0.6",
            "debug": "2.6.9",
            "depd": "~2.0.0",
            "on-headers": "~1.0.2",
            "parseurl": "~1.3.3",
            "safe-buffer": "5.2.0",
            "uid-safe": "~2.1.5"
          },
          "dependencies": {
            "debug": {
              "version": "2.6.9",
              "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
              "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
              "requires": {
                "ms": "2.0.0"
              }
            },
            "ms": {
              "version": "2.0.0",
              "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
              "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
            }
          }
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        },
        "safe-buffer": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.0.tgz",
          "integrity": "sha512-fZEwUGbVl7kouZs1jCdMLdt95hdIv0ZeHg6L7qPeciMZhZ+/gdesW4wgTARkrFWEpspjEATAzUGPG8N2jJiwbg=="
        }
      }
    },
    "express-session": {
      "version": "1.18.1",
      "resolved": "https://registry.npmjs.org/express-session/-/express-session-1.18.1.tgz",
      "integrity": "sha512-a5mtTqEaZvBCL9A9aqkrtfz+3SMDhOVUnjafjo+s7A9Txkq+SVX2DLvSp1Zrv4uCXa3lMSK3viWnh9Gg07PBUA==",
      "requires": {
        "cookie": "0.7.2",
        "cookie-signature": "1.0.7",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-headers": "~1.0.2",
        "parseurl": "~1.3.3",
        "safe-buffer": "5.2.1",
        "uid-safe": "~2.1.5"
      },
      "dependencies": {
        "cookie": {
          "version": "0.7.2",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
          "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w=="
        },
        "cookie-signature": {
          "version": "1.0.7",
          "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.7.tgz",
          "integrity": "sha512-NXdYc3dLr47pBkpUCHtKSwIOQXLVn8dZEuywboCOJY/osA0wFSLlSawr3KN8qXJEyX66FcONTH8EIlVuK0yyFA=="
        },
        "safe-buffer": {
          "version": "5.2.1",
          "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
          "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ=="
        }
      }
    },
    "express-validator": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-6.8.0.tgz",
      "integrity": "sha512-zEHxjly2Rx0vzJOgWJBCTk1vNNwxqp0a8S8WtKaW912oTmnQGSdh/XuuNzkt+tRBgw66z9u+ah+Sv8SH5SJyUQ==",
      "requires": {
        "lodash": "^4.17.20",
        "validator": "^13.5.1"
      }
    },
    "extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g=="
    },
    "extract-zip": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-1.7.0.tgz",
      "integrity": "sha512-xoh5G1W/PB0/27lXgMQyIhP5DSY/LhoCsOyZgb+6iMmRtCwVBo55uKaMoEYrDCKQhWvqEip5ZPKAc6eFNyf/MA==",
      "optional": true,
      "requires": {
        "concat-stream": "^1.6.2",
        "debug": "^2.6.9",
        "mkdirp": "^0.5.4",
        "yauzl": "^2.10.0"
      }
    },
    "extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha1-lpGEQOMEGnpBT4xS48V06zw+HgU=",
      "optional": true
    },
    "fast-csv": {
      "version": "4.3.6",
      "resolved": "https://registry.npmjs.org/fast-csv/-/fast-csv-4.3.6.tgz",
      "integrity": "sha512-2RNSpuwwsJGP0frGsOmTb9oUF+VkFSM4SyLTDgwf2ciHWTarN0lQTC+F2f/t5J9QjW+c65VFIAAu85GsvMIusw==",
      "requires": {
        "@fast-csv/format": "4.3.5",
        "@fast-csv/parse": "4.3.6"
      }
    },
    "fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "optional": true
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "optional": true
    },
    "fast-text-encoding": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/fast-text-encoding/-/fast-text-encoding-1.0.4.tgz",
      "integrity": "sha512-x6lDDm/tBAzX9kmsPcZsNbvDs3Zey3+scsxaZElS8xWLgUMAg/oFLeewfUz0mu1CblHhhsu15jGkraldkFh8KQ=="
    },
    "fd-slicer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
      "integrity": "sha1-JcfInLH5B3+IkbvmHY85Dq4lbx4=",
      "optional": true,
      "requires": {
        "pend": "~1.2.0"
      }
    },
    "file-saverjs": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/file-saverjs/-/file-saverjs-1.3.6.tgz",
      "integrity": "sha1-t6RU4Sb1bPcfy3AVm4NWFCZU544="
    },
    "fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "dependencies": {
        "on-finished": {
          "version": "2.4.1",
          "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
          "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
          "requires": {
            "ee-first": "1.1.1"
          }
        }
      }
    },
    "follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ=="
    },
    "forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=",
      "optional": true
    },
    "form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "optional": true,
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      }
    },
    "formidable": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-3.5.2.tgz",
      "integrity": "sha512-Jqc1btCy3QzRbJaICGwKcBfGWuLADRerLzDqi2NwSt/UkXLsHJw2TVResiaoBufHVHy9aSgClOHCeJsSsFLTbg==",
      "requires": {
        "dezalgo": "^1.0.4",
        "hexoid": "^2.0.0",
        "once": "^1.4.0"
      }
    },
    "forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow=="
    },
    "frac": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/frac/-/frac-1.1.2.tgz",
      "integrity": "sha512-w/XBfkibaTl3YDqASwfDUqkna4Z2p9cFSr1aHDt0WoMTECnRfBOv2WArlZILlqgWlmdIlALXGpM2AOhEk5W3IA=="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q=="
    },
    "fs-constants": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz",
      "integrity": "sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow=="
    },
    "fs-extra": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-1.0.0.tgz",
      "integrity": "sha1-zTzl9+fLYUWIP8rjGR6Yd/hYeVA=",
      "optional": true,
      "requires": {
        "graceful-fs": "^4.1.2",
        "jsonfile": "^2.1.0",
        "klaw": "^1.0.0"
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
    },
    "fsevents": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.1.3.tgz",
      "integrity": "sha512-Auw9a4AxqWpa9GUfj370BMPzzyncfBABW8Mab7BGWBYDj4Isgq+cDKtx0i6u9jcX9pQDnswsaaOTgTmA5pEjuQ==",
      "optional": true
    },
    "fstream": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/fstream/-/fstream-1.0.12.tgz",
      "integrity": "sha512-WvJ193OHa0GHPEL+AycEJgxvBEwyfRkN1vhjca23OaPVMCaLCXTd5qAu82AjTcgP1UJmytkOKb63Ypde7raDIg==",
      "requires": {
        "graceful-fs": "^4.1.2",
        "inherits": "~2.0.0",
        "mkdirp": ">=0.5 0",
        "rimraf": "2"
      }
    },
    "function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA=="
    },
    "gaxios": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-5.0.0.tgz",
      "integrity": "sha512-VD/yc5ln6XU8Ch1hyYY6kRMBE0Yc2np3fPyeJeYHhrPs1i8rgnsApPMWyrugkl7LLoSqpOJVBWlQIa87OAvt8Q==",
      "requires": {
        "abort-controller": "^3.0.0",
        "extend": "^3.0.2",
        "https-proxy-agent": "^5.0.0",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.7"
      },
      "dependencies": {
        "is-stream": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
          "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg=="
        }
      }
    },
    "gcp-metadata": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-5.0.0.tgz",
      "integrity": "sha512-gfwuX3yA3nNsHSWUL4KG90UulNiq922Ukj3wLTrcnX33BB7PwB1o0ubR8KVvXu9nJH+P5w1j2SQSNNqto+H0DA==",
      "requires": {
        "gaxios": "^5.0.0",
        "json-bigint": "^1.0.0"
      }
    },
    "generate-function": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
      "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",
      "requires": {
        "is-property": "^1.0.2"
      }
    },
    "get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "requires": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      }
    },
    "get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "requires": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      }
    },
    "get-stream": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
      "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
      "requires": {
        "pump": "^3.0.0"
      }
    },
    "getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
      "optional": true,
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "git": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/git/-/git-0.1.5.tgz",
      "integrity": "sha1-nvYt+T+FHCdUIUO/UtHGixAXyhU=",
      "requires": {
        "mime": "1.2.9"
      },
      "dependencies": {
        "mime": {
          "version": "1.2.9",
          "resolved": "https://registry.npmjs.org/mime/-/mime-1.2.9.tgz",
          "integrity": "sha1-AJzUCGe9Nd5SGzuWbwTi+NTRPQk="
        }
      }
    },
    "glob": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.6.tgz",
      "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.1.tgz",
      "integrity": "sha512-FnI+VGOpnlGHWZxthPGR+QhR78fuiK0sNLkHQv+bL9fQi57lNNdquIbna/WrfROrolq8GK5Ek6BiMwqL/voRYQ==",
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "global-dirs": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/global-dirs/-/global-dirs-2.0.1.tgz",
      "integrity": "sha512-5HqUqdhkEovj2Of/ms3IeS/EekcO54ytHRLV4PEY2rhRwrHXLQjeVEES0Lhka0xwNDtGYn58wyC4s5+MHsOO6A==",
      "requires": {
        "ini": "^1.3.5"
      }
    },
    "google-auth-library": {
      "version": "8.0.3",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-8.0.3.tgz",
      "integrity": "sha512-1eC6yaCrPfkv3bwtb3e0AOct7E7xR/uikDyXNo/j8Wd6a1ldRgAey5FmaDGNJnHNDPLtDiENQLYsA69eXOF5sA==",
      "requires": {
        "arrify": "^2.0.0",
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "fast-text-encoding": "^1.0.0",
        "gaxios": "^5.0.0",
        "gcp-metadata": "^5.0.0",
        "gtoken": "^6.0.0",
        "jws": "^4.0.0",
        "lru-cache": "^6.0.0"
      }
    },
    "google-p12-pem": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/google-p12-pem/-/google-p12-pem-4.0.0.tgz",
      "integrity": "sha512-lRTMn5ElBdDixv4a86bixejPSRk1boRtUowNepeKEVvYiFlkLuAJUVpEz6PfObDHYEKnZWq/9a2zC98xu62A9w==",
      "requires": {
        "node-forge": "^1.3.1"
      }
    },
    "googleapis": {
      "version": "104.0.0",
      "resolved": "https://registry.npmjs.org/googleapis/-/googleapis-104.0.0.tgz",
      "integrity": "sha512-5UItkob9BgC2S1Ekm16ZMiCxaD0bU0n3EauiNAMB7KejmlACDIfNnHiC0GUYUL9/fU2jrJx1ngY89oQP9ZAPeA==",
      "requires": {
        "google-auth-library": "^8.0.2",
        "googleapis-common": "^6.0.0"
      }
    },
    "googleapis-common": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/googleapis-common/-/googleapis-common-6.0.0.tgz",
      "integrity": "sha512-ieZouiuoyTHCckOgu7NU+n5UvA8kAzGTRRMQD+3bobCX9npnRvYDmTHZjM5lQLzf0cGz1xQ1ABCxGQ+xSsMkCw==",
      "requires": {
        "extend": "^3.0.2",
        "gaxios": "^4.0.0",
        "google-auth-library": "^8.0.2",
        "qs": "^6.7.0",
        "url-template": "^2.0.8",
        "uuid": "^8.0.0"
      },
      "dependencies": {
        "gaxios": {
          "version": "4.3.3",
          "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-4.3.3.tgz",
          "integrity": "sha512-gSaYYIO1Y3wUtdfHmjDUZ8LWaxJQpiavzbF5Kq53akSzvmVg0RfyOcFDbO1KJ/KCGRFz2qG+lS81F0nkr7cRJA==",
          "requires": {
            "abort-controller": "^3.0.0",
            "extend": "^3.0.2",
            "https-proxy-agent": "^5.0.0",
            "is-stream": "^2.0.0",
            "node-fetch": "^2.6.7"
          }
        },
        "is-stream": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
          "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg=="
        }
      }
    },
    "gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg=="
    },
    "got": {
      "version": "9.6.0",
      "resolved": "https://registry.npmjs.org/got/-/got-9.6.0.tgz",
      "integrity": "sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==",
      "requires": {
        "@sindresorhus/is": "^0.14.0",
        "@szmarczak/http-timer": "^1.1.2",
        "cacheable-request": "^6.0.0",
        "decompress-response": "^3.3.0",
        "duplexer3": "^0.1.4",
        "get-stream": "^4.1.0",
        "lowercase-keys": "^1.0.1",
        "mimic-response": "^1.0.1",
        "p-cancelable": "^1.0.0",
        "to-readable-stream": "^1.0.0",
        "url-parse-lax": "^3.0.0"
      }
    },
    "graceful-fs": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.4.tgz",
      "integrity": "sha512-WjKPNJF79dtJAVniUlGGWHYGz2jWxT6VhN/4m1NdkbZ2nOsEF+cI1Edgql5zCRhs/VsQYRvrXctxktVXZUkixw=="
    },
    "gtoken": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-6.0.1.tgz",
      "integrity": "sha512-J0vebk6u6i4rLTM0lQq25SdusCLMvujYNZeAouyPvSbGlcjw7P8L3W9INIFnlXUx+AUD7TDoM1mgdhzH+XX7DQ==",
      "requires": {
        "gaxios": "^4.0.0",
        "google-p12-pem": "^4.0.0",
        "jws": "^4.0.0"
      },
      "dependencies": {
        "gaxios": {
          "version": "4.3.3",
          "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-4.3.3.tgz",
          "integrity": "sha512-gSaYYIO1Y3wUtdfHmjDUZ8LWaxJQpiavzbF5Kq53akSzvmVg0RfyOcFDbO1KJ/KCGRFz2qG+lS81F0nkr7cRJA==",
          "requires": {
            "abort-controller": "^3.0.0",
            "extend": "^3.0.2",
            "https-proxy-agent": "^5.0.0",
            "is-stream": "^2.0.0",
            "node-fetch": "^2.6.7"
          }
        },
        "is-stream": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
          "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg=="
        }
      }
    },
    "handlebars": {
      "version": "4.7.6",
      "resolved": "https://registry.npmjs.org/handlebars/-/handlebars-4.7.6.tgz",
      "integrity": "sha512-1f2BACcBfiwAfStCKZNrUCgqNZkGsAT7UM3kkYtXuLo0KnaVfjKOyf7PRzB6++aK9STyT1Pd2ZCPe3EGOXleXA==",
      "requires": {
        "minimist": "^1.2.5",
        "neo-async": "^2.6.0",
        "source-map": "^0.6.1",
        "uglify-js": "^3.1.4",
        "wordwrap": "^1.0.0"
      }
    },
    "har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=",
      "optional": true
    },
    "har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "optional": true,
      "requires": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      }
    },
    "has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0="
    },
    "has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ=="
    },
    "has-yarn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/has-yarn/-/has-yarn-2.1.0.tgz",
      "integrity": "sha512-UqBRqi4ju7T+TqGNdqAO0PaSVGsDGJUBQvk9eUWNGRY1CFGDzYhLWoM7JQEemnlvVcv/YEmc2wNW8BC24EnUsw=="
    },
    "hasha": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/hasha/-/hasha-2.2.0.tgz",
      "integrity": "sha1-eNfL/B5tZjA/55g3NlmEUXsvbuE=",
      "optional": true,
      "requires": {
        "is-stream": "^1.0.1",
        "pinkie-promise": "^2.0.0"
      }
    },
    "hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "requires": {
        "function-bind": "^1.1.2"
      }
    },
    "hexoid": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/hexoid/-/hexoid-2.0.0.tgz",
      "integrity": "sha512-qlspKUK7IlSQv2o+5I7yhUd7TxlOG2Vr5LTa3ve2XSNVKAL/n/u/7KLvKmFNimomDIKvZFXWHv0T12mv7rT8Aw=="
    },
    "html-pdf": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/html-pdf/-/html-pdf-3.0.1.tgz",
      "integrity": "sha512-CKNSacmQn+CKJ2GNfT4UYKaPy/T3Ndj82yJ2aju/UPmnvWNjIpyumqRqkFU0mwT6BTHBFhFGTnXN8dBn4Bdj0Q==",
      "requires": {
        "phantomjs-prebuilt": "^2.1.16"
      }
    },
    "http-cache-semantics": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ=="
    },
    "http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "requires": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      }
    },
    "http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
      "optional": true,
      "requires": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      }
    },
    "https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "requires": {
        "agent-base": "6",
        "debug": "4"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.4",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
          "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA=="
    },
    "ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha1-SMptcvbGo68Aqa1K5odr44ieKwk="
    },
    "immediate": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz",
      "integrity": "sha1-nbHb0Pr43m++D13V5Wu2BigN5ps="
    },
    "import-lazy": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/import-lazy/-/import-lazy-2.1.0.tgz",
      "integrity": "sha1-BWmOPUXIjo1+nZLLBYTnfwlvPkM="
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o="
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ini": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.6.tgz",
      "integrity": "sha512-IZUoxEjNjubzrmvzZU4lKP7OnYmX72XRl3sqkfJhBKweKi5rnGi5+IUdlj/H1M+Ip5JQ1WzaDMOBRY90Ajc5jg=="
    },
    "ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-ci": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-ci/-/is-ci-2.0.0.tgz",
      "integrity": "sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==",
      "requires": {
        "ci-info": "^2.0.0"
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI="
    },
    "is-fullwidth-code-point": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
      "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8="
    },
    "is-glob": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.1.tgz",
      "integrity": "sha512-5G0tKtBTFImOqDnLB2hG6Bp2qcKEFduo4tZu9MT/H6NQv/ghhy30o55ufafxJ/LdH79LLs2Kfrn85TLKyA7BUg==",
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-installed-globally": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-installed-globally/-/is-installed-globally-0.3.2.tgz",
      "integrity": "sha512-wZ8x1js7Ia0kecP/CHM/3ABkAmujX7WPvQk6uu3Fly/Mk44pySulQpnHG46OMjHGXApINnV4QhY3SWnECO2z5g==",
      "requires": {
        "global-dirs": "^2.0.1",
        "is-path-inside": "^3.0.1"
      }
    },
    "is-npm": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-npm/-/is-npm-4.0.0.tgz",
      "integrity": "sha512-96ECIfh9xtDDlPylNPXhzjsykHsMJZ18ASpaWzQyBr4YRTcVjUvzaHayDAES2oU/3KpljhHUjtSRNiDwi0F0ig=="
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="
    },
    "is-obj": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-2.0.0.tgz",
      "integrity": "sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w=="
    },
    "is-path-inside": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.2.tgz",
      "integrity": "sha512-/2UGPSgmtqwo1ktx8NDHjuPwZWmHhO+gj0f93EkhLB5RgW9RZevWYYlIkS6zePc6U2WpOdQYIwHe9YC4DWEBVg=="
    },
    "is-property": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",
      "integrity": "sha1-V/4cTkhHTt1lsJkR8msc1Ald2oQ="
    },
    "is-stream": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
      "integrity": "sha1-EtSj3U5o4Lec6428hBc66A2RykQ=",
      "optional": true
    },
    "is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo="
    },
    "is-yarn-global": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/is-yarn-global/-/is-yarn-global-0.3.0.tgz",
      "integrity": "sha512-VjSeb/lHmkoyd8ryPVIKvOCn4D1koMqY+vqyjjUfc3xyKtP4dYOxM44sZrnqQSzSds3xyOrUTLTC9LVCVgLngw=="
    },
    "isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
      "optional": true
    },
    "isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
      "optional": true
    },
    "jquery": {
      "version": "3.7.1",
      "resolved": "https://registry.npmjs.org/jquery/-/jquery-3.7.1.tgz",
      "integrity": "sha512-m4avr8yL8kmFN8psrbFFFmB/If14iN5o9nw/NgnnM+kybDJpRsAynV2BsfpTYrTRysYUdADVD7CkUUizgkpLfg==",
      "peer": true
    },
    "js-md4": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/js-md4/-/js-md4-0.3.2.tgz",
      "integrity": "sha512-/GDnfQYsltsjRswQhN9fhv3EMw2sCpUdrdxyWDOUK7eyD++r3gRhzgiQgc/x4MAv2i1iuQ4lxO5mvqM3vj4bwA=="
    },
    "jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
      "optional": true
    },
    "json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "requires": {
        "bignumber.js": "^9.0.0"
      }
    },
    "json-buffer": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.0.tgz",
      "integrity": "sha1-Wx85evx11ne96Lz8Dkfh+aPZqJg="
    },
    "json-schema": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.2.3.tgz",
      "integrity": "sha1-tIDIkuWaLwWVTOcnvT8qTogvnhM=",
      "optional": true
    },
    "json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "optional": true
    },
    "json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=",
      "optional": true
    },
    "jsonfile": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-2.4.0.tgz",
      "integrity": "sha1-NzaitCi4e72gzIO1P6PWM6NcKug=",
      "optional": true,
      "requires": {
        "graceful-fs": "^4.1.6"
      }
    },
    "jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "requires": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "dependencies": {
        "jwa": {
          "version": "1.4.1",
          "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
          "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
          "requires": {
            "buffer-equal-constant-time": "1.0.1",
            "ecdsa-sig-formatter": "1.0.11",
            "safe-buffer": "^5.0.1"
          }
        },
        "jws": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
          "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
          "requires": {
            "jwa": "^1.4.1",
            "safe-buffer": "^5.0.1"
          }
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        },
        "semver": {
          "version": "7.7.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
          "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA=="
        }
      }
    },
    "jsprim": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.1.tgz",
      "integrity": "sha1-MT5mvB5cwG5Di8G3SZwuXFastqI=",
      "optional": true,
      "requires": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.2.3",
        "verror": "1.10.0"
      }
    },
    "jszip": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz",
      "integrity": "sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==",
      "requires": {
        "lie": "~3.3.0",
        "pako": "~1.0.2",
        "readable-stream": "~2.3.6",
        "setimmediate": "^1.0.5"
      }
    },
    "jwa": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
      "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
      "requires": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "requires": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "kew": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/kew/-/kew-0.7.0.tgz",
      "integrity": "sha1-edk9LTM2PW/dKXCzNdkUGtWR15s=",
      "optional": true
    },
    "keyv": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-3.1.0.tgz",
      "integrity": "sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==",
      "requires": {
        "json-buffer": "3.0.0"
      }
    },
    "klaw": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/klaw/-/klaw-1.3.1.tgz",
      "integrity": "sha1-QIhDO0azsbolnXh4XY6W9zugJDk=",
      "optional": true,
      "requires": {
        "graceful-fs": "^4.1.9"
      }
    },
    "latest-version": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/latest-version/-/latest-version-5.1.0.tgz",
      "integrity": "sha512-weT+r0kTkRQdCdYCNtkMwWXQTMEswKrFBkm4ckQOMVhhqhIMI1UT2hMj+1iigIhgSZm5gTmrRXBNoGUgaTY1xA==",
      "requires": {
        "package-json": "^6.3.0"
      }
    },
    "lazystream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/lazystream/-/lazystream-1.0.0.tgz",
      "integrity": "sha1-9plf4PggOS9hOWvolGJAe7dxaOQ=",
      "requires": {
        "readable-stream": "^2.0.5"
      }
    },
    "lie": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/lie/-/lie-3.3.0.tgz",
      "integrity": "sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==",
      "requires": {
        "immediate": "~3.0.5"
      }
    },
    "linq": {
      "version": "3.2.3",
      "resolved": "https://registry.npmjs.org/linq/-/linq-3.2.3.tgz",
      "integrity": "sha512-OI48ncDVi29Hc4g5+hPd58AkI8YtLUFkZWWvvyC+w1+j8PsDi28tLZnbv3+8PvxSiJUEQDihkQjrIrPkFzEFqQ=="
    },
    "listenercount": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/listenercount/-/listenercount-1.0.1.tgz",
      "integrity": "sha1-hMinKrWcRyUyFIDJdeZQg0LnCTc="
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lodash.clonedeep": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ=="
    },
    "lodash.defaults": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
      "integrity": "sha1-0JF4cW/+pN3p5ft7N/bwgCJ0WAw="
    },
    "lodash.difference": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.difference/-/lodash.difference-4.5.0.tgz",
      "integrity": "sha1-nMtOUF1Ia5FlE0V3KIWi3yf9AXw="
    },
    "lodash.escaperegexp": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.escaperegexp/-/lodash.escaperegexp-4.1.2.tgz",
      "integrity": "sha1-ZHYsSGGAglGKw99Mz11YhtriA0c="
    },
    "lodash.flatten": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz",
      "integrity": "sha1-8xwiIlqWMtK7+OSt2+8kCqdlph8="
    },
    "lodash.groupby": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/lodash.groupby/-/lodash.groupby-4.6.0.tgz",
      "integrity": "sha1-Cwih3PaDl8OXhVwyOXg4Mt90A9E="
    },
    "lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w=="
    },
    "lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha1-bC4XHbKiV82WgC/UOwGyDV9YcPY="
    },
    "lodash.isequal": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.isequal/-/lodash.isequal-4.5.0.tgz",
      "integrity": "sha1-QVxEePK8wwEgwizhDtMib30+GOA="
    },
    "lodash.isfunction": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/lodash.isfunction/-/lodash.isfunction-3.0.9.tgz",
      "integrity": "sha512-AirXNj15uRIMMPihnkInB4i3NHeb4iBtNg9WRWuK2o31S+ePwwNmDPaTL3o7dTJ+VXNZim7rFs4rxN4YU1oUJw=="
    },
    "lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA=="
    },
    "lodash.isnil": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/lodash.isnil/-/lodash.isnil-4.0.0.tgz",
      "integrity": "sha1-SeKM1VkBNFjIFMVHnTxmOiG/qmw="
    },
    "lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw=="
    },
    "lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha1-fFJqUtibRcRcxpC4gWO+BJf1UMs="
    },
    "lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
    },
    "lodash.isundefined": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isundefined/-/lodash.isundefined-3.0.1.tgz",
      "integrity": "sha1-I+89lTVWUgOmbO/VuDD4SJEa+0g="
    },
    "lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg=="
    },
    "lodash.union": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/lodash.union/-/lodash.union-4.6.0.tgz",
      "integrity": "sha1-SLtQiECfFvGCFmZkHETdGqrjzYg="
    },
    "lodash.uniq": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz",
      "integrity": "sha1-0CJTc662Uq3BvILklFM5qEJ1R3M="
    },
    "long": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/long/-/long-4.0.0.tgz",
      "integrity": "sha512-XsP+KhQif4bjX1kbuSiySJFNAehNxgLb6hPRGJ9QsUr8ajHkuXGdrHmFUTUUXhDwVX2R5bY4JNZEwbUiMhV+MA=="
    },
    "lowercase-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-1.0.1.tgz",
      "integrity": "sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA=="
    },
    "lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "requires": {
        "yallist": "^4.0.0"
      }
    },
    "luxon": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/luxon/-/luxon-3.6.1.tgz",
      "integrity": "sha512-tJLxrKJhO2ukZ5z0gyjY1zPh3Rh88Ej9P7jNrZiHMUXHae1yvI2imgOZtL1TO8TW6biMMKfTtAOoEJANgtWBMQ=="
    },
    "make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "requires": {
        "semver": "^6.0.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
        }
      }
    },
    "math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g=="
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g="
    },
    "memorystore": {
      "version": "1.6.6",
      "resolved": "https://registry.npmjs.org/memorystore/-/memorystore-1.6.6.tgz",
      "integrity": "sha512-EbLl1xg9+DlnjXkZK/eMUoWyhZ1IxcWMpSuFyqyA/Z4BNuH7BR+E0yC40WbLZZ6G8LxHiUZ2DPhqV8DR8+9UQQ==",
      "requires": {
        "debug": "^4.3.0",
        "lru-cache": "^4.0.3"
      },
      "dependencies": {
        "debug": {
          "version": "4.3.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.1.tgz",
          "integrity": "sha512-doEwdvm4PCeK4K3RQN2ZC2BYUBaxwLARCqZmMjtF8a51J2Rb0xpVloFRnCODwqjpwnAoao4pelN8l3RJdv3gRQ==",
          "requires": {
            "ms": "2.1.2"
          }
        },
        "lru-cache": {
          "version": "4.1.5",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
          "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
          "requires": {
            "pseudomap": "^1.0.2",
            "yallist": "^2.1.2"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        },
        "yallist": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
          "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
        }
      }
    },
    "merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ=="
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4="
    },
    "mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
    },
    "mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg=="
    },
    "mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "requires": {
        "mime-db": "1.52.0"
      }
    },
    "mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ=="
    },
    "minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A=="
    },
    "minimatch": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minimist": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.5.tgz",
      "integrity": "sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw=="
    },
    "mkdirp": {
      "version": "0.5.5",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.5.tgz",
      "integrity": "sha512-NKmAlESf6jMGym1++R0Ra7wvhV+wFW63FaSOFPwRahvea0gMUcGUhVeAg/0BC0wiv9ih5NYPB1Wn1UEI1/L+xQ==",
      "requires": {
        "minimist": "^1.2.5"
      }
    },
    "moment": {
      "version": "2.29.1",
      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.1.tgz",
      "integrity": "sha512-kHmoybcPV8Sqy59DwNDY3Jefr64lK/by/da0ViFcuA4DH0vQg5Q6Ze5VimxkfQNSC+Mls/Kx53s7TjP1RhFEDQ=="
    },
    "morgan": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz",
      "integrity": "sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==",
      "requires": {
        "basic-auth": "~2.0.1",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-finished": "~2.3.0",
        "on-headers": "~1.0.2"
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "multer": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.2.tgz",
      "integrity": "sha512-xY8pX7V+ybyUpbYMxtjM9KAiD9ixtg5/JkeKUTD6xilfDv0vzzOFcCp4Ljb1UU3tSOM3VTZtKo63OmzOrGi3Cg==",
      "requires": {
        "append-field": "^1.0.0",
        "busboy": "^0.2.11",
        "concat-stream": "^1.5.2",
        "mkdirp": "^0.5.1",
        "object-assign": "^4.1.1",
        "on-finished": "^2.3.0",
        "type-is": "^1.6.4",
        "xtend": "^4.0.0"
      }
    },
    "mv": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/mv/-/mv-2.1.1.tgz",
      "integrity": "sha512-at/ZndSy3xEGJ8i0ygALh8ru9qy7gWW1cmkaqBN29JmMlIvM//MEO9y1sk/avxuwnPcfhkejkLsuPxH81BrkSg==",
      "optional": true,
      "requires": {
        "mkdirp": "~0.5.1",
        "ncp": "~2.0.0",
        "rimraf": "~2.4.0"
      },
      "dependencies": {
        "glob": {
          "version": "6.0.4",
          "resolved": "https://registry.npmjs.org/glob/-/glob-6.0.4.tgz",
          "integrity": "sha512-MKZeRNyYZAVVVG1oZeLaWie1uweH40m9AZwIwxyPbTSX4hHrVYSzLg0Ro5Z5R7XKkIX+Cc6oD1rqeDJnwsB8/A==",
          "optional": true,
          "requires": {
            "inflight": "^1.0.4",
            "inherits": "2",
            "minimatch": "2 || 3",
            "once": "^1.3.0",
            "path-is-absolute": "^1.0.0"
          }
        },
        "rimraf": {
          "version": "2.4.5",
          "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.4.5.tgz",
          "integrity": "sha512-J5xnxTyqaiw06JjMftq7L9ouA448dw/E7dKghkP9WpKNuwmARNNg+Gk8/u5ryb9N/Yo2+z3MCwuqFK/+qPOPfQ==",
          "optional": true,
          "requires": {
            "glob": "^6.0.1"
          }
        }
      }
    },
    "mysql": {
      "version": "2.18.1",
      "resolved": "https://registry.npmjs.org/mysql/-/mysql-2.18.1.tgz",
      "integrity": "sha512-Bca+gk2YWmqp2Uf6k5NFEurwY/0td0cpebAucFpY/3jhrwrVGuxU2uQFCHjU19SJfje0yQvi+rVWdq78hR5lig==",
      "requires": {
        "bignumber.js": "9.0.0",
        "readable-stream": "2.3.7",
        "safe-buffer": "5.1.2",
        "sqlstring": "2.3.1"
      }
    },
    "mysql2": {
      "version": "2.2.5",
      "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-2.2.5.tgz",
      "integrity": "sha512-XRqPNxcZTpmFdXbJqb+/CtYVLCx14x1RTeNMD4954L331APu75IC74GDqnZMEt1kwaXy6TySo55rF2F3YJS78g==",
      "requires": {
        "denque": "^1.4.1",
        "generate-function": "^2.3.1",
        "iconv-lite": "^0.6.2",
        "long": "^4.0.0",
        "lru-cache": "^6.0.0",
        "named-placeholders": "^1.1.2",
        "seq-queue": "^0.0.5",
        "sqlstring": "^2.3.2"
      },
      "dependencies": {
        "iconv-lite": {
          "version": "0.6.2",
          "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.2.tgz",
          "integrity": "sha512-2y91h5OpQlolefMPmUlivelittSWy0rP+oYVpn6A7GwVHNE8AWzoYOBNmlwks3LobaJxgHCYZAnyNo2GgpNRNQ==",
          "requires": {
            "safer-buffer": ">= 2.1.2 < 3.0.0"
          }
        },
        "sqlstring": {
          "version": "2.3.2",
          "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.2.tgz",
          "integrity": "sha512-vF4ZbYdKS8OnoJAWBmMxCQDkiEBkGQYU7UZPtL8flbDRSNkhaXvRJ279ZtI6M+zDaQovVU4tuRgzK5fVhvFAhg=="
        }
      }
    },
    "named-placeholders": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.2.tgz",
      "integrity": "sha512-wiFWqxoLL3PGVReSZpjLVxyJ1bRqe+KKJVbr4hGs1KWfTZTQyezHFBbuKj9hsizHyGV2ne7EMjHdxEGAybD5SA==",
      "requires": {
        "lru-cache": "^4.1.3"
      },
      "dependencies": {
        "lru-cache": {
          "version": "4.1.5",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
          "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
          "requires": {
            "pseudomap": "^1.0.2",
            "yallist": "^2.1.2"
          }
        },
        "yallist": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
          "integrity": "sha1-HBH5IY8HYImkfdUS+TxmmaaoHVI="
        }
      }
    },
    "nan": {
      "version": "2.22.2",
      "resolved": "https://registry.npmjs.org/nan/-/nan-2.22.2.tgz",
      "integrity": "sha512-DANghxFkS1plDdRsX0X9pm0Z6SJNN6gBdtXfanwoZ8hooC5gosGFSBGRYHUVPz1asKA/kMRqDRdHrluZ61SpBQ==",
      "optional": true
    },
    "ncp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ncp/-/ncp-2.0.0.tgz",
      "integrity": "sha512-zIdGUrPRFTUELUvr3Gmc7KZ2Sw/h1PiVM0Af/oHB6zgnV1ikqSfRk+TOufi79aHYCW3NiOXmr1BP5nWbzojLaA==",
      "optional": true
    },
    "negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg=="
    },
    "neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw=="
    },
    "node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA=="
    },
    "node-jose": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/node-jose/-/node-jose-2.2.0.tgz",
      "integrity": "sha512-XPCvJRr94SjLrSIm4pbYHKLEaOsDvJCpyFw/6V/KK/IXmyZ6SFBzAUDO9HQf4DB/nTEFcRGH87mNciOP23kFjw==",
      "requires": {
        "base64url": "^3.0.1",
        "buffer": "^6.0.3",
        "es6-promise": "^4.2.8",
        "lodash": "^4.17.21",
        "long": "^5.2.0",
        "node-forge": "^1.2.1",
        "pako": "^2.0.4",
        "process": "^0.11.10",
        "uuid": "^9.0.0"
      },
      "dependencies": {
        "buffer": {
          "version": "6.0.3",
          "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
          "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
          "requires": {
            "base64-js": "^1.3.1",
            "ieee754": "^1.2.1"
          }
        },
        "long": {
          "version": "5.3.1",
          "resolved": "https://registry.npmjs.org/long/-/long-5.3.1.tgz",
          "integrity": "sha512-ka87Jz3gcx/I7Hal94xaN2tZEOPoUOEVftkQqZx2EeQRN7LGdfLlI3FvZ+7WDplm+vK2Urx9ULrvSowtdCieng=="
        },
        "pako": {
          "version": "2.1.0",
          "resolved": "https://registry.npmjs.org/pako/-/pako-2.1.0.tgz",
          "integrity": "sha512-w+eufiZ1WuJYgPXbV/PO3NCMEc3xqylkKHzp8bxp1uW4qaSNQUkwmLLEc3kKsfz8lpV1F8Ht3U1Cm+9Srog2ug=="
        },
        "uuid": {
          "version": "9.0.1",
          "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
          "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA=="
        }
      }
    },
    "nodemailer": {
      "version": "6.7.7",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.7.7.tgz",
      "integrity": "sha512-pOLC/s+2I1EXuSqO5Wa34i3kXZG3gugDssH+ZNCevHad65tc8vQlCQpOLaUjopvkRQKm2Cki2aME7fEOPRy3bA=="
    },
    "nodemon": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.6.tgz",
      "integrity": "sha512-4I3YDSKXg6ltYpcnZeHompqac4E6JeAMpGm8tJnB9Y3T0ehasLa4139dJOcCrB93HHrUMsCrKtoAlXTqT5n4AQ==",
      "requires": {
        "chokidar": "^3.2.2",
        "debug": "^3.2.6",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.0.4",
        "pstree.remy": "^1.1.7",
        "semver": "^5.7.1",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.3",
        "update-notifier": "^4.1.0"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.7",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
          "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "nopt": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-1.0.10.tgz",
      "integrity": "sha1-bd0hvSoxQXuScn3Vhfim83YI6+4=",
      "requires": {
        "abbrev": "1"
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="
    },
    "normalize-url": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-4.5.0.tgz",
      "integrity": "sha512-2s47yzUxdexf1OhyRi4Em83iQk0aPvwTddtFz4hnSSw9dCEsLEGf6SwIO8ss/19S9iBb5sJaOuTvTGDeZI00BQ=="
    },
    "numeros_a_letras": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/numeros_a_letras/-/numeros_a_letras-1.0.7.tgz",
      "integrity": "sha512-1fJUTETNmiDRQTBQBwWsdfLpk9AKLutRp9H5Pmu63TAMKTH+rPsaC95qxejw0gnt8ONEJSDlO4rehxFh6Hq7mA=="
    },
    "oauth": {
      "version": "0.9.15",
      "resolved": "https://registry.npmjs.org/oauth/-/oauth-0.9.15.tgz",
      "integrity": "sha512-a5ERWK1kh38ExDEfoO6qUHJb32rd7aYmPHuyCu3Fta/cnICvYmgd2uhuKXvPD+PXB+gCEYYEaQdIRAjCOwAKNA=="
    },
    "oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
      "optional": true
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
    },
    "object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew=="
    },
    "on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA=="
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "requires": {
        "wrappy": "1"
      }
    },
    "p-cancelable": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-1.1.0.tgz",
      "integrity": "sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw=="
    },
    "package-json": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/package-json/-/package-json-6.5.0.tgz",
      "integrity": "sha512-k3bdm2n25tkyxcjSKzB5x8kfVxlMdgsbPr0GkZcwHsLpba6cBjqCt1KlcChKEvxHIcTB1FVMuwoijZ26xex5MQ==",
      "requires": {
        "got": "^9.6.0",
        "registry-auth-token": "^4.0.0",
        "registry-url": "^5.0.0",
        "semver": "^6.2.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
        }
      }
    },
    "pako": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
      "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw=="
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "passport": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/passport/-/passport-0.4.1.tgz",
      "integrity": "sha512-IxXgZZs8d7uFSt3eqNjM9NQ3g3uQCW5avD8mRNoXV99Yig50vjuaez6dQK2qC0kVWPRTujxY0dWgGfT09adjYg==",
      "requires": {
        "passport-strategy": "1.x.x",
        "pause": "0.0.1"
      }
    },
    "passport-azure-ad": {
      "version": "4.3.5",
      "resolved": "https://registry.npmjs.org/passport-azure-ad/-/passport-azure-ad-4.3.5.tgz",
      "integrity": "sha512-LBpXEght7hCMuMNFK4oegdN0uPBa3lpDMy71zQoB0zPg1RrGwdzpjwTiN1WzN0hY77fLyjz9tBr3TGAxnSgtEg==",
      "requires": {
        "async": "^3.2.3",
        "base64url": "^3.0.0",
        "bunyan": "^1.8.14",
        "cache-manager": "^3.6.1",
        "https-proxy-agent": "^5.0.0",
        "jws": "^3.1.3",
        "lodash": "^4.11.2",
        "node-jose": "^2.2.0",
        "oauth": "0.9.15",
        "passport": "^0.6.0",
        "valid-url": "^1.0.6"
      },
      "dependencies": {
        "jwa": {
          "version": "1.4.1",
          "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
          "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
          "requires": {
            "buffer-equal-constant-time": "1.0.1",
            "ecdsa-sig-formatter": "1.0.11",
            "safe-buffer": "^5.0.1"
          }
        },
        "jws": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
          "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
          "requires": {
            "jwa": "^1.4.1",
            "safe-buffer": "^5.0.1"
          }
        },
        "passport": {
          "version": "0.6.0",
          "resolved": "https://registry.npmjs.org/passport/-/passport-0.6.0.tgz",
          "integrity": "sha512-0fe+p3ZnrWRW74fe8+SvCyf4a3Pb2/h7gFkQ8yTJpAO50gDzlfjZUZTO1k5Eg9kUct22OxHLqDZoKUWRHOh9ug==",
          "requires": {
            "passport-strategy": "1.x.x",
            "pause": "0.0.1",
            "utils-merge": "^1.0.1"
          }
        }
      }
    },
    "passport-local": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-local/-/passport-local-1.0.0.tgz",
      "integrity": "sha1-H+YyaMkudWBmJkN+O5BmYsFbpu4=",
      "requires": {
        "passport-strategy": "1.x.x"
      }
    },
    "passport-strategy": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/passport-strategy/-/passport-strategy-1.0.0.tgz",
      "integrity": "sha1-tVOaqPwiWj0a0XlHbd8ja0QPUuQ="
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18="
    },
    "path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ=="
    },
    "pause": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/pause/-/pause-0.0.1.tgz",
      "integrity": "sha1-HUCLP9t2kjuVQ9lvtMnf1TXZy10="
    },
    "pend": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
      "integrity": "sha1-elfrVQpng/kRUzH89GY9XI4AelA=",
      "optional": true
    },
    "performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=",
      "optional": true
    },
    "phantomjs-prebuilt": {
      "version": "2.1.16",
      "resolved": "https://registry.npmjs.org/phantomjs-prebuilt/-/phantomjs-prebuilt-2.1.16.tgz",
      "integrity": "sha1-79ISpKOWbTZHaE6ouniFSb4q7+8=",
      "optional": true,
      "requires": {
        "es6-promise": "^4.0.3",
        "extract-zip": "^1.6.5",
        "fs-extra": "^1.0.0",
        "hasha": "^2.2.0",
        "kew": "^0.7.0",
        "progress": "^1.1.8",
        "request": "^2.81.0",
        "request-progress": "^2.0.1",
        "which": "^1.2.10"
      }
    },
    "picomatch": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.2.2.tgz",
      "integrity": "sha512-q0M/9eZHzmr0AulXyPwNfZjtwZ/RBZlbN3K3CErVrk50T2ASYI7Bye0EvekFY3IP1Nt2DHu0re+V2ZHIpMkuWg=="
    },
    "pinkie": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/pinkie/-/pinkie-2.0.4.tgz",
      "integrity": "sha1-clVrgM+g1IqXToDnckjoDtT3+HA=",
      "optional": true
    },
    "pinkie-promise": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz",
      "integrity": "sha1-ITXW36ejWMBprJsXh3YogihFD/o=",
      "optional": true,
      "requires": {
        "pinkie": "^2.0.0"
      }
    },
    "prepend-http": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/prepend-http/-/prepend-http-2.0.0.tgz",
      "integrity": "sha1-6SQ0v6XqjBn0HN/UAddBo8gZ2Jc="
    },
    "printj": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/printj/-/printj-1.1.2.tgz",
      "integrity": "sha512-zA2SmoLaxZyArQTOPj5LXecR+RagfPSU5Kw1qP+jkWeNlrq+eJZyY2oS68SU1Z/7/myXM4lo9716laOFAVStCQ=="
    },
    "process": {
      "version": "0.11.10",
      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
      "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A=="
    },
    "process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
    },
    "progress": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/progress/-/progress-1.1.8.tgz",
      "integrity": "sha1-4mDHj2Fhzdmw5WzD4Khd4Xx6V74=",
      "optional": true
    },
    "proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "requires": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      }
    },
    "proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg=="
    },
    "pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha1-8FKijacOYYkX7wqKw0wa5aaChrM="
    },
    "psl": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.8.0.tgz",
      "integrity": "sha512-RIdOzyoavK+hA18OGGWDqUTsCLhtA7IcZ/6NCs4fFJaHBDab+pDDmDIByWFRQJq2Cd7r1OoQxBGKOaztq+hjIQ==",
      "optional": true
    },
    "pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w=="
    },
    "pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "requires": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
      "optional": true
    },
    "pupa": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/pupa/-/pupa-2.1.1.tgz",
      "integrity": "sha512-l1jNAspIBSFqbT+y+5FosojNpVpF94nlI+wDUpqP9enwOTfHx9f0gh5nB96vl+6yTpsJsypeNrwfzPrKuHB41A==",
      "requires": {
        "escape-goat": "^2.0.0"
      }
    },
    "qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "requires": {
        "side-channel": "^1.0.6"
      }
    },
    "random-bytes": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz",
      "integrity": "sha1-T2ih3Arli9P7lYSMMDJNt11kNgs="
    },
    "range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
    },
    "raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "requires": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      }
    },
    "rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "requires": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      }
    },
    "read-excel-file": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/read-excel-file/-/read-excel-file-5.0.0.tgz",
      "integrity": "sha512-Lk2rRORUA6ugz1gWemBqyO/9xynxWfmEURnT9oEL7GwyC1I6fsRYWMNaIyu614iZGLZsxYZlFlZMrF/LOe8jdQ==",
      "requires": {
        "jszip": "^3.5.0",
        "unzipper": "^0.9.15",
        "xmldom": "^0.1.27",
        "xpath": "0.0.27"
      }
    },
    "readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "requires": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "readdir-glob": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/readdir-glob/-/readdir-glob-1.1.1.tgz",
      "integrity": "sha512-91/k1EzZwDx6HbERR+zucygRFfiPl2zkIYZtv3Jjr6Mn7SkKcVct8aVO+sSRiGMc6fLf72du3d92/uY63YPdEA==",
      "requires": {
        "minimatch": "^3.0.4"
      }
    },
    "readdirp": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.5.0.tgz",
      "integrity": "sha512-cMhu7c/8rdhkHXWsY+osBhfSy0JikwpHK/5+imo+LpeasTF8ouErHrlYkwT0++njiyuDvc7OFY5T3ukvZ8qmFQ==",
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "registry-auth-token": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/registry-auth-token/-/registry-auth-token-4.2.1.tgz",
      "integrity": "sha512-6gkSb4U6aWJB4SF2ZvLb76yCBjcvufXBqvvEx1HbmKPkutswjW1xNVRY0+daljIYRbogN7O0etYSlbiaEQyMyw==",
      "requires": {
        "rc": "^1.2.8"
      }
    },
    "registry-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/registry-url/-/registry-url-5.1.0.tgz",
      "integrity": "sha512-8acYXXTI0AkQv6RAOjE3vOaIXZkT9wo4LOFbBKYQEEnnMNBpKqdUrI6S4NT0KPIo/WVvJ5tE/X5LF/TQUf0ekw==",
      "requires": {
        "rc": "^1.2.8"
      }
    },
    "request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "optional": true,
      "requires": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      },
      "dependencies": {
        "qs": {
          "version": "6.5.2",
          "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
          "integrity": "sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==",
          "optional": true
        },
        "uuid": {
          "version": "3.4.0",
          "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
          "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
          "optional": true
        }
      }
    },
    "request-progress": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/request-progress/-/request-progress-2.0.1.tgz",
      "integrity": "sha1-XTa7V5YcZzqlt4jbyBQf3yO0Tgg=",
      "optional": true,
      "requires": {
        "throttleit": "^1.0.0"
      }
    },
    "responselike": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-1.0.2.tgz",
      "integrity": "sha1-kYcg7ztjHFZCvgaPFa3lpG9Loec=",
      "requires": {
        "lowercase-keys": "^1.0.0"
      }
    },
    "rfc-facil": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/rfc-facil/-/rfc-facil-1.1.0.tgz",
      "integrity": "sha512-ImGh2qCMEn3kbuvv+YkH2oqwRDbGVi6t4rrycHUoIxIuFGxqap0GhGFE6oNrbtLzMOcSgcLPfPn7iq14XaBqQQ=="
    },
    "rimraf": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz",
      "integrity": "sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==",
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "safe-json-stringify": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/safe-json-stringify/-/safe-json-stringify-1.2.0.tgz",
      "integrity": "sha512-gH8eh2nZudPQO6TytOvbxnuhYBOvDBBLW52tz5q6X58lJcd/tkmqFR+5Z9adS8aJtURSXWThWy/xJtJwixErvg==",
      "optional": true
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "sax": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.4.1.tgz",
      "integrity": "sha512-+aWOz7yVScEGoKNd4PA10LZ8sk0A/z5+nXQG5giUO5rprX9jgYsTdov9qCchZiPIZezbZH+jRut8nPodFAX4Jg=="
    },
    "saxes": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/saxes/-/saxes-5.0.1.tgz",
      "integrity": "sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==",
      "requires": {
        "xmlchars": "^2.2.0"
      }
    },
    "semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ=="
    },
    "semver-diff": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/semver-diff/-/semver-diff-3.1.1.tgz",
      "integrity": "sha512-GX0Ix/CJcHyB8c4ykpHGIAvLyOwOobtM/8d+TQkAd81/bEjgPHrfba41Vpesr7jX/t8Uh+R3EX9eAS5be+jQYg==",
      "requires": {
        "semver": "^6.3.0"
      },
      "dependencies": {
        "semver": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
        }
      }
    },
    "send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "requires": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "dependencies": {
        "encodeurl": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
          "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w=="
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        },
        "on-finished": {
          "version": "2.4.1",
          "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
          "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
          "requires": {
            "ee-first": "1.1.1"
          }
        }
      }
    },
    "seq-queue": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",
      "integrity": "sha1-1WgS4cAXpuTnw+Ojeh2m143TyT4="
    },
    "serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "requires": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      }
    },
    "setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha1-KQy7Iy4waULX1+qbg3Mqt4VvgoU="
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "requires": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      }
    },
    "side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "requires": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      }
    },
    "side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "requires": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      }
    },
    "side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "requires": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      }
    },
    "signal-exit": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.3.tgz",
      "integrity": "sha512-VUJ49FC8U1OxwZLxIbTTrDvLnf/6TDgxZcK8wxR8zs13xpx7xbG60ndBlhNrFi2EMuFRoeDoJO7wthSLq42EjA=="
    },
    "soap": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/soap/-/soap-1.1.5.tgz",
      "integrity": "sha512-6YJrwY+tXHwlk/wtS7+XSc0jyEWgNw8xJQYvY9m1jZlPaGkc2nzmwKAq98fwGIw51acywhsraaeq/6GFggaNYw==",
      "requires": {
        "axios": "^1.7.7",
        "axios-ntlm": "^1.4.2",
        "debug": "^4.3.6",
        "formidable": "^3.5.1",
        "get-stream": "^6.0.1",
        "lodash": "^4.17.21",
        "sax": "^1.4.1",
        "strip-bom": "^3.0.0",
        "whatwg-mimetype": "4.0.0",
        "xml-crypto": "^6.0.0"
      },
      "dependencies": {
        "axios": {
          "version": "1.7.7",
          "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.7.tgz",
          "integrity": "sha512-S4kL7XrjgBmvdGut0sN3yJxqYzrDOnivkBiN0OFs6hLiUam3UPvswUo0kqGyhqUZGEOytHyumEdXsAkgCOUf3Q==",
          "requires": {
            "follow-redirects": "^1.15.6",
            "form-data": "^4.0.0",
            "proxy-from-env": "^1.1.0"
          }
        },
        "debug": {
          "version": "4.3.7",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
          "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
          "requires": {
            "ms": "^2.1.3"
          }
        },
        "form-data": {
          "version": "4.0.1",
          "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.1.tgz",
          "integrity": "sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==",
          "requires": {
            "asynckit": "^0.4.0",
            "combined-stream": "^1.0.8",
            "mime-types": "^2.1.12"
          }
        },
        "get-stream": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
          "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg=="
        },
        "ms": {
          "version": "2.1.3",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
          "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
        }
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
    },
    "sqlstring": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.1.tgz",
      "integrity": "sha1-R1OT/56RR5rqYtyvDKPRSYOn+0A="
    },
    "ssf": {
      "version": "0.10.3",
      "resolved": "https://registry.npmjs.org/ssf/-/ssf-0.10.3.tgz",
      "integrity": "sha512-pRuUdW0WwyB2doSqqjWyzwCD6PkfxpHAHdZp39K3dp/Hq7f+xfMwNAWIi16DyrRg4gg9c/RvLYkJTSawTPTm1w==",
      "requires": {
        "frac": "~1.1.2"
      }
    },
    "sshpk": {
      "version": "1.16.1",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.16.1.tgz",
      "integrity": "sha512-HXXqVUq7+pcKeLqqZj6mHFUMvXtOJt1uoUx09pFW6011inTMxqI8BA8PM95myrIyyKwdnzjdFjLiE6KBPVtJIg==",
      "optional": true,
      "requires": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      }
    },
    "statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ=="
    },
    "streamsearch": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-0.1.2.tgz",
      "integrity": "sha1-gIudDlb8Jz2Am6VzOOkpkZoanxo="
    },
    "string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "requires": {
        "safe-buffer": "~5.1.0"
      }
    },
    "string-width": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.0.tgz",
      "integrity": "sha512-zUz5JD+tgqtuDjMhwIg5uFVV3dtqZ9yQJlZVfq4I01/K5Paj5UHj7VyrQOJvzawSVlKpObApbfD0Ed6yJc+1eg==",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.0.tgz",
          "integrity": "sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg=="
        },
        "emoji-regex": {
          "version": "8.0.0",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
          "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
        },
        "is-fullwidth-code-point": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
          "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
        },
        "strip-ansi": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz",
          "integrity": "sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==",
          "requires": {
            "ansi-regex": "^5.0.0"
          }
        }
      }
    },
    "strip-ansi": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
      "requires": {
        "ansi-regex": "^4.1.0"
      }
    },
    "strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA=="
    },
    "strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo="
    },
    "supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "requires": {
        "has-flag": "^3.0.0"
      }
    },
    "tableexport": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/tableexport/-/tableexport-5.2.0.tgz",
      "integrity": "sha512-Ux3mepRxwi7d4H3ArEXETpnBaxV4Wl3yoYQOByFMyIkOzslwgWSUYcB7InHyCEnwlsLgtQjRtLqjb0f2gpW+vg==",
      "requires": {
        "blobjs": "^1.1.1",
        "file-saverjs": "^1.3.6",
        "xlsx": "^0.14.0"
      }
    },
    "tar-stream": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.2.0.tgz",
      "integrity": "sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==",
      "requires": {
        "bl": "^4.0.3",
        "end-of-stream": "^1.4.1",
        "fs-constants": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1"
      },
      "dependencies": {
        "readable-stream": {
          "version": "3.6.0",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
          "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        }
      }
    },
    "term-size": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/term-size/-/term-size-2.2.1.tgz",
      "integrity": "sha512-wK0Ri4fOGjv/XPy8SBHZChl8CM7uMc5VML7SqiQ0zG7+J5Vr+RMQDoHa2CNT6KHUnTGIXH34UDMkPzAUyapBZg=="
    },
    "throttleit": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/throttleit/-/throttleit-1.0.0.tgz",
      "integrity": "sha1-nnhYNtr0Z0MUWlmEtiaNgoUorGw=",
      "optional": true
    },
    "timeago.js": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/timeago.js/-/timeago.js-4.0.2.tgz",
      "integrity": "sha512-a7wPxPdVlQL7lqvitHGGRsofhdwtkoSXPGATFuSOA2i1ZNQEPLrGnj68vOp2sOJTCFAQVXPeNMX/GctBaO9L2w=="
    },
    "tmp": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.2.1.tgz",
      "integrity": "sha512-76SUhtfqR2Ijn+xllcI5P1oyannHNHByD80W1q447gU3mp9G9PSpGdWmjUOHRDPiHYacIk66W7ubDTuPF3BEtQ==",
      "requires": {
        "rimraf": "^3.0.0"
      },
      "dependencies": {
        "rimraf": {
          "version": "3.0.2",
          "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
          "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
          "requires": {
            "glob": "^7.1.3"
          }
        }
      }
    },
    "to-readable-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/to-readable-stream/-/to-readable-stream-1.0.0.tgz",
      "integrity": "sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q=="
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "touch": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.0.tgz",
      "integrity": "sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==",
      "requires": {
        "nopt": "~1.0.10"
      }
    },
    "tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "optional": true,
      "requires": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      }
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "traverse": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/traverse/-/traverse-0.3.9.tgz",
      "integrity": "sha1-cXuPIgzAu3tE5AUUwisui7xw2Lk="
    },
    "tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
      "optional": true,
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=",
      "optional": true
    },
    "type-fest": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA=="
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c="
    },
    "typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "requires": {
        "is-typedarray": "^1.0.0"
      }
    },
    "uglify-js": {
      "version": "3.12.1",
      "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-3.12.1.tgz",
      "integrity": "sha512-o8lHP20KjIiQe5b/67Rh68xEGRrc2SRsCuuoYclXXoC74AfSRGblU1HKzJWH3HxPZ+Ort85fWHpSX7KwBUC9CQ==",
      "optional": true
    },
    "uid-safe": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz",
      "integrity": "sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==",
      "requires": {
        "random-bytes": "~1.0.0"
      }
    },
    "undefsafe": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.3.tgz",
      "integrity": "sha512-nrXZwwXrD/T/JXeygJqdCO6NZZ1L66HrxM/Z7mIq2oPanoN0F1nLx3lwJMu6AwJY69hdixaFQOuoYsMjE5/C2A==",
      "requires": {
        "debug": "^2.2.0"
      }
    },
    "underscore": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.9.2.tgz",
      "integrity": "sha512-D39qtimx0c1fI3ya1Lnhk3E9nONswSKhnffBI0gME9C99fYOkNi04xs8K6pePLhvl1frbDemkaBQ5ikWllR2HQ=="
    },
    "unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "requires": {
        "crypto-random-string": "^2.0.0"
      }
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ=="
    },
    "unzipper": {
      "version": "0.9.15",
      "resolved": "https://registry.npmjs.org/unzipper/-/unzipper-0.9.15.tgz",
      "integrity": "sha512-2aaUvO4RAeHDvOCuEtth7jrHFaCKTSXPqUkXwADaLBzGbgZGzUDccoEdJ5lW+3RmfpOZYNx0Rw6F6PUzM6caIA==",
      "requires": {
        "big-integer": "^1.6.17",
        "binary": "~0.3.0",
        "bluebird": "~3.4.1",
        "buffer-indexof-polyfill": "~1.0.0",
        "duplexer2": "~0.1.4",
        "fstream": "^1.0.12",
        "listenercount": "~1.0.1",
        "readable-stream": "~2.3.6",
        "setimmediate": "~1.0.4"
      }
    },
    "update-notifier": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/update-notifier/-/update-notifier-4.1.3.tgz",
      "integrity": "sha512-Yld6Z0RyCYGB6ckIjffGOSOmHXj1gMeE7aROz4MG+XMkmixBX4jUngrGXNYz7wPKBmtoD4MnBa2Anu7RSKht/A==",
      "requires": {
        "boxen": "^4.2.0",
        "chalk": "^3.0.0",
        "configstore": "^5.0.1",
        "has-yarn": "^2.1.0",
        "import-lazy": "^2.1.0",
        "is-ci": "^2.0.0",
        "is-installed-globally": "^0.3.1",
        "is-npm": "^4.0.0",
        "is-yarn-global": "^0.3.0",
        "latest-version": "^5.0.0",
        "pupa": "^2.0.1",
        "semver-diff": "^3.1.1",
        "xdg-basedir": "^4.0.0"
      }
    },
    "uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "optional": true,
      "requires": {
        "punycode": "^2.1.0"
      }
    },
    "url-parse-lax": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/url-parse-lax/-/url-parse-lax-3.0.0.tgz",
      "integrity": "sha1-FrXK/Afb42dsGxmZF3gj1lA6yww=",
      "requires": {
        "prepend-http": "^2.0.0"
      }
    },
    "url-template": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/url-template/-/url-template-2.0.8.tgz",
      "integrity": "sha512-XdVKMF4SJ0nP/O7XIPB0JwAEuT9lDIYnNsK8yGVe43y0AWoKeJNdv3ZNWh7ksJ6KqQFjOO6ox/VEitLnaVNufw=="
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM="
    },
    "uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg=="
    },
    "valid-url": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/valid-url/-/valid-url-1.0.9.tgz",
      "integrity": "sha512-QQDsV8OnSf5Uc30CKSwG9lnhMPe6exHtTXLRYX8uMwKENy640pU+2BgBL0LRbDh/eYRahNCS7aewCx0wf3NYVA=="
    },
    "validator": {
      "version": "13.5.1",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.5.1.tgz",
      "integrity": "sha512-s+7LW1Xi0OzPNfGN7Hb2vk0YB/epp9KFHHGC5JtqZOE1dUkN4ULPFZAQ1inCu7ceAsWmOJu6sn9cnwm3R+ghWQ=="
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw="
    },
    "verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=",
      "optional": true,
      "requires": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "whatwg-mimetype": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
      "integrity": "sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "optional": true,
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "widest-line": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/widest-line/-/widest-line-3.1.0.tgz",
      "integrity": "sha512-NsmoXalsWVDMGupxZ5R08ka9flZjjiLvHVAWYOKtiKM8ujtZWr9cRffak+uSE48+Ob8ObalXpwyeUiyDD6QFgg==",
      "requires": {
        "string-width": "^4.0.0"
      }
    },
    "wordwrap": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz",
      "integrity": "sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus="
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
    },
    "write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "requires": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "xdg-basedir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/xdg-basedir/-/xdg-basedir-4.0.0.tgz",
      "integrity": "sha512-PSNhEJDejZYV7h50BohL09Er9VaIefr2LMAf3OEmpCkjOi34eYyQYAXUTjEQtZJTKcF0E2UKTh+osDLsgNim9Q=="
    },
    "xlsx": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/xlsx/-/xlsx-0.14.5.tgz",
      "integrity": "sha512-s/5f4/mjeWREmIWZ+HtDfh/rnz51ar+dZ4LWKZU3u9VBx2zLdSIWTdXgoa52/pnZ9Oe/Vu1W1qzcKzLVe+lq4w==",
      "requires": {
        "adler-32": "~1.2.0",
        "cfb": "^1.1.2",
        "codepage": "~1.14.0",
        "commander": "~2.17.1",
        "crc-32": "~1.2.0",
        "exit-on-epipe": "~1.0.1",
        "ssf": "~0.10.2"
      }
    },
    "xml-crypto": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/xml-crypto/-/xml-crypto-6.0.0.tgz",
      "integrity": "sha512-L3RgnkaDrHaYcCnoENv4Idzt1ZRj5U1z1BDH98QdDTQfssScx8adgxhd9qwyYo+E3fXbQZjEQH7aiXHLVgxGvw==",
      "requires": {
        "@xmldom/is-dom-node": "^1.0.1",
        "@xmldom/xmldom": "^0.8.10",
        "xpath": "^0.0.33"
      },
      "dependencies": {
        "xpath": {
          "version": "0.0.33",
          "resolved": "https://registry.npmjs.org/xpath/-/xpath-0.0.33.tgz",
          "integrity": "sha512-NNXnzrkDrAzalLhIUc01jO2mOzXGXh1JwPgkihcLLzw98c0WgYDmmjSh1Kl3wzaxSVWMuA+fe0WTWOBDWCBmNA=="
        }
      }
    },
    "xml-formatter": {
      "version": "3.6.6",
      "resolved": "https://registry.npmjs.org/xml-formatter/-/xml-formatter-3.6.6.tgz",
      "integrity": "sha512-yfofQht42x2sN1YThT6Er6GFXiQinfDAsMTNvMPi2uZw5/Vtc2PYHfvALR8U+b2oN2ekBxLd2tGWV06rAM8nQA==",
      "requires": {
        "xml-parser-xo": "^4.1.4"
      }
    },
    "xml-parser-xo": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/xml-parser-xo/-/xml-parser-xo-4.1.4.tgz",
      "integrity": "sha512-wo+yWDNeMwd1ctzH4CsiGXaAappDsxuR+VnmPewOzHk/zvefksT2ZlcWpAePl11THOWgnIZM4GjvumevurNWZw=="
    },
    "xml2js": {
      "version": "0.4.23",
      "resolved": "https://registry.npmjs.org/xml2js/-/xml2js-0.4.23.tgz",
      "integrity": "sha512-ySPiMjM0+pLDftHgXY4By0uswI3SPKLDw/i3UXbnO8M/p28zqexCUoPmQFrYD+/1BzhGJSs2i1ERWKJAtiLrug==",
      "requires": {
        "sax": ">=0.6.0",
        "xmlbuilder": "~11.0.0"
      }
    },
    "xmlbuilder": {
      "version": "11.0.1",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-11.0.1.tgz",
      "integrity": "sha512-fDlsI/kFEx7gLvbecc0/ohLG50fugQp8ryHzMTuW9vSa1GJ0XYWKnhsUx7oie3G98+r56aTQIUB4kht42R3JvA=="
    },
    "xmlchars": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
      "integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw=="
    },
    "xmldom": {
      "version": "0.1.31",
      "resolved": "https://registry.npmjs.org/xmldom/-/xmldom-0.1.31.tgz",
      "integrity": "sha512-yS2uJflVQs6n+CyjHoaBmVSqIDevTAWrzMmjG1Gc7h1qQ7uVozNhEPJAwZXWyGQ/Gafo3fCwrcaokezLPupVyQ=="
    },
    "xpath": {
      "version": "0.0.27",
      "resolved": "https://registry.npmjs.org/xpath/-/xpath-0.0.27.tgz",
      "integrity": "sha512-fg03WRxtkCV6ohClePNAECYsmpKKTv5L8y/X3Dn1hQrec3POx2jHZ/0P2qQ6HvsrU1BmeqXcof3NGGueG6LxwQ=="
    },
    "xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ=="
    },
    "yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "yauzl": {
      "version": "2.10.0",
      "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
      "integrity": "sha1-x+sXyT4RLLEIb6bY5R+wZnt5pfk=",
      "optional": true,
      "requires": {
        "buffer-crc32": "~0.2.3",
        "fd-slicer": "~1.1.0"
      }
    },
    "zip-stream": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/zip-stream/-/zip-stream-4.1.0.tgz",
      "integrity": "sha512-zshzwQW7gG7hjpBlgeQP9RuyPGNxvJdzR8SUM3QhxCnLjWN2E7j3dOvpeDcQoETfHx0urRS7EtmVToql7YpU4A==",
      "requires": {
        "archiver-utils": "^2.1.0",
        "compress-commons": "^4.1.0",
        "readable-stream": "^3.6.0"
      },
      "dependencies": {
        "readable-stream": {
          "version": "3.6.0",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
          "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        }
      }
    }
  }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\package-lock.json ---


--- C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\package.json ---

{
  "name": "sistema-pagos-remesas",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@azure/msal-node": "^3.2.3",
    "@handlebars/allow-prototype-access": "^1.0.3",
    "axios": "^0.21.4",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.3",
    "connect-flash": "^0.1.1",
    "dotenv": "^16.4.7",
    "exceljs": "^4.4.0",
    "express": "^4.21.2",
    "express-handlebars": "^5.2.0",
    "express-mysql-session": "^2.1.4",
    "express-session": "^1.18.1",
    "express-validator": "^6.8.0",
    "git": "^0.1.5",
    "googleapis": "^104.0.0",
    "handlebars": "^4.7.6",
    "html-pdf": "^3.0.1",
    "jsonwebtoken": "^9.0.2",
    "linq": "^3.2.3",
    "luxon": "^3.6.1",
    "memorystore": "^1.6.6",
    "moment": "^2.29.1",
    "morgan": "^1.10.0",
    "multer": "^1.4.2",
    "mysql": "^2.18.1",
    "mysql2": "^2.2.5",
    "nodemailer": "^6.7.7",
    "nodemon": "^2.0.6",
    "numeros_a_letras": "^1.0.7",
    "passport": "^0.4.1",
    "passport-azure-ad": "^4.3.5",
    "passport-local": "^1.0.0",
    "read-excel-file": "^5.0.0",
    "rfc-facil": "^1.1.0",
    "soap": "^1.1.5",
    "tableexport": "^5.2.0",
    "timeago.js": "^4.0.2",
    "uuid": "^8.3.2",
    "xml-formatter": "^3.6.6",
    "xml2js": "^0.4.23"
  }
}

--- End of C:\Users\ELA\Documents\Proyectos\ITECH\appWeb_frd\package.json ---

